module.exports = {

"[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    bootstrap: null,
    error: null,
    event: null,
    info: null,
    prefixes: null,
    ready: null,
    trace: null,
    wait: null,
    warn: null,
    warnOnce: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    bootstrap: function() {
        return bootstrap;
    },
    error: function() {
        return error;
    },
    event: function() {
        return event;
    },
    info: function() {
        return info;
    },
    prefixes: function() {
        return prefixes;
    },
    ready: function() {
        return ready;
    },
    trace: function() {
        return trace;
    },
    wait: function() {
        return wait;
    },
    warn: function() {
        return warn;
    },
    warnOnce: function() {
        return warnOnce;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _lrucache = __turbopack_require__("[project]/node_modules/next/dist/server/lib/lru-cache.js [app-rsc] (ecmascript)");
const prefixes = {
    wait: (0, _picocolors.white)((0, _picocolors.bold)('○')),
    error: (0, _picocolors.red)((0, _picocolors.bold)('⨯')),
    warn: (0, _picocolors.yellow)((0, _picocolors.bold)('⚠')),
    ready: '▲',
    info: (0, _picocolors.white)((0, _picocolors.bold)(' ')),
    event: (0, _picocolors.green)((0, _picocolors.bold)('✓')),
    trace: (0, _picocolors.magenta)((0, _picocolors.bold)('»'))
};
const LOGGING_METHOD = {
    log: 'log',
    warn: 'warn',
    error: 'error'
};
function prefixedLog(prefixType, ...message) {
    if ((message[0] === '' || message[0] === undefined) && message.length === 1) {
        message.shift();
    }
    const consoleMethod = prefixType in LOGGING_METHOD ? LOGGING_METHOD[prefixType] : 'log';
    const prefix = prefixes[prefixType];
    // If there's no message, don't print the prefix but a new line
    if (message.length === 0) {
        console[consoleMethod]('');
    } else {
        // Ensure if there's ANSI escape codes it's concatenated into one string.
        // Chrome DevTool can only handle color if it's in one string.
        if (message.length === 1 && typeof message[0] === 'string') {
            console[consoleMethod](' ' + prefix + ' ' + message[0]);
        } else {
            console[consoleMethod](' ' + prefix, ...message);
        }
    }
}
function bootstrap(...message) {
    // logging format: ' <prefix> <message>'
    // e.g. ' ✓ Compiled successfully'
    // Add spaces to align with the indent of other logs
    console.log('   ' + message.join(' '));
}
function wait(...message) {
    prefixedLog('wait', ...message);
}
function error(...message) {
    prefixedLog('error', ...message);
}
function warn(...message) {
    prefixedLog('warn', ...message);
}
function ready(...message) {
    prefixedLog('ready', ...message);
}
function info(...message) {
    prefixedLog('info', ...message);
}
function event(...message) {
    prefixedLog('event', ...message);
}
function trace(...message) {
    prefixedLog('trace', ...message);
}
const warnOnceCache = new _lrucache.LRUCache(10000, (value)=>value.length);
function warnOnce(...message) {
    const key = message.join(' ');
    if (!warnOnceCache.has(key)) {
        warnOnceCache.set(key, key);
        warn(...message);
    }
} //# sourceMappingURL=log.js.map
}}),
"[project]/node_modules/next/dist/build/segment-config/app/app-segment-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    AppSegmentConfigSchemaKeys: null,
    parseAppSegmentConfig: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppSegmentConfigSchemaKeys: function() {
        return AppSegmentConfigSchemaKeys;
    },
    parseAppSegmentConfig: function() {
        return parseAppSegmentConfig;
    }
});
const _zod = __turbopack_require__("[project]/node_modules/next/dist/compiled/zod/index.js [app-rsc] (ecmascript)");
const _zod1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/zod.js [app-rsc] (ecmascript)");
/**
 * The schema for configuration for a page.
 */ const AppSegmentConfigSchema = _zod.z.object({
    /**
   * The number of seconds to revalidate the page or false to disable revalidation.
   */ revalidate: _zod.z.union([
        _zod.z.number().int().nonnegative(),
        _zod.z.literal(false)
    ]).optional(),
    /**
   * Whether the page supports dynamic parameters.
   */ dynamicParams: _zod.z.boolean().optional(),
    /**
   * The dynamic behavior of the page.
   */ dynamic: _zod.z.enum([
        'auto',
        'error',
        'force-static',
        'force-dynamic'
    ]).optional(),
    /**
   * The caching behavior of the page.
   */ fetchCache: _zod.z.enum([
        'auto',
        'default-cache',
        'only-cache',
        'force-cache',
        'force-no-store',
        'default-no-store',
        'only-no-store'
    ]).optional(),
    /**
   * The preferred region for the page.
   */ preferredRegion: _zod.z.union([
        _zod.z.string(),
        _zod.z.array(_zod.z.string())
    ]).optional(),
    /**
   * Whether the page supports partial prerendering. When true, the page will be
   * served using partial prerendering. This setting will only take affect if
   * it's enabled via the `experimental.ppr = "incremental"` option.
   */ experimental_ppr: _zod.z.boolean().optional(),
    /**
   * The runtime to use for the page.
   */ runtime: _zod.z.enum([
        'edge',
        'nodejs'
    ]).optional(),
    /**
   * The maximum duration for the page in seconds.
   */ maxDuration: _zod.z.number().int().nonnegative().optional()
});
function parseAppSegmentConfig(data, route) {
    const parsed = AppSegmentConfigSchema.safeParse(data, {
        errorMap: (issue, ctx)=>{
            if (issue.path.length === 1 && issue.path[0] === 'revalidate') {
                return {
                    message: `Invalid revalidate value ${JSON.stringify(ctx.data)} on "${route}", must be a non-negative number or false`
                };
            }
            return {
                message: ctx.defaultError
            };
        }
    });
    if (!parsed.success) {
        throw (0, _zod1.formatZodError)(`Invalid segment configuration options detected for "${route}". Read more at https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config`, parsed.error);
    }
    return parsed.data;
}
const AppSegmentConfigSchemaKeys = AppSegmentConfigSchema.keyof().options; //# sourceMappingURL=app-segment-config.js.map
}}),
"[project]/node_modules/next/dist/build/segment-config/app/app-segments.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "collectSegments", {
    enumerable: true,
    get: function() {
        return collectSegments;
    }
});
const _appsegmentconfig = __turbopack_require__("[project]/node_modules/next/dist/build/segment-config/app/app-segment-config.js [app-rsc] (ecmascript)");
const _invarianterror = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-rsc] (ecmascript)");
const _checks = __turbopack_require__("[project]/node_modules/next/dist/server/route-modules/checks.js [app-rsc] (ecmascript)");
const _clientreference = __turbopack_require__("[project]/node_modules/next/dist/lib/client-reference.js [app-rsc] (ecmascript)");
const _getsegmentparam = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/get-segment-param.js [app-rsc] (ecmascript)");
const _appdirmodule = __turbopack_require__("[project]/node_modules/next/dist/server/lib/app-dir-module.js [app-rsc] (ecmascript)");
const _segment = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/segment.js [app-rsc] (ecmascript)");
/**
 * Parses the app config and attaches it to the segment.
 */ function attach(segment, userland, route) {
    // If the userland is not an object, then we can't do anything with it.
    if (typeof userland !== 'object' || userland === null) {
        return;
    }
    // Try to parse the application configuration.
    const config = (0, _appsegmentconfig.parseAppSegmentConfig)(userland, route);
    // If there was any keys on the config, then attach it to the segment.
    if (Object.keys(config).length > 0) {
        segment.config = config;
    }
    if ('generateStaticParams' in userland && typeof userland.generateStaticParams === 'function') {
        var _segment_config;
        segment.generateStaticParams = userland.generateStaticParams;
        // Validate that `generateStaticParams` makes sense in this context.
        if (((_segment_config = segment.config) == null ? void 0 : _segment_config.runtime) === 'edge') {
            throw new Error('Edge runtime is not supported with `generateStaticParams`.');
        }
    }
}
/**
 * Walks the loader tree and collects the generate parameters for each segment.
 *
 * @param routeModule the app page route module
 * @returns the segments for the app page route module
 */ async function collectAppPageSegments(routeModule) {
    // We keep track of unique segments, since with parallel routes, it's possible
    // to see the same segment multiple times.
    const uniqueSegments = new Map();
    const queue = [
        [
            routeModule.userland.loaderTree,
            []
        ]
    ];
    while(queue.length > 0){
        var _getSegmentParam;
        const [loaderTree, currentSegments] = queue.shift();
        const [name, parallelRoutes] = loaderTree;
        // Process current node
        const { mod: userland, filePath } = await (0, _appdirmodule.getLayoutOrPageModule)(loaderTree);
        const isClientComponent = userland && (0, _clientreference.isClientReference)(userland);
        const isDynamicSegment = /\[.*\]$/.test(name);
        const param = isDynamicSegment ? (_getSegmentParam = (0, _getsegmentparam.getSegmentParam)(name)) == null ? void 0 : _getSegmentParam.param : undefined;
        const segment = {
            name,
            param,
            filePath,
            config: undefined,
            isDynamicSegment,
            generateStaticParams: undefined
        };
        // Only server components can have app segment configurations
        if (!isClientComponent) {
            attach(segment, userland, routeModule.definition.pathname);
        }
        // Create a unique key for the segment
        const segmentKey = getSegmentKey(segment);
        if (!uniqueSegments.has(segmentKey)) {
            uniqueSegments.set(segmentKey, segment);
        }
        const updatedSegments = [
            ...currentSegments,
            segment
        ];
        // If this is a page segment, we've reached a leaf node
        if (name === _segment.PAGE_SEGMENT_KEY) {
            // Add all segments in the current path
            updatedSegments.forEach((seg)=>{
                const key = getSegmentKey(seg);
                uniqueSegments.set(key, seg);
            });
        }
        // Add all parallel routes to the queue
        for(const parallelRouteKey in parallelRoutes){
            const parallelRoute = parallelRoutes[parallelRouteKey];
            queue.push([
                parallelRoute,
                updatedSegments
            ]);
        }
    }
    return Array.from(uniqueSegments.values());
}
function getSegmentKey(segment) {
    return `${segment.name}-${segment.filePath ?? ''}-${segment.param ?? ''}`;
}
/**
 * Collects the segments for a given app route module.
 *
 * @param routeModule the app route module
 * @returns the segments for the app route module
 */ function collectAppRouteSegments(routeModule) {
    // Get the pathname parts, slice off the first element (which is empty).
    const parts = routeModule.definition.pathname.split('/').slice(1);
    if (parts.length === 0) {
        throw new _invarianterror.InvariantError('Expected at least one segment');
    }
    // Generate all the segments.
    const segments = parts.map((name)=>{
        var _getSegmentParam;
        const isDynamicSegment = /^\[.*\]$/.test(name);
        const param = isDynamicSegment ? (_getSegmentParam = (0, _getsegmentparam.getSegmentParam)(name)) == null ? void 0 : _getSegmentParam.param : undefined;
        return {
            name,
            param,
            filePath: undefined,
            isDynamicSegment,
            config: undefined,
            generateStaticParams: undefined
        };
    });
    // We know we have at least one, we verified this above. We should get the
    // last segment which represents the root route module.
    const segment = segments[segments.length - 1];
    segment.filePath = routeModule.definition.filename;
    // Extract the segment config from the userland module.
    attach(segment, routeModule.userland, routeModule.definition.pathname);
    return segments;
}
function collectSegments({ routeModule }) {
    if ((0, _checks.isAppRouteRouteModule)(routeModule)) {
        return collectAppRouteSegments(routeModule);
    }
    if ((0, _checks.isAppPageRouteModule)(routeModule)) {
        return collectAppPageSegments(routeModule);
    }
    throw new _invarianterror.InvariantError('Expected a route module to be one of app route or page');
} //# sourceMappingURL=app-segments.js.map
}}),
"[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    NestedMiddlewareError: null,
    buildAppStaticPaths: null,
    buildStaticPaths: null,
    collectMeta: null,
    collectRoutesUsingEdgeRuntime: null,
    computeFromManifest: null,
    copyTracedFiles: null,
    detectConflictingPaths: null,
    difference: null,
    getDefinedNamedExports: null,
    getJsPageSizeInKb: null,
    getPossibleInstrumentationHookFilenames: null,
    getPossibleMiddlewareFilenames: null,
    getSupportedBrowsers: null,
    hasCustomGetInitialProps: null,
    isAppBuiltinNotFoundPage: null,
    isCustomErrorPage: null,
    isInstrumentationHookFile: null,
    isInstrumentationHookFilename: null,
    isMiddlewareFile: null,
    isMiddlewareFilename: null,
    isPageStatic: null,
    isReservedPage: null,
    isWebpackAppPagesLayer: null,
    isWebpackBundledLayer: null,
    isWebpackClientOnlyLayer: null,
    isWebpackDefaultLayer: null,
    isWebpackServerOnlyLayer: null,
    printCustomRoutes: null,
    printTreeView: null,
    reduceAppConfig: null,
    unique: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NestedMiddlewareError: function() {
        return NestedMiddlewareError;
    },
    buildAppStaticPaths: function() {
        return buildAppStaticPaths;
    },
    buildStaticPaths: function() {
        return buildStaticPaths;
    },
    collectMeta: function() {
        return collectMeta;
    },
    collectRoutesUsingEdgeRuntime: function() {
        return collectRoutesUsingEdgeRuntime;
    },
    computeFromManifest: function() {
        return computeFromManifest;
    },
    copyTracedFiles: function() {
        return copyTracedFiles;
    },
    detectConflictingPaths: function() {
        return detectConflictingPaths;
    },
    difference: function() {
        return difference;
    },
    getDefinedNamedExports: function() {
        return getDefinedNamedExports;
    },
    getJsPageSizeInKb: function() {
        return getJsPageSizeInKb;
    },
    getPossibleInstrumentationHookFilenames: function() {
        return getPossibleInstrumentationHookFilenames;
    },
    getPossibleMiddlewareFilenames: function() {
        return getPossibleMiddlewareFilenames;
    },
    getSupportedBrowsers: function() {
        return getSupportedBrowsers;
    },
    hasCustomGetInitialProps: function() {
        return hasCustomGetInitialProps;
    },
    isAppBuiltinNotFoundPage: function() {
        return isAppBuiltinNotFoundPage;
    },
    isCustomErrorPage: function() {
        return isCustomErrorPage;
    },
    isInstrumentationHookFile: function() {
        return isInstrumentationHookFile;
    },
    isInstrumentationHookFilename: function() {
        return isInstrumentationHookFilename;
    },
    isMiddlewareFile: function() {
        return isMiddlewareFile;
    },
    isMiddlewareFilename: function() {
        return isMiddlewareFilename;
    },
    isPageStatic: function() {
        return isPageStatic;
    },
    isReservedPage: function() {
        return isReservedPage;
    },
    isWebpackAppPagesLayer: function() {
        return isWebpackAppPagesLayer;
    },
    isWebpackBundledLayer: function() {
        return isWebpackBundledLayer;
    },
    isWebpackClientOnlyLayer: function() {
        return isWebpackClientOnlyLayer;
    },
    isWebpackDefaultLayer: function() {
        return isWebpackDefaultLayer;
    },
    isWebpackServerOnlyLayer: function() {
        return isWebpackServerOnlyLayer;
    },
    printCustomRoutes: function() {
        return printCustomRoutes;
    },
    printTreeView: function() {
        return printTreeView;
    },
    reduceAppConfig: function() {
        return reduceAppConfig;
    },
    unique: function() {
        return unique;
    }
});
__turbopack_require__("[project]/node_modules/next/dist/server/require-hook.js [app-rsc] (ecmascript)");
__turbopack_require__("[project]/node_modules/next/dist/server/node-polyfill-crypto.js [app-rsc] (ecmascript)");
__turbopack_require__("[project]/node_modules/next/dist/server/node-environment.js [app-rsc] (ecmascript)");
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _gzipsize = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/gzip-size/index.js [app-rsc] (ecmascript)"));
const _texttable = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/text-table/index.js [app-rsc] (ecmascript)"));
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _fs = __turbopack_require__("[externals]/fs [external] (fs, cjs)");
const _reactis = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-is/index.js [app-rsc] (ecmascript)");
const _stripansi = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/strip-ansi/index.js [app-rsc] (ecmascript)"));
const _browserslist = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/browserslist/index.js [app-rsc] (ecmascript)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _prettybytes = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/lib/pretty-bytes.js [app-rsc] (ecmascript)"));
const _routeregex = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/route-regex.js [app-rsc] (ecmascript)");
const _routematcher = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/route-matcher.js [app-rsc] (ecmascript)");
const _isdynamic = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/is-dynamic.js [app-rsc] (ecmascript)");
const _escapepathdelimiters = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/escape-path-delimiters.js [app-rsc] (ecmascript)"));
const _findpagefile = __turbopack_require__("[project]/node_modules/next/dist/server/lib/find-page-file.js [app-rsc] (ecmascript)");
const _removetrailingslash = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js [app-rsc] (ecmascript)");
const _isedgeruntime = __turbopack_require__("[project]/node_modules/next/dist/lib/is-edge-runtime.js [app-rsc] (ecmascript)");
const _normalizelocalepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js [app-rsc] (ecmascript)");
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
const _loadcomponents = __turbopack_require__("[project]/node_modules/next/dist/server/load-components.js [app-rsc] (ecmascript)");
const _trace = __turbopack_require__("[project]/node_modules/next/dist/trace/index.js [app-rsc] (ecmascript)");
const _setuphttpagentenv = __turbopack_require__("[project]/node_modules/next/dist/server/setup-http-agent-env.js [app-rsc] (ecmascript)");
const _asyncsema = __turbopack_require__("[project]/node_modules/next/dist/compiled/async-sema/index.js [app-rsc] (ecmascript)");
const _denormalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js [app-rsc] (ecmascript)");
const _normalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-page-path.js [app-rsc] (ecmascript)");
const _sandbox = __turbopack_require__("[project]/node_modules/next/dist/server/web/sandbox/index.js [app-rsc] (ecmascript)");
const _clientreference = __turbopack_require__("[project]/node_modules/next/dist/lib/client-reference.js [app-rsc] (ecmascript)");
const _workstore = __turbopack_require__("[project]/node_modules/next/dist/server/async-storage/work-store.js [app-rsc] (ecmascript)");
const _incrementalcache = __turbopack_require__("[project]/node_modules/next/dist/server/lib/incremental-cache/index.js [app-rsc] (ecmascript)");
const _nodefsmethods = __turbopack_require__("[project]/node_modules/next/dist/server/lib/node-fs-methods.js [app-rsc] (ecmascript)");
const _ciinfo = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/server/ci-info.js [app-rsc] (ecmascript)"));
const _apppaths = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/app-paths.js [app-rsc] (ecmascript)");
const _denormalizeapppath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/denormalize-app-path.js [app-rsc] (ecmascript)");
const _routekind = __turbopack_require__("[project]/node_modules/next/dist/server/route-kind.js [app-rsc] (ecmascript)");
const _interopdefault = __turbopack_require__("[project]/node_modules/next/dist/lib/interop-default.js [app-rsc] (ecmascript)");
const _formatdynamicimportpath = __turbopack_require__("[project]/node_modules/next/dist/lib/format-dynamic-import-path.js [app-rsc] (ecmascript)");
const _interceptionroutes = __turbopack_require__("[project]/node_modules/next/dist/server/lib/interception-routes.js [app-rsc] (ecmascript)");
const _ppr = __turbopack_require__("[project]/node_modules/next/dist/server/lib/experimental/ppr.js [app-rsc] (ecmascript)");
const _fallback = __turbopack_require__("[project]/node_modules/next/dist/lib/fallback.js [app-rsc] (ecmascript)");
const _fallbackparams = __turbopack_require__("[project]/node_modules/next/dist/server/request/fallback-params.js [app-rsc] (ecmascript)");
const _appsegments = __turbopack_require__("[project]/node_modules/next/dist/build/segment-config/app/app-segments.js [app-rsc] (ecmascript)");
const _createincrementalcache = __turbopack_require__("[project]/node_modules/next/dist/export/helpers/create-incremental-cache.js [app-rsc] (ecmascript)");
const _runwithafter = __turbopack_require__("[project]/node_modules/next/dist/server/after/run-with-after.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Use `print()` for expected console output
const print = console.log;
const RESERVED_PAGE = /^\/(_app|_error|_document|api(\/|$))/;
const fileGzipStats = {};
const fsStatGzip = (file)=>{
    const cached = fileGzipStats[file];
    if (cached) return cached;
    return fileGzipStats[file] = _gzipsize.default.file(file);
};
const fileSize = async (file)=>(await _fs.promises.stat(file)).size;
const fileStats = {};
const fsStat = (file)=>{
    const cached = fileStats[file];
    if (cached) return cached;
    return fileStats[file] = fileSize(file);
};
function unique(main, sub) {
    return [
        ...new Set([
            ...main,
            ...sub
        ])
    ];
}
function difference(main, sub) {
    const a = new Set(main);
    const b = new Set(sub);
    return [
        ...a
    ].filter((x)=>!b.has(x));
}
/**
 * Return an array of the items shared by both arrays.
 */ function intersect(main, sub) {
    const a = new Set(main);
    const b = new Set(sub);
    return [
        ...new Set([
            ...a
        ].filter((x)=>b.has(x)))
    ];
}
function sum(a) {
    return a.reduce((size, stat)=>size + stat, 0);
}
let cachedBuildManifest;
let cachedAppBuildManifest;
let lastCompute;
let lastComputePageInfo;
async function computeFromManifest(manifests, distPath, gzipSize = true, pageInfos) {
    var _manifests_app, _files_app;
    if (Object.is(cachedBuildManifest, manifests.build) && lastComputePageInfo === !!pageInfos && Object.is(cachedAppBuildManifest, manifests.app)) {
        return lastCompute;
    }
    // Determine the files that are in pages and app and count them, this will
    // tell us if they are unique or common.
    const countBuildFiles = (map, key, manifest)=>{
        for (const file of manifest[key]){
            if (key === '/_app') {
                map.set(file, Infinity);
            } else if (map.has(file)) {
                map.set(file, map.get(file) + 1);
            } else {
                map.set(file, 1);
            }
        }
    };
    const files = {
        pages: {
            each: new Map(),
            expected: 0
        }
    };
    for(const key in manifests.build.pages){
        if (pageInfos) {
            const pageInfo = pageInfos.get(key);
            // don't include AMP pages since they don't rely on shared bundles
            // AMP First pages are not under the pageInfos key
            if (pageInfo == null ? void 0 : pageInfo.isHybridAmp) {
                continue;
            }
        }
        files.pages.expected++;
        countBuildFiles(files.pages.each, key, manifests.build.pages);
    }
    // Collect the build files form the app manifest.
    if ((_manifests_app = manifests.app) == null ? void 0 : _manifests_app.pages) {
        files.app = {
            each: new Map(),
            expected: 0
        };
        for(const key in manifests.app.pages){
            files.app.expected++;
            countBuildFiles(files.app.each, key, manifests.app.pages);
        }
    }
    const getSize = gzipSize ? fsStatGzip : fsStat;
    const stats = new Map();
    // For all of the files in the pages and app manifests, compute the file size
    // at once.
    await Promise.all([
        ...new Set([
            ...files.pages.each.keys(),
            ...((_files_app = files.app) == null ? void 0 : _files_app.each.keys()) ?? []
        ])
    ].map(async (f)=>{
        try {
            // Add the file size to the stats.
            stats.set(f, await getSize(_path.default.join(distPath, f)));
        } catch  {}
    }));
    const groupFiles = async (listing)=>{
        const entries = [
            ...listing.each.entries()
        ];
        const shapeGroup = (group)=>group.reduce((acc, [f])=>{
                acc.files.push(f);
                const size = stats.get(f);
                if (typeof size === 'number') {
                    acc.size.total += size;
                }
                return acc;
            }, {
                files: [],
                size: {
                    total: 0
                }
            });
        return {
            unique: shapeGroup(entries.filter(([, len])=>len === 1)),
            common: shapeGroup(entries.filter(([, len])=>len === listing.expected || len === Infinity))
        };
    };
    lastCompute = {
        router: {
            pages: await groupFiles(files.pages),
            app: files.app ? await groupFiles(files.app) : undefined
        },
        sizes: stats
    };
    cachedBuildManifest = manifests.build;
    cachedAppBuildManifest = manifests.app;
    lastComputePageInfo = !!pageInfos;
    return lastCompute;
}
function isMiddlewareFilename(file) {
    return file === _constants.MIDDLEWARE_FILENAME || file === `src/${_constants.MIDDLEWARE_FILENAME}`;
}
function isInstrumentationHookFilename(file) {
    return file === _constants.INSTRUMENTATION_HOOK_FILENAME || file === `src/${_constants.INSTRUMENTATION_HOOK_FILENAME}`;
}
const filterAndSortList = (list, routeType, hasCustomApp)=>{
    let pages;
    if (routeType === 'app') {
        // filter out static app route of /favicon.ico
        pages = list.filter((e)=>e !== '/favicon.ico');
    } else {
        // filter built-in pages
        pages = list.slice().filter((e)=>!(e === '/_document' || e === '/_error' || !hasCustomApp && e === '/_app'));
    }
    return pages.sort((a, b)=>a.localeCompare(b));
};
function collectRoutesUsingEdgeRuntime(input) {
    const routesUsingEdgeRuntime = {};
    for (const [route, info] of input.entries()){
        if ((0, _isedgeruntime.isEdgeRuntime)(info.runtime)) {
            routesUsingEdgeRuntime[route] = 0;
        }
    }
    return routesUsingEdgeRuntime;
}
async function printTreeView(lists, pageInfos, { distPath, buildId, pagesDir, pageExtensions, buildManifest, appBuildManifest, middlewareManifest, useStaticPages404, gzipSize = true }) {
    var _lists_app, _middlewareManifest_middleware;
    const getPrettySize = (_size)=>{
        const size = (0, _prettybytes.default)(_size);
        return (0, _picocolors.white)((0, _picocolors.bold)(size));
    };
    const MIN_DURATION = 300;
    const getPrettyDuration = (_duration)=>{
        const duration = `${_duration} ms`;
        // green for 300-1000ms
        if (_duration < 1000) return (0, _picocolors.green)(duration);
        // yellow for 1000-2000ms
        if (_duration < 2000) return (0, _picocolors.yellow)(duration);
        // red for >= 2000ms
        return (0, _picocolors.red)((0, _picocolors.bold)(duration));
    };
    const getCleanName = (fileName)=>fileName // Trim off `static/`
        .replace(/^static\//, '') // Re-add `static/` for root files
        .replace(/^<buildId>/, 'static') // Remove file hash
        .replace(/(?:^|[.-])([0-9a-z]{6})[0-9a-z]{14}(?=\.)/, '.$1');
    // Check if we have a custom app.
    const hasCustomApp = !!(pagesDir && await (0, _findpagefile.findPageFile)(pagesDir, '/_app', pageExtensions, false));
    // Collect all the symbols we use so we can print the icons out.
    const usedSymbols = new Set();
    const messages = [];
    const stats = await computeFromManifest({
        build: buildManifest,
        app: appBuildManifest
    }, distPath, gzipSize, pageInfos);
    const printFileTree = async ({ list, routerType })=>{
        var _stats_router_routerType, _stats_router_routerType1;
        const filteredPages = filterAndSortList(list, routerType, hasCustomApp);
        if (filteredPages.length === 0) {
            return;
        }
        messages.push([
            routerType === 'app' ? 'Route (app)' : 'Route (pages)',
            'Size',
            'First Load JS'
        ].map((entry)=>(0, _picocolors.underline)(entry)));
        filteredPages.forEach((item, i, arr)=>{
            var _pageInfo_ssgPageDurations, _buildManifest_pages_item, _pageInfo_ssgPageRoutes;
            const border = i === 0 ? arr.length === 1 ? '─' : '┌' : i === arr.length - 1 ? '└' : '├';
            const pageInfo = pageInfos.get(item);
            const ampFirst = buildManifest.ampFirstPages.includes(item);
            const totalDuration = ((pageInfo == null ? void 0 : pageInfo.pageDuration) || 0) + ((pageInfo == null ? void 0 : (_pageInfo_ssgPageDurations = pageInfo.ssgPageDurations) == null ? void 0 : _pageInfo_ssgPageDurations.reduce((a, b)=>a + (b || 0), 0)) || 0);
            let symbol;
            if (item === '/_app' || item === '/_app.server') {
                symbol = ' ';
            } else if ((0, _isedgeruntime.isEdgeRuntime)(pageInfo == null ? void 0 : pageInfo.runtime)) {
                symbol = 'ƒ';
            } else if (pageInfo == null ? void 0 : pageInfo.isRoutePPREnabled) {
                if ((pageInfo == null ? void 0 : pageInfo.hasEmptyPrelude) || // ensure we don't mark dynamic paths that postponed as being dynamic
                // since in this case we're able to partially prerender it
                pageInfo.isDynamicAppRoute && !pageInfo.hasPostponed) {
                    symbol = 'ƒ';
                } else if (!(pageInfo == null ? void 0 : pageInfo.hasPostponed)) {
                    symbol = '○';
                } else {
                    symbol = '◐';
                }
            } else if (pageInfo == null ? void 0 : pageInfo.isStatic) {
                symbol = '○';
            } else if (pageInfo == null ? void 0 : pageInfo.isSSG) {
                symbol = '●';
            } else {
                symbol = 'ƒ';
            }
            usedSymbols.add(symbol);
            if (pageInfo == null ? void 0 : pageInfo.initialRevalidateSeconds) usedSymbols.add('ISR');
            messages.push([
                `${border} ${symbol} ${(pageInfo == null ? void 0 : pageInfo.initialRevalidateSeconds) ? `${item} (ISR: ${pageInfo == null ? void 0 : pageInfo.initialRevalidateSeconds} Seconds)` : item}${totalDuration > MIN_DURATION ? ` (${getPrettyDuration(totalDuration)})` : ''}`,
                pageInfo ? ampFirst ? (0, _picocolors.cyan)('AMP') : pageInfo.size >= 0 ? (0, _prettybytes.default)(pageInfo.size) : '' : '',
                pageInfo ? ampFirst ? (0, _picocolors.cyan)('AMP') : pageInfo.size >= 0 ? getPrettySize(pageInfo.totalSize) : '' : ''
            ]);
            const uniqueCssFiles = ((_buildManifest_pages_item = buildManifest.pages[item]) == null ? void 0 : _buildManifest_pages_item.filter((file)=>{
                var _stats_router_routerType;
                return file.endsWith('.css') && ((_stats_router_routerType = stats.router[routerType]) == null ? void 0 : _stats_router_routerType.unique.files.includes(file));
            })) || [];
            if (uniqueCssFiles.length > 0) {
                const contSymbol = i === arr.length - 1 ? ' ' : '├';
                uniqueCssFiles.forEach((file, index, { length })=>{
                    const innerSymbol = index === length - 1 ? '└' : '├';
                    const size = stats.sizes.get(file);
                    messages.push([
                        `${contSymbol}   ${innerSymbol} ${getCleanName(file)}`,
                        typeof size === 'number' ? (0, _prettybytes.default)(size) : '',
                        ''
                    ]);
                });
            }
            if (pageInfo == null ? void 0 : (_pageInfo_ssgPageRoutes = pageInfo.ssgPageRoutes) == null ? void 0 : _pageInfo_ssgPageRoutes.length) {
                const totalRoutes = pageInfo.ssgPageRoutes.length;
                const contSymbol = i === arr.length - 1 ? ' ' : '├';
                let routes;
                if (pageInfo.ssgPageDurations && pageInfo.ssgPageDurations.some((d)=>d > MIN_DURATION)) {
                    const previewPages = totalRoutes === 8 ? 8 : Math.min(totalRoutes, 7);
                    const routesWithDuration = pageInfo.ssgPageRoutes.map((route, idx)=>({
                            route,
                            duration: pageInfo.ssgPageDurations[idx] || 0
                        })).sort(({ duration: a }, { duration: b })=>// keep too small durations in original order at the end
                        a <= MIN_DURATION && b <= MIN_DURATION ? 0 : b - a);
                    routes = routesWithDuration.slice(0, previewPages);
                    const remainingRoutes = routesWithDuration.slice(previewPages);
                    if (remainingRoutes.length) {
                        const remaining = remainingRoutes.length;
                        const avgDuration = Math.round(remainingRoutes.reduce((total, { duration })=>total + duration, 0) / remainingRoutes.length);
                        routes.push({
                            route: `[+${remaining} more paths]`,
                            duration: 0,
                            avgDuration
                        });
                    }
                } else {
                    const previewPages = totalRoutes === 4 ? 4 : Math.min(totalRoutes, 3);
                    routes = pageInfo.ssgPageRoutes.slice(0, previewPages).map((route)=>({
                            route,
                            duration: 0
                        }));
                    if (totalRoutes > previewPages) {
                        const remaining = totalRoutes - previewPages;
                        routes.push({
                            route: `[+${remaining} more paths]`,
                            duration: 0
                        });
                    }
                }
                routes.forEach(({ route, duration, avgDuration }, index, { length })=>{
                    const innerSymbol = index === length - 1 ? '└' : '├';
                    messages.push([
                        `${contSymbol}   ${innerSymbol} ${route}${duration > MIN_DURATION ? ` (${getPrettyDuration(duration)})` : ''}${avgDuration && avgDuration > MIN_DURATION ? ` (avg ${getPrettyDuration(avgDuration)})` : ''}`,
                        '',
                        ''
                    ]);
                });
            }
        });
        const sharedFilesSize = (_stats_router_routerType = stats.router[routerType]) == null ? void 0 : _stats_router_routerType.common.size.total;
        const sharedFiles = ((_stats_router_routerType1 = stats.router[routerType]) == null ? void 0 : _stats_router_routerType1.common.files) ?? [];
        messages.push([
            '+ First Load JS shared by all',
            typeof sharedFilesSize === 'number' ? getPrettySize(sharedFilesSize) : '',
            ''
        ]);
        const sharedCssFiles = [];
        const sharedJsChunks = [
            ...sharedFiles.filter((file)=>{
                if (file.endsWith('.css')) {
                    sharedCssFiles.push(file);
                    return false;
                }
                return true;
            }).map((e)=>e.replace(buildId, '<buildId>')).sort(),
            ...sharedCssFiles.map((e)=>e.replace(buildId, '<buildId>')).sort()
        ];
        // if the some chunk are less than 10kb or we don't know the size, we only show the total size of the rest
        const tenKbLimit = 10 * 1000;
        let restChunkSize = 0;
        let restChunkCount = 0;
        sharedJsChunks.forEach((fileName, index, { length })=>{
            const innerSymbol = index + restChunkCount === length - 1 ? '└' : '├';
            const originalName = fileName.replace('<buildId>', buildId);
            const cleanName = getCleanName(fileName);
            const size = stats.sizes.get(originalName);
            if (!size || size < tenKbLimit) {
                restChunkCount++;
                restChunkSize += size || 0;
                return;
            }
            messages.push([
                `  ${innerSymbol} ${cleanName}`,
                (0, _prettybytes.default)(size),
                ''
            ]);
        });
        if (restChunkCount > 0) {
            messages.push([
                `  └ other shared chunks (total)`,
                (0, _prettybytes.default)(restChunkSize),
                ''
            ]);
        }
    };
    // If enabled, then print the tree for the app directory.
    if (lists.app && stats.router.app) {
        await printFileTree({
            routerType: 'app',
            list: lists.app
        });
        messages.push([
            '',
            '',
            ''
        ]);
    }
    pageInfos.set('/404', {
        ...pageInfos.get('/404') || pageInfos.get('/_error'),
        isStatic: useStaticPages404
    });
    // If there's no app /_notFound page present, then the 404 is still using the pages/404
    if (!lists.pages.includes('/404') && !((_lists_app = lists.app) == null ? void 0 : _lists_app.includes(_constants1.UNDERSCORE_NOT_FOUND_ROUTE))) {
        lists.pages = [
            ...lists.pages,
            '/404'
        ];
    }
    // Print the tree view for the pages directory.
    await printFileTree({
        routerType: 'pages',
        list: lists.pages
    });
    const middlewareInfo = (_middlewareManifest_middleware = middlewareManifest.middleware) == null ? void 0 : _middlewareManifest_middleware['/'];
    if ((middlewareInfo == null ? void 0 : middlewareInfo.files.length) > 0) {
        const middlewareSizes = await Promise.all(middlewareInfo.files.map((dep)=>`${distPath}/${dep}`).map(gzipSize ? fsStatGzip : fsStat));
        messages.push([
            '',
            '',
            ''
        ]);
        messages.push([
            'ƒ Middleware',
            getPrettySize(sum(middlewareSizes)),
            ''
        ]);
    }
    print((0, _texttable.default)(messages, {
        align: [
            'l',
            'l',
            'r'
        ],
        stringLength: (str)=>(0, _stripansi.default)(str).length
    }));
    const staticFunctionInfo = lists.app && stats.router.app ? 'generateStaticParams' : 'getStaticProps';
    print();
    print((0, _texttable.default)([
        usedSymbols.has('○') && [
            '○',
            '(Static)',
            'prerendered as static content'
        ],
        usedSymbols.has('●') && [
            '●',
            '(SSG)',
            `prerendered as static HTML (uses ${(0, _picocolors.cyan)(staticFunctionInfo)})`
        ],
        usedSymbols.has('ISR') && [
            '',
            '(ISR)',
            `incremental static regeneration (uses revalidate in ${(0, _picocolors.cyan)(staticFunctionInfo)})`
        ],
        usedSymbols.has('◐') && [
            '◐',
            '(Partial Prerender)',
            'prerendered as static HTML with dynamic server-streamed content'
        ],
        usedSymbols.has('ƒ') && [
            'ƒ',
            '(Dynamic)',
            `server-rendered on demand`
        ]
    ].filter((x)=>x), {
        align: [
            'l',
            'l',
            'l'
        ],
        stringLength: (str)=>(0, _stripansi.default)(str).length
    }));
    print();
}
function printCustomRoutes({ redirects, rewrites, headers }) {
    const printRoutes = (routes, type)=>{
        const isRedirects = type === 'Redirects';
        const isHeaders = type === 'Headers';
        print((0, _picocolors.underline)(type));
        /*
        ┌ source
        ├ permanent/statusCode
        └ destination
     */ const routesStr = routes.map((route)=>{
            let routeStr = `┌ source: ${route.source}\n`;
            if (!isHeaders) {
                const r = route;
                routeStr += `${isRedirects ? '├' : '└'} destination: ${r.destination}\n`;
            }
            if (isRedirects) {
                const r = route;
                routeStr += `└ ${r.statusCode ? `status: ${r.statusCode}` : `permanent: ${r.permanent}`}\n`;
            }
            if (isHeaders) {
                const r = route;
                routeStr += `└ headers:\n`;
                for(let i = 0; i < r.headers.length; i++){
                    const header = r.headers[i];
                    const last = i === headers.length - 1;
                    routeStr += `  ${last ? '└' : '├'} ${header.key}: ${header.value}\n`;
                }
            }
            return routeStr;
        }).join('\n');
        print(`${routesStr}\n`);
    };
    print();
    if (redirects.length) {
        printRoutes(redirects, 'Redirects');
    }
    if (headers.length) {
        printRoutes(headers, 'Headers');
    }
    const combinedRewrites = [
        ...rewrites.beforeFiles,
        ...rewrites.afterFiles,
        ...rewrites.fallback
    ];
    if (combinedRewrites.length) {
        printRoutes(combinedRewrites, 'Rewrites');
    }
}
async function getJsPageSizeInKb(routerType, page, distPath, buildManifest, appBuildManifest, gzipSize = true, cachedStats) {
    const pageManifest = routerType === 'pages' ? buildManifest : appBuildManifest;
    if (!pageManifest) {
        throw new Error('expected appBuildManifest with an "app" pageType');
    }
    // Normalize appBuildManifest keys
    if (routerType === 'app') {
        pageManifest.pages = Object.entries(pageManifest.pages).reduce((acc, [key, value])=>{
            const newKey = (0, _apppaths.normalizeAppPath)(key);
            acc[newKey] = value;
            return acc;
        }, {});
    }
    // If stats was not provided, then compute it again.
    const stats = cachedStats ?? await computeFromManifest({
        build: buildManifest,
        app: appBuildManifest
    }, distPath, gzipSize);
    const pageData = stats.router[routerType];
    if (!pageData) {
        // This error shouldn't happen and represents an error in Next.js.
        throw new Error('expected "app" manifest data with an "app" pageType');
    }
    const pagePath = routerType === 'pages' ? (0, _denormalizepagepath.denormalizePagePath)(page) : (0, _denormalizeapppath.denormalizeAppPagePath)(page);
    const fnFilterJs = (entry)=>entry.endsWith('.js');
    const pageFiles = (pageManifest.pages[pagePath] ?? []).filter(fnFilterJs);
    const appFiles = (pageManifest.pages['/_app'] ?? []).filter(fnFilterJs);
    const fnMapRealPath = (dep)=>`${distPath}/${dep}`;
    const allFilesReal = unique(pageFiles, appFiles).map(fnMapRealPath);
    const selfFilesReal = difference(intersect(pageFiles, pageData.unique.files), pageData.common.files).map(fnMapRealPath);
    const getSize = gzipSize ? fsStatGzip : fsStat;
    // Try to get the file size from the page data if available, otherwise do a
    // raw compute.
    const getCachedSize = async (file)=>{
        const key = file.slice(distPath.length + 1);
        const size = stats.sizes.get(key);
        // If the size wasn't in the stats bundle, then get it from the file
        // directly.
        if (typeof size !== 'number') {
            return getSize(file);
        }
        return size;
    };
    try {
        // Doesn't use `Promise.all`, as we'd double compute duplicate files. This
        // function is memoized, so the second one will instantly resolve.
        const allFilesSize = sum(await Promise.all(allFilesReal.map(getCachedSize)));
        const selfFilesSize = sum(await Promise.all(selfFilesReal.map(getCachedSize)));
        return [
            selfFilesSize,
            allFilesSize
        ];
    } catch  {}
    return [
        -1,
        -1
    ];
}
async function buildStaticPaths({ page, getStaticPaths, staticPathsResult, configFileName, locales, defaultLocale, appDir }) {
    const prerenderedRoutes = [];
    const _routeRegex = (0, _routeregex.getRouteRegex)(page);
    const _routeMatcher = (0, _routematcher.getRouteMatcher)(_routeRegex);
    // Get the default list of allowed params.
    const routeParameterKeys = Object.keys(_routeMatcher(page));
    if (!staticPathsResult) {
        if (getStaticPaths) {
            staticPathsResult = await getStaticPaths({
                locales,
                defaultLocale
            });
        } else {
            throw new Error(`invariant: attempted to buildStaticPaths without "staticPathsResult" or "getStaticPaths" ${page}`);
        }
    }
    const expectedReturnVal = `Expected: { paths: [], fallback: boolean }\n` + `See here for more info: https://nextjs.org/docs/messages/invalid-getstaticpaths-value`;
    if (!staticPathsResult || typeof staticPathsResult !== 'object' || Array.isArray(staticPathsResult)) {
        throw new Error(`Invalid value returned from getStaticPaths in ${page}. Received ${typeof staticPathsResult} ${expectedReturnVal}`);
    }
    const invalidStaticPathKeys = Object.keys(staticPathsResult).filter((key)=>!(key === 'paths' || key === 'fallback'));
    if (invalidStaticPathKeys.length > 0) {
        throw new Error(`Extra keys returned from getStaticPaths in ${page} (${invalidStaticPathKeys.join(', ')}) ${expectedReturnVal}`);
    }
    if (!(typeof staticPathsResult.fallback === 'boolean' || staticPathsResult.fallback === 'blocking')) {
        throw new Error(`The \`fallback\` key must be returned from getStaticPaths in ${page}.\n` + expectedReturnVal);
    }
    const toPrerender = staticPathsResult.paths;
    if (!Array.isArray(toPrerender)) {
        throw new Error(`Invalid \`paths\` value returned from getStaticPaths in ${page}.\n` + `\`paths\` must be an array of strings or objects of shape { params: [key: string]: string }`);
    }
    toPrerender.forEach((entry)=>{
        // For a string-provided path, we must make sure it matches the dynamic
        // route.
        if (typeof entry === 'string') {
            entry = (0, _removetrailingslash.removeTrailingSlash)(entry);
            const localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(entry, locales);
            let cleanedEntry = entry;
            if (localePathResult.detectedLocale) {
                cleanedEntry = entry.slice(localePathResult.detectedLocale.length + 1);
            } else if (defaultLocale) {
                entry = `/${defaultLocale}${entry}`;
            }
            const result = _routeMatcher(cleanedEntry);
            if (!result) {
                throw new Error(`The provided path \`${cleanedEntry}\` does not match the page: \`${page}\`.`);
            }
            // If leveraging the string paths variant the entry should already be
            // encoded so we decode the segments ensuring we only escape path
            // delimiters
            prerenderedRoutes.push({
                path: entry.split('/').map((segment)=>(0, _escapepathdelimiters.default)(decodeURIComponent(segment), true)).join('/'),
                encoded: entry,
                fallbackRouteParams: undefined
            });
        } else {
            const invalidKeys = Object.keys(entry).filter((key)=>key !== 'params' && key !== 'locale');
            if (invalidKeys.length) {
                throw new Error(`Additional keys were returned from \`getStaticPaths\` in page "${page}". ` + `URL Parameters intended for this dynamic route must be nested under the \`params\` key, i.e.:` + `\n\n\treturn { params: { ${routeParameterKeys.map((k)=>`${k}: ...`).join(', ')} } }` + `\n\nKeys that need to be moved: ${invalidKeys.join(', ')}.\n`);
            }
            const { params = {} } = entry;
            let builtPage = page;
            let encodedBuiltPage = page;
            routeParameterKeys.forEach((validParamKey)=>{
                const { repeat, optional } = _routeRegex.groups[validParamKey];
                let paramValue = params[validParamKey];
                if (optional && params.hasOwnProperty(validParamKey) && (paramValue === null || paramValue === undefined || paramValue === false)) {
                    paramValue = [];
                }
                if (repeat && !Array.isArray(paramValue) || !repeat && typeof paramValue !== 'string') {
                    // If this is from app directory, and not all params were provided,
                    // then filter this out.
                    if (appDir && typeof paramValue === 'undefined') {
                        builtPage = '';
                        encodedBuiltPage = '';
                        return;
                    }
                    throw new Error(`A required parameter (${validParamKey}) was not provided as ${repeat ? 'an array' : 'a string'} received ${typeof paramValue} in ${appDir ? 'generateStaticParams' : 'getStaticPaths'} for ${page}`);
                }
                let replaced = `[${repeat ? '...' : ''}${validParamKey}]`;
                if (optional) {
                    replaced = `[${replaced}]`;
                }
                builtPage = builtPage.replace(replaced, repeat ? paramValue.map((segment)=>(0, _escapepathdelimiters.default)(segment, true)).join('/') : (0, _escapepathdelimiters.default)(paramValue, true)).replace(/\\/g, '/').replace(/(?!^)\/$/, '');
                encodedBuiltPage = encodedBuiltPage.replace(replaced, repeat ? paramValue.map(encodeURIComponent).join('/') : encodeURIComponent(paramValue)).replace(/\\/g, '/').replace(/(?!^)\/$/, '');
            });
            if (!builtPage && !encodedBuiltPage) {
                return;
            }
            if (entry.locale && !(locales == null ? void 0 : locales.includes(entry.locale))) {
                throw new Error(`Invalid locale returned from getStaticPaths for ${page}, the locale ${entry.locale} is not specified in ${configFileName}`);
            }
            const curLocale = entry.locale || defaultLocale || '';
            prerenderedRoutes.push({
                path: `${curLocale ? `/${curLocale}` : ''}${curLocale && builtPage === '/' ? '' : builtPage}`,
                encoded: `${curLocale ? `/${curLocale}` : ''}${curLocale && encodedBuiltPage === '/' ? '' : encodedBuiltPage}`,
                fallbackRouteParams: undefined
            });
        }
    });
    const seen = new Set();
    return {
        fallbackMode: (0, _fallback.parseStaticPathsResult)(staticPathsResult.fallback),
        prerenderedRoutes: prerenderedRoutes.filter((route)=>{
            if (seen.has(route.path)) return false;
            // Filter out duplicate paths.
            seen.add(route.path);
            return true;
        })
    };
}
async function buildAppStaticPaths({ dir, page, distDir, dynamicIO, authInterrupts, configFileName, segments, isrFlushToDisk, cacheHandler, cacheLifeProfiles, requestHeaders, maxMemoryCacheSize, fetchCacheKeyPrefix, nextConfigOutput, ComponentMod, isRoutePPREnabled, buildId }) {
    if (segments.some((generate)=>{
        var _generate_config;
        return ((_generate_config = generate.config) == null ? void 0 : _generate_config.dynamicParams) === true;
    }) && nextConfigOutput === 'export') {
        throw new Error('"dynamicParams: true" cannot be used with "output: export". See more info here: https://nextjs.org/docs/app/building-your-application/deploying/static-exports');
    }
    ComponentMod.patchFetch();
    let CurCacheHandler;
    if (cacheHandler) {
        CurCacheHandler = (0, _interopdefault.interopDefault)(await Promise.resolve().then(()=>{
            const e = new Error("Cannot find module as expression is too dynamic");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        }).then((mod)=>mod.default || mod));
    }
    const incrementalCache = new _incrementalcache.IncrementalCache({
        fs: _nodefsmethods.nodeFs,
        dev: true,
        dynamicIO,
        flushToDisk: isrFlushToDisk,
        serverDistDir: _path.default.join(distDir, 'server'),
        fetchCacheKeyPrefix,
        maxMemoryCacheSize,
        getPrerenderManifest: ()=>({
                version: -1,
                routes: {},
                dynamicRoutes: {},
                notFoundRoutes: [],
                preview: null
            }),
        CurCacheHandler,
        requestHeaders,
        minimalMode: _ciinfo.hasNextSupport
    });
    const paramKeys = new Set();
    const staticParamKeys = new Set();
    for (const segment of segments){
        if (segment.param) {
            var _segment_config;
            paramKeys.add(segment.param);
            if (((_segment_config = segment.config) == null ? void 0 : _segment_config.dynamicParams) === false) {
                staticParamKeys.add(segment.param);
            }
        }
    }
    const afterRunner = new _runwithafter.AfterRunner();
    const store = (0, _workstore.createWorkStore)({
        page,
        // We're discovering the parameters here, so we don't have any unknown
        // ones.
        fallbackRouteParams: null,
        renderOpts: {
            incrementalCache,
            cacheLifeProfiles,
            supportsDynamicResponse: true,
            isRevalidate: false,
            experimental: {
                dynamicIO,
                authInterrupts
            },
            waitUntil: afterRunner.context.waitUntil,
            onClose: afterRunner.context.onClose,
            onAfterTaskError: afterRunner.context.onTaskError,
            buildId
        }
    });
    const routeParams = await ComponentMod.workAsyncStorage.run(store, async ()=>{
        async function builtRouteParams(parentsParams = [], idx = 0) {
            // If we don't have any more to process, then we're done.
            if (idx === segments.length) return parentsParams;
            const current = segments[idx];
            if (typeof current.generateStaticParams !== 'function' && idx < segments.length) {
                return builtRouteParams(parentsParams, idx + 1);
            }
            const params = [];
            if (current.generateStaticParams) {
                var _current_config;
                // fetchCache can be used to inform the fetch() defaults used inside
                // of generateStaticParams. revalidate and dynamic options don't come into
                // play within generateStaticParams.
                if (typeof ((_current_config = current.config) == null ? void 0 : _current_config.fetchCache) !== 'undefined') {
                    store.fetchCache = current.config.fetchCache;
                }
                if (parentsParams.length > 0) {
                    for (const parentParams of parentsParams){
                        const result = await current.generateStaticParams({
                            params: parentParams
                        });
                        for (const item of result){
                            params.push({
                                ...parentParams,
                                ...item
                            });
                        }
                    }
                } else {
                    const result = await current.generateStaticParams({
                        params: {}
                    });
                    params.push(...result);
                }
            }
            if (idx < segments.length) {
                return builtRouteParams(params, idx + 1);
            }
            return params;
        }
        return builtRouteParams();
    });
    let lastDynamicSegmentHadGenerateStaticParams = false;
    for (const segment of segments){
        var _segment_config1;
        // Check to see if there are any missing params for segments that have
        // dynamicParams set to false.
        if (segment.param && segment.isDynamicSegment && ((_segment_config1 = segment.config) == null ? void 0 : _segment_config1.dynamicParams) === false) {
            for (const params of routeParams){
                if (segment.param in params) continue;
                const relative = segment.filePath ? _path.default.relative(dir, segment.filePath) : undefined;
                throw new Error(`Segment "${relative}" exports "dynamicParams: false" but the param "${segment.param}" is missing from the generated route params.`);
            }
        }
        if (segment.isDynamicSegment && typeof segment.generateStaticParams !== 'function') {
            lastDynamicSegmentHadGenerateStaticParams = false;
        } else if (typeof segment.generateStaticParams === 'function') {
            lastDynamicSegmentHadGenerateStaticParams = true;
        }
    }
    // Determine if all the segments have had their parameters provided. If there
    // was no dynamic parameters, then we've collected all the params.
    const hadAllParamsGenerated = paramKeys.size === 0 || routeParams.length > 0 && routeParams.every((params)=>{
        for (const key of paramKeys){
            if (key in params) continue;
            return false;
        }
        return true;
    });
    // TODO: dynamic params should be allowed to be granular per segment but
    // we need additional information stored/leveraged in the prerender
    // manifest to allow this behavior.
    const dynamicParams = segments.every((segment)=>{
        var _segment_config;
        return ((_segment_config = segment.config) == null ? void 0 : _segment_config.dynamicParams) !== false;
    });
    const supportsRoutePreGeneration = hadAllParamsGenerated || ("TURBOPACK compile-time value", "development") === 'production';
    const fallbackMode = dynamicParams ? supportsRoutePreGeneration ? isRoutePPREnabled ? _fallback.FallbackMode.PRERENDER : _fallback.FallbackMode.BLOCKING_STATIC_RENDER : undefined : _fallback.FallbackMode.NOT_FOUND;
    let result = {
        fallbackMode,
        prerenderedRoutes: lastDynamicSegmentHadGenerateStaticParams ? [] : undefined
    };
    if (hadAllParamsGenerated && fallbackMode) {
        result = await buildStaticPaths({
            staticPathsResult: {
                fallback: (0, _fallback.fallbackModeToStaticPathsResult)(fallbackMode),
                paths: routeParams.map((params)=>({
                        params
                    }))
            },
            page,
            configFileName,
            appDir: true
        });
    }
    // If the fallback mode is a prerender, we want to include the dynamic
    // route in the prerendered routes too.
    if (isRoutePPREnabled) {
        result.prerenderedRoutes ??= [];
        result.prerenderedRoutes.unshift({
            path: page,
            encoded: page,
            fallbackRouteParams: (0, _fallbackparams.getParamKeys)(page)
        });
    }
    await afterRunner.executeAfter();
    return result;
}
async function isPageStatic({ dir, page, distDir, configFileName, runtimeEnvConfig, httpAgentOptions, locales, defaultLocale, parentId, pageRuntime, edgeInfo, pageType, dynamicIO, authInterrupts, originalAppPath, isrFlushToDisk, maxMemoryCacheSize, nextConfigOutput, cacheHandler, cacheHandlers, cacheLifeProfiles, pprConfig, buildId }) {
    await (0, _createincrementalcache.createIncrementalCache)({
        cacheHandler,
        cacheHandlers,
        distDir,
        dir,
        dynamicIO,
        flushToDisk: isrFlushToDisk,
        cacheMaxMemorySize: maxMemoryCacheSize
    });
    const isPageStaticSpan = (0, _trace.trace)('is-page-static-utils', parentId);
    return isPageStaticSpan.traceAsyncFn(async ()=>{
        __turbopack_require__("[externals]/next/dist/shared/lib/runtime-config.external.js [external] (next/dist/shared/lib/runtime-config.external.js, cjs)").setConfig(runtimeEnvConfig);
        (0, _setuphttpagentenv.setHttpClientAndAgentOptions)({
            httpAgentOptions
        });
        let componentsResult;
        let prerenderedRoutes;
        let prerenderFallbackMode;
        let appConfig = {};
        let isClientComponent = false;
        const pathIsEdgeRuntime = (0, _isedgeruntime.isEdgeRuntime)(pageRuntime);
        if (pathIsEdgeRuntime) {
            const runtime = await (0, _sandbox.getRuntimeContext)({
                paths: edgeInfo.files.map((file)=>_path.default.join(distDir, file)),
                edgeFunctionEntry: {
                    ...edgeInfo,
                    wasm: (edgeInfo.wasm ?? []).map((binding)=>({
                            ...binding,
                            filePath: _path.default.join(distDir, binding.filePath)
                        }))
                },
                name: edgeInfo.name,
                useCache: true,
                distDir
            });
            const mod = (await runtime.context._ENTRIES[`middleware_${edgeInfo.name}`]).ComponentMod;
            // This is not needed during require.
            const buildManifest = {};
            isClientComponent = (0, _clientreference.isClientReference)(mod);
            componentsResult = {
                Component: mod.default,
                Document: mod.Document,
                App: mod.App,
                routeModule: mod.routeModule,
                page,
                ComponentMod: mod,
                pageConfig: mod.config || {},
                buildManifest,
                reactLoadableManifest: {},
                getServerSideProps: mod.getServerSideProps,
                getStaticPaths: mod.getStaticPaths,
                getStaticProps: mod.getStaticProps
            };
        } else {
            componentsResult = await (0, _loadcomponents.loadComponents)({
                distDir,
                page: originalAppPath || page,
                isAppPath: pageType === 'app',
                isDev: false
            });
        }
        const Comp = componentsResult.Component;
        let staticPathsResult;
        const routeModule = componentsResult.routeModule;
        let isRoutePPREnabled = false;
        if (pageType === 'app') {
            const ComponentMod = componentsResult.ComponentMod;
            isClientComponent = (0, _clientreference.isClientReference)(componentsResult.ComponentMod);
            let segments;
            try {
                segments = await (0, _appsegments.collectSegments)(componentsResult);
            } catch (err) {
                throw new Error(`Failed to collect configuration for ${page}`, {
                    cause: err
                });
            }
            appConfig = reduceAppConfig(await (0, _appsegments.collectSegments)(componentsResult));
            if (appConfig.dynamic === 'force-static' && pathIsEdgeRuntime) {
                _log.warn(`Page "${page}" is using runtime = 'edge' which is currently incompatible with dynamic = 'force-static'. Please remove either "runtime" or "force-static" for correct behavior`);
            }
            // A page supports partial prerendering if it is an app page and either
            // the whole app has PPR enabled or this page has PPR enabled when we're
            // in incremental mode.
            isRoutePPREnabled = routeModule.definition.kind === _routekind.RouteKind.APP_PAGE && !(0, _interceptionroutes.isInterceptionRouteAppPath)(page) && (0, _ppr.checkIsRoutePPREnabled)(pprConfig, appConfig);
            // If force dynamic was set and we don't have PPR enabled, then set the
            // revalidate to 0.
            // TODO: (PPR) remove this once PPR is enabled by default
            if (appConfig.dynamic === 'force-dynamic' && !isRoutePPREnabled) {
                appConfig.revalidate = 0;
            }
            if ((0, _isdynamic.isDynamicRoute)(page)) {
                ;
                ({ fallbackMode: prerenderFallbackMode, prerenderedRoutes } = await buildAppStaticPaths({
                    dir,
                    page,
                    dynamicIO,
                    authInterrupts,
                    configFileName,
                    segments,
                    distDir,
                    requestHeaders: {},
                    isrFlushToDisk,
                    maxMemoryCacheSize,
                    cacheHandler,
                    cacheLifeProfiles,
                    ComponentMod,
                    nextConfigOutput,
                    isRoutePPREnabled,
                    buildId
                }));
            }
        } else {
            if (!Comp || !(0, _reactis.isValidElementType)(Comp) || typeof Comp === 'string') {
                throw new Error('INVALID_DEFAULT_EXPORT');
            }
        }
        const hasGetInitialProps = !!(Comp == null ? void 0 : Comp.getInitialProps);
        const hasStaticProps = !!componentsResult.getStaticProps;
        const hasStaticPaths = !!componentsResult.getStaticPaths;
        const hasServerProps = !!componentsResult.getServerSideProps;
        // A page cannot be prerendered _and_ define a data requirement. That's
        // contradictory!
        if (hasGetInitialProps && hasStaticProps) {
            throw new Error(_constants.SSG_GET_INITIAL_PROPS_CONFLICT);
        }
        if (hasGetInitialProps && hasServerProps) {
            throw new Error(_constants.SERVER_PROPS_GET_INIT_PROPS_CONFLICT);
        }
        if (hasStaticProps && hasServerProps) {
            throw new Error(_constants.SERVER_PROPS_SSG_CONFLICT);
        }
        const pageIsDynamic = (0, _isdynamic.isDynamicRoute)(page);
        // A page cannot have static parameters if it is not a dynamic page.
        if (hasStaticProps && hasStaticPaths && !pageIsDynamic) {
            throw new Error(`getStaticPaths can only be used with dynamic pages, not '${page}'.` + `\nLearn more: https://nextjs.org/docs/routing/dynamic-routes`);
        }
        if (hasStaticProps && pageIsDynamic && !hasStaticPaths) {
            throw new Error(`getStaticPaths is required for dynamic SSG pages and is missing for '${page}'.` + `\nRead more: https://nextjs.org/docs/messages/invalid-getstaticpaths-value`);
        }
        if (hasStaticProps && hasStaticPaths || staticPathsResult) {
            ;
            ({ fallbackMode: prerenderFallbackMode, prerenderedRoutes } = await buildStaticPaths({
                page,
                locales,
                defaultLocale,
                configFileName,
                staticPathsResult,
                getStaticPaths: componentsResult.getStaticPaths
            }));
        }
        const isNextImageImported = globalThis.__NEXT_IMAGE_IMPORTED;
        const config = isClientComponent ? {} : componentsResult.pageConfig;
        let isStatic = false;
        if (!hasStaticProps && !hasGetInitialProps && !hasServerProps) {
            isStatic = true;
        }
        // When PPR is enabled, any route may be completely static, so
        // mark this route as static.
        if (isRoutePPREnabled) {
            isStatic = true;
        }
        return {
            isStatic,
            isRoutePPREnabled,
            isHybridAmp: config.amp === 'hybrid',
            isAmpOnly: config.amp === true,
            prerenderFallbackMode,
            prerenderedRoutes,
            hasStaticProps,
            hasServerProps,
            isNextImageImported,
            appConfig
        };
    }).catch((err)=>{
        if (err.message === 'INVALID_DEFAULT_EXPORT') {
            throw err;
        }
        console.error(err);
        throw new Error(`Failed to collect page data for ${page}`);
    });
}
function reduceAppConfig(segments) {
    const config = {};
    for (const segment of segments){
        const { dynamic, fetchCache, preferredRegion, revalidate, experimental_ppr, runtime, maxDuration } = segment.config || {};
        // TODO: should conflicting configs here throw an error
        // e.g. if layout defines one region but page defines another
        if (typeof preferredRegion !== 'undefined') {
            config.preferredRegion = preferredRegion;
        }
        if (typeof dynamic !== 'undefined') {
            config.dynamic = dynamic;
        }
        if (typeof fetchCache !== 'undefined') {
            config.fetchCache = fetchCache;
        }
        if (typeof revalidate !== 'undefined') {
            config.revalidate = revalidate;
        }
        // Any revalidate number overrides false, and shorter revalidate overrides
        // longer (initially).
        if (typeof revalidate === 'number' && (typeof config.revalidate !== 'number' || revalidate < config.revalidate)) {
            config.revalidate = revalidate;
        }
        // If partial prerendering has been set, only override it if the current
        // value is provided as it's resolved from root layout to leaf page.
        if (typeof experimental_ppr !== 'undefined') {
            config.experimental_ppr = experimental_ppr;
        }
        if (typeof runtime !== 'undefined') {
            config.runtime = runtime;
        }
        if (typeof maxDuration !== 'undefined') {
            config.maxDuration = maxDuration;
        }
    }
    return config;
}
async function hasCustomGetInitialProps({ page, distDir, runtimeEnvConfig, checkingApp }) {
    __turbopack_require__("[externals]/next/dist/shared/lib/runtime-config.external.js [external] (next/dist/shared/lib/runtime-config.external.js, cjs)").setConfig(runtimeEnvConfig);
    const components = await (0, _loadcomponents.loadComponents)({
        distDir,
        page: page,
        isAppPath: false,
        isDev: false
    });
    let mod = components.ComponentMod;
    if (checkingApp) {
        mod = await mod._app || mod.default || mod;
    } else {
        mod = mod.default || mod;
    }
    mod = await mod;
    return mod.getInitialProps !== mod.origGetInitialProps;
}
async function getDefinedNamedExports({ page, distDir, runtimeEnvConfig }) {
    __turbopack_require__("[externals]/next/dist/shared/lib/runtime-config.external.js [external] (next/dist/shared/lib/runtime-config.external.js, cjs)").setConfig(runtimeEnvConfig);
    const components = await (0, _loadcomponents.loadComponents)({
        distDir,
        page: page,
        isAppPath: false,
        isDev: false
    });
    return Object.keys(components.ComponentMod).filter((key)=>{
        return typeof components.ComponentMod[key] !== 'undefined';
    });
}
function detectConflictingPaths(combinedPages, ssgPages, additionalGeneratedSSGPaths) {
    const conflictingPaths = new Map();
    const dynamicSsgPages = [
        ...ssgPages
    ].filter((page)=>(0, _isdynamic.isDynamicRoute)(page));
    const additionalSsgPathsByPath = {};
    additionalGeneratedSSGPaths.forEach((paths, pathsPage)=>{
        additionalSsgPathsByPath[pathsPage] ||= {};
        paths.forEach((curPath)=>{
            const currentPath = curPath.toLowerCase();
            additionalSsgPathsByPath[pathsPage][currentPath] = curPath;
        });
    });
    additionalGeneratedSSGPaths.forEach((paths, pathsPage)=>{
        paths.forEach((curPath)=>{
            const lowerPath = curPath.toLowerCase();
            let conflictingPage = combinedPages.find((page)=>page.toLowerCase() === lowerPath);
            if (conflictingPage) {
                conflictingPaths.set(lowerPath, [
                    {
                        path: curPath,
                        page: pathsPage
                    },
                    {
                        path: conflictingPage,
                        page: conflictingPage
                    }
                ]);
            } else {
                let conflictingPath;
                conflictingPage = dynamicSsgPages.find((page)=>{
                    if (page === pathsPage) return false;
                    conflictingPath = additionalGeneratedSSGPaths.get(page) == null ? undefined : additionalSsgPathsByPath[page][lowerPath];
                    return conflictingPath;
                });
                if (conflictingPage && conflictingPath) {
                    conflictingPaths.set(lowerPath, [
                        {
                            path: curPath,
                            page: pathsPage
                        },
                        {
                            path: conflictingPath,
                            page: conflictingPage
                        }
                    ]);
                }
            }
        });
    });
    if (conflictingPaths.size > 0) {
        let conflictingPathsOutput = '';
        conflictingPaths.forEach((pathItems)=>{
            pathItems.forEach((pathItem, idx)=>{
                const isDynamic = pathItem.page !== pathItem.path;
                if (idx > 0) {
                    conflictingPathsOutput += 'conflicts with ';
                }
                conflictingPathsOutput += `path: "${pathItem.path}"${isDynamic ? ` from page: "${pathItem.page}" ` : ' '}`;
            });
            conflictingPathsOutput += '\n';
        });
        _log.error('Conflicting paths returned from getStaticPaths, paths must be unique per page.\n' + 'See more info here: https://nextjs.org/docs/messages/conflicting-ssg-paths\n\n' + conflictingPathsOutput);
        process.exit(1);
    }
}
async function copyTracedFiles(dir, distDir, pageKeys, appPageKeys, tracingRoot, serverConfig, middlewareManifest, hasInstrumentationHook, staticPages) {
    const outputPath = _path.default.join(distDir, 'standalone');
    let moduleType = false;
    const nextConfig = {
        ...serverConfig,
        distDir: `./${_path.default.relative(dir, distDir)}`
    };
    try {
        const packageJsonPath = _path.default.join(distDir, '../package.json');
        const packageJson = JSON.parse(await _fs.promises.readFile(packageJsonPath, 'utf8'));
        moduleType = packageJson.type === 'module';
    } catch  {}
    const copiedFiles = new Set();
    await _fs.promises.rm(outputPath, {
        recursive: true,
        force: true
    });
    async function handleTraceFiles(traceFilePath) {
        const traceData = JSON.parse(await _fs.promises.readFile(traceFilePath, 'utf8'));
        const copySema = new _asyncsema.Sema(10, {
            capacity: traceData.files.length
        });
        const traceFileDir = _path.default.dirname(traceFilePath);
        await Promise.all(traceData.files.map(async (relativeFile)=>{
            await copySema.acquire();
            const tracedFilePath = _path.default.join(traceFileDir, relativeFile);
            const fileOutputPath = _path.default.join(outputPath, _path.default.relative(tracingRoot, tracedFilePath));
            if (!copiedFiles.has(fileOutputPath)) {
                copiedFiles.add(fileOutputPath);
                await _fs.promises.mkdir(_path.default.dirname(fileOutputPath), {
                    recursive: true
                });
                const symlink = await _fs.promises.readlink(tracedFilePath).catch(()=>null);
                if (symlink) {
                    try {
                        await _fs.promises.symlink(symlink, fileOutputPath);
                    } catch (e) {
                        if (e.code !== 'EEXIST') {
                            throw e;
                        }
                    }
                } else {
                    await _fs.promises.copyFile(tracedFilePath, fileOutputPath);
                }
            }
            await copySema.release();
        }));
    }
    async function handleEdgeFunction(page) {
        var _page_wasm, _page_assets;
        async function handleFile(file) {
            const originalPath = _path.default.join(distDir, file);
            const fileOutputPath = _path.default.join(outputPath, _path.default.relative(tracingRoot, distDir), file);
            await _fs.promises.mkdir(_path.default.dirname(fileOutputPath), {
                recursive: true
            });
            await _fs.promises.copyFile(originalPath, fileOutputPath);
        }
        await Promise.all([
            page.files.map(handleFile),
            (_page_wasm = page.wasm) == null ? void 0 : _page_wasm.map((file)=>handleFile(file.filePath)),
            (_page_assets = page.assets) == null ? void 0 : _page_assets.map((file)=>handleFile(file.filePath))
        ]);
    }
    const edgeFunctionHandlers = [];
    for (const middleware of Object.values(middlewareManifest.middleware)){
        if (isMiddlewareFilename(middleware.name)) {
            edgeFunctionHandlers.push(handleEdgeFunction(middleware));
        }
    }
    for (const page of Object.values(middlewareManifest.functions)){
        edgeFunctionHandlers.push(handleEdgeFunction(page));
    }
    await Promise.all(edgeFunctionHandlers);
    for (const page of pageKeys){
        if (middlewareManifest.functions.hasOwnProperty(page)) {
            continue;
        }
        const route = (0, _normalizepagepath.normalizePagePath)(page);
        if (staticPages.has(route)) {
            continue;
        }
        const pageFile = _path.default.join(distDir, 'server', 'pages', `${(0, _normalizepagepath.normalizePagePath)(page)}.js`);
        const pageTraceFile = `${pageFile}.nft.json`;
        await handleTraceFiles(pageTraceFile).catch((err)=>{
            if (err.code !== 'ENOENT' || page !== '/404' && page !== '/500') {
                _log.warn(`Failed to copy traced files for ${pageFile}`, err);
            }
        });
    }
    if (appPageKeys) {
        for (const page of appPageKeys){
            if (middlewareManifest.functions.hasOwnProperty(page)) {
                continue;
            }
            const pageFile = _path.default.join(distDir, 'server', 'app', `${page}.js`);
            const pageTraceFile = `${pageFile}.nft.json`;
            await handleTraceFiles(pageTraceFile).catch((err)=>{
                _log.warn(`Failed to copy traced files for ${pageFile}`, err);
            });
        }
    }
    if (hasInstrumentationHook) {
        await handleTraceFiles(_path.default.join(distDir, 'server', 'instrumentation.js.nft.json'));
    }
    await handleTraceFiles(_path.default.join(distDir, 'next-server.js.nft.json'));
    const serverOutputPath = _path.default.join(outputPath, _path.default.relative(tracingRoot, dir), 'server.js');
    await _fs.promises.mkdir(_path.default.dirname(serverOutputPath), {
        recursive: true
    });
    await _fs.promises.writeFile(serverOutputPath, `${moduleType ? `performance.mark('next-start');
import path from 'path'
import { fileURLToPath } from 'url'
import module from 'module'
const require = module.createRequire(import.meta.url)
const __dirname = fileURLToPath(new URL('.', import.meta.url))
` : `const path = require('path')`}

const dir = path.join(__dirname)

process.env.NODE_ENV = 'production'
process.chdir(__dirname)

const currentPort = parseInt(process.env.PORT, 10) || 3000
const hostname = process.env.HOSTNAME || '0.0.0.0'

let keepAliveTimeout = parseInt(process.env.KEEP_ALIVE_TIMEOUT, 10)
const nextConfig = ${JSON.stringify(nextConfig)}

process.env.__NEXT_PRIVATE_STANDALONE_CONFIG = JSON.stringify(nextConfig)

require('next')
const { startServer } = require('next/dist/server/lib/start-server')

if (
  Number.isNaN(keepAliveTimeout) ||
  !Number.isFinite(keepAliveTimeout) ||
  keepAliveTimeout < 0
) {
  keepAliveTimeout = undefined
}

startServer({
  dir,
  isDev: false,
  config: nextConfig,
  hostname,
  port: currentPort,
  allowRetry: false,
  keepAliveTimeout,
}).catch((err) => {
  console.error(err);
  process.exit(1);
});`);
}
function isReservedPage(page) {
    return RESERVED_PAGE.test(page);
}
function isAppBuiltinNotFoundPage(page) {
    return /next[\\/]dist[\\/]client[\\/]components[\\/]not-found-error/.test(page);
}
function isCustomErrorPage(page) {
    return page === '/404' || page === '/500';
}
function isMiddlewareFile(file) {
    return file === `/${_constants.MIDDLEWARE_FILENAME}` || file === `/src/${_constants.MIDDLEWARE_FILENAME}`;
}
function isInstrumentationHookFile(file) {
    return file === `/${_constants.INSTRUMENTATION_HOOK_FILENAME}` || file === `/src/${_constants.INSTRUMENTATION_HOOK_FILENAME}`;
}
function getPossibleInstrumentationHookFilenames(folder, extensions) {
    const files = [];
    for (const extension of extensions){
        files.push(_path.default.join(folder, `${_constants.INSTRUMENTATION_HOOK_FILENAME}.${extension}`), _path.default.join(folder, `src`, `${_constants.INSTRUMENTATION_HOOK_FILENAME}.${extension}`));
    }
    return files;
}
function getPossibleMiddlewareFilenames(folder, extensions) {
    return extensions.map((extension)=>_path.default.join(folder, `${_constants.MIDDLEWARE_FILENAME}.${extension}`));
}
class NestedMiddlewareError extends Error {
    constructor(nestedFileNames, mainDir, pagesOrAppDir){
        super(`Nested Middleware is not allowed, found:\n` + `${nestedFileNames.map((file)=>`pages${file}`).join('\n')}\n` + `Please move your code to a single file at ${_path.default.join(_path.default.posix.sep, _path.default.relative(mainDir, _path.default.resolve(pagesOrAppDir, '..')), 'middleware')} instead.\n` + `Read More - https://nextjs.org/docs/messages/nested-middleware`);
    }
}
function getSupportedBrowsers(dir, isDevelopment) {
    let browsers;
    try {
        const browsersListConfig = _browserslist.default.loadConfig({
            path: dir,
            env: isDevelopment ? 'development' : 'production'
        });
        // Running `browserslist` resolves `extends` and other config features into a list of browsers
        if (browsersListConfig && browsersListConfig.length > 0) {
            browsers = (0, _browserslist.default)(browsersListConfig);
        }
    } catch  {}
    // When user has browserslist use that target
    if (browsers && browsers.length > 0) {
        return browsers;
    }
    // Uses modern browsers as the default.
    return _constants1.MODERN_BROWSERSLIST_TARGET;
}
function isWebpackServerOnlyLayer(layer) {
    return Boolean(layer && _constants.WEBPACK_LAYERS.GROUP.serverOnly.includes(layer));
}
function isWebpackClientOnlyLayer(layer) {
    return Boolean(layer && _constants.WEBPACK_LAYERS.GROUP.clientOnly.includes(layer));
}
function isWebpackDefaultLayer(layer) {
    return layer === null || layer === undefined;
}
function isWebpackBundledLayer(layer) {
    return Boolean(layer && _constants.WEBPACK_LAYERS.GROUP.bundled.includes(layer));
}
function isWebpackAppPagesLayer(layer) {
    return Boolean(layer && _constants.WEBPACK_LAYERS.GROUP.appPages.includes(layer));
}
function collectMeta({ status, headers }) {
    const meta = {};
    if (status !== 200) {
        meta.status = status;
    }
    if (headers && Object.keys(headers).length) {
        meta.headers = {};
        // normalize header values as initialHeaders
        // must be Record<string, string>
        for(const key in headers){
            // set-cookie is already handled - the middleware cookie setting case
            // isn't needed for the prerender manifest since it can't read cookies
            if (key === 'x-middleware-set-cookie') continue;
            let value = headers[key];
            if (Array.isArray(value)) {
                if (key === 'set-cookie') {
                    value = value.join(',');
                } else {
                    value = value[value.length - 1];
                }
            }
            if (typeof value === 'string') {
                meta.headers[key] = value;
            }
        }
    }
    return meta;
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/swc/options.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getJestSWCOptions: null,
    getLoaderSWCOptions: null,
    getParserOptions: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getJestSWCOptions: function() {
        return getJestSWCOptions;
    },
    getLoaderSWCOptions: function() {
        return getLoaderSWCOptions;
    },
    getParserOptions: function() {
        return getParserOptions;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)");
const _escaperegexp = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/escape-regexp.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const nextDirname = _path.default.dirname("[project]/node_modules/next/package.json (json)");
const nextDistPath = new RegExp(`${(0, _escaperegexp.escapeStringRegexp)(nextDirname)}[\\/]dist[\\/](shared[\\/]lib|client|pages)`);
const nodeModulesPath = /[\\/]node_modules[\\/]/;
const regeneratorRuntimePath = "[project]/node_modules/next/dist/compiled/regenerator-runtime/runtime.js [app-rsc] (ecmascript)";
function isTypeScriptFile(filename) {
    return filename.endsWith('.ts') || filename.endsWith('.tsx');
}
function isCommonJSFile(filename) {
    return filename.endsWith('.cjs');
}
// Ensure Next.js internals and .cjs files are output as CJS modules,
// By default all modules are output as ESM or will treated as CJS if next-swc/auto-cjs plugin detects file is CJS.
function shouldOutputCommonJs(filename) {
    return isCommonJSFile(filename) || nextDistPath.test(filename);
}
function getParserOptions({ filename, jsConfig, ...rest }) {
    var _jsConfig_compilerOptions;
    const isTSFile = filename.endsWith('.ts');
    const hasTsSyntax = isTypeScriptFile(filename);
    const enableDecorators = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.experimentalDecorators);
    return {
        ...rest,
        syntax: hasTsSyntax ? 'typescript' : 'ecmascript',
        dynamicImport: true,
        decorators: enableDecorators,
        // Exclude regular TypeScript files from React transformation to prevent e.g. generic parameters and angle-bracket type assertion from being interpreted as JSX tags.
        [hasTsSyntax ? 'tsx' : 'jsx']: !isTSFile,
        importAssertions: true
    };
}
function getBaseSWCOptions({ filename, jest, development, hasReactRefresh, globalWindow, esm, modularizeImports, swcPlugins, compilerOptions, resolvedBaseUrl, jsConfig, swcCacheDir, serverComponents, serverReferenceHashSalt, bundleLayer, isDynamicIo, cacheHandlers }) {
    var _jsConfig_compilerOptions, _jsConfig_compilerOptions1, _jsConfig_compilerOptions2, _jsConfig_compilerOptions3, _jsConfig_compilerOptions4;
    const isReactServerLayer = (0, _utils.isWebpackServerOnlyLayer)(bundleLayer);
    const isAppRouterPagesLayer = (0, _utils.isWebpackAppPagesLayer)(bundleLayer);
    const parserConfig = getParserOptions({
        filename,
        jsConfig
    });
    const paths = jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.paths;
    const enableDecorators = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions1 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions1.experimentalDecorators);
    const emitDecoratorMetadata = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions2 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions2.emitDecoratorMetadata);
    const useDefineForClassFields = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions3 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions3.useDefineForClassFields);
    const plugins = (swcPlugins ?? []).filter(Array.isArray).map(([name, options])=>[
            (()=>{
                const e = new Error("Cannot find module as expression is too dynamic");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })(),
            options
        ]);
    return {
        jsc: {
            ...resolvedBaseUrl && paths ? {
                baseUrl: resolvedBaseUrl.baseUrl,
                paths
            } : {},
            externalHelpers: !process.versions.pnp && !jest,
            parser: parserConfig,
            experimental: {
                keepImportAttributes: true,
                emitAssertForImportAttributes: true,
                plugins,
                cacheRoot: swcCacheDir
            },
            transform: {
                // Enables https://github.com/swc-project/swc/blob/0359deb4841be743d73db4536d4a22ac797d7f65/crates/swc_ecma_ext_transforms/src/jest.rs
                ...jest ? {
                    hidden: {
                        jest: true
                    }
                } : {},
                legacyDecorator: enableDecorators,
                decoratorMetadata: emitDecoratorMetadata,
                useDefineForClassFields: useDefineForClassFields,
                react: {
                    importSource: (jsConfig == null ? void 0 : (_jsConfig_compilerOptions4 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions4.jsxImportSource) ?? ((compilerOptions == null ? void 0 : compilerOptions.emotion) && !isReactServerLayer ? '@emotion/react' : 'react'),
                    runtime: 'automatic',
                    pragmaFrag: 'React.Fragment',
                    throwIfNamespace: true,
                    development: !!development,
                    useBuiltins: true,
                    refresh: !!hasReactRefresh
                },
                optimizer: {
                    simplify: false,
                    globals: jest ? null : {
                        typeofs: {
                            window: globalWindow ? 'object' : 'undefined'
                        },
                        envs: {
                            NODE_ENV: development ? '"development"' : '"production"'
                        }
                    }
                },
                regenerator: {
                    importPath: regeneratorRuntimePath
                }
            }
        },
        sourceMaps: jest ? 'inline' : undefined,
        removeConsole: compilerOptions == null ? void 0 : compilerOptions.removeConsole,
        // disable "reactRemoveProperties" when "jest" is true
        // otherwise the setting from next.config.js will be used
        reactRemoveProperties: jest ? false : compilerOptions == null ? void 0 : compilerOptions.reactRemoveProperties,
        // Map the k-v map to an array of pairs.
        modularizeImports: modularizeImports ? Object.fromEntries(Object.entries(modularizeImports).map(([mod, config])=>[
                mod,
                {
                    ...config,
                    transform: typeof config.transform === 'string' ? config.transform : Object.entries(config.transform).map(([key, value])=>[
                            key,
                            value
                        ])
                }
            ])) : undefined,
        relay: compilerOptions == null ? void 0 : compilerOptions.relay,
        // Always transform styled-jsx and error when `client-only` condition is triggered
        styledJsx: {},
        // Disable css-in-js libs (without client-only integration) transform on server layer for server components
        ...!isReactServerLayer && {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            emotion: getEmotionOptions(compilerOptions == null ? void 0 : compilerOptions.emotion, development),
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            styledComponents: getStyledComponentsOptions(compilerOptions == null ? void 0 : compilerOptions.styledComponents, development)
        },
        serverComponents: serverComponents && !jest ? {
            isReactServerLayer,
            dynamicIoEnabled: isDynamicIo
        } : undefined,
        serverActions: isAppRouterPagesLayer && !jest ? {
            isReactServerLayer,
            dynamicIoEnabled: isDynamicIo,
            hashSalt: serverReferenceHashSalt,
            cacheKinds: cacheHandlers ? Object.keys(cacheHandlers) : []
        } : undefined,
        // For app router we prefer to bundle ESM,
        // On server side of pages router we prefer CJS.
        preferEsm: esm,
        lintCodemodComments: true,
        debugFunctionName: development
    };
}
function getStyledComponentsOptions(styledComponentsConfig, development) {
    if (!styledComponentsConfig) {
        return null;
    } else if (typeof styledComponentsConfig === 'object') {
        return {
            ...styledComponentsConfig,
            displayName: styledComponentsConfig.displayName ?? Boolean(development)
        };
    } else {
        return {
            displayName: Boolean(development)
        };
    }
}
function getEmotionOptions(emotionConfig, development) {
    if (!emotionConfig) {
        return null;
    }
    let autoLabel = !!development;
    switch(typeof emotionConfig === 'object' && emotionConfig.autoLabel){
        case 'never':
            autoLabel = false;
            break;
        case 'always':
            autoLabel = true;
            break;
        case 'dev-only':
        default:
            break;
    }
    return {
        enabled: true,
        autoLabel,
        sourcemap: development,
        ...typeof emotionConfig === 'object' && {
            importMap: emotionConfig.importMap,
            labelFormat: emotionConfig.labelFormat,
            sourcemap: development && emotionConfig.sourceMap
        }
    };
}
function getJestSWCOptions({ isServer, filename, esm, modularizeImports, swcPlugins, compilerOptions, jsConfig, resolvedBaseUrl, pagesDir, serverReferenceHashSalt }) {
    let baseOptions = getBaseSWCOptions({
        filename,
        jest: true,
        development: false,
        hasReactRefresh: false,
        globalWindow: !isServer,
        modularizeImports,
        swcPlugins,
        compilerOptions,
        jsConfig,
        resolvedBaseUrl,
        esm,
        // Don't apply server layer transformations for Jest
        // Disable server / client graph assertions for Jest
        bundleLayer: undefined,
        serverComponents: false,
        serverReferenceHashSalt
    });
    const useCjsModules = shouldOutputCommonJs(filename);
    return {
        ...baseOptions,
        env: {
            targets: {
                // Targets the current version of Node.js
                node: process.versions.node
            }
        },
        module: {
            type: esm && !useCjsModules ? 'es6' : 'commonjs'
        },
        disableNextSsg: true,
        disablePageConfig: true,
        pagesDir
    };
}
function getLoaderSWCOptions({ // resolvedBaseUrl,
filename, development, isServer, pagesDir, appDir, isPageFile, isDynamicIo, hasReactRefresh, modularizeImports, optimizeServerReact, optimizePackageImports, swcPlugins, compilerOptions, jsConfig, supportedBrowsers, swcCacheDir, relativeFilePathFromRoot, serverComponents, serverReferenceHashSalt, bundleLayer, esm, cacheHandlers }) {
    let baseOptions = getBaseSWCOptions({
        filename,
        development,
        globalWindow: !isServer,
        hasReactRefresh,
        modularizeImports,
        swcPlugins,
        compilerOptions,
        jsConfig,
        // resolvedBaseUrl,
        swcCacheDir,
        bundleLayer,
        serverComponents,
        serverReferenceHashSalt,
        esm: !!esm,
        isDynamicIo,
        cacheHandlers
    });
    baseOptions.fontLoaders = {
        fontLoaders: [
            'next/font/local',
            'next/font/google'
        ],
        relativeFilePathFromRoot
    };
    baseOptions.cjsRequireOptimizer = {
        packages: {
            'next/server': {
                transforms: {
                    NextRequest: 'next/dist/server/web/spec-extension/request',
                    NextResponse: 'next/dist/server/web/spec-extension/response',
                    ImageResponse: 'next/dist/server/web/spec-extension/image-response',
                    userAgentFromString: 'next/dist/server/web/spec-extension/user-agent',
                    userAgent: 'next/dist/server/web/spec-extension/user-agent'
                }
            }
        }
    };
    if (optimizeServerReact && isServer && !development) {
        baseOptions.optimizeServerReact = {
            optimize_use_state: false
        };
    }
    // Modularize import optimization for barrel files
    if (optimizePackageImports) {
        baseOptions.autoModularizeImports = {
            packages: optimizePackageImports
        };
    }
    const isNodeModules = nodeModulesPath.test(filename);
    const isAppBrowserLayer = bundleLayer === _constants.WEBPACK_LAYERS.appPagesBrowser;
    const moduleResolutionConfig = shouldOutputCommonJs(filename) ? {
        module: {
            type: 'commonjs'
        }
    } : {};
    let options;
    if (isServer) {
        options = {
            ...baseOptions,
            ...moduleResolutionConfig,
            // Disables getStaticProps/getServerSideProps tree shaking on the server compilation for pages
            disableNextSsg: true,
            disablePageConfig: true,
            isDevelopment: development,
            isServerCompiler: isServer,
            pagesDir,
            appDir,
            preferEsm: !!esm,
            isPageFile,
            env: {
                targets: {
                    // Targets the current version of Node.js
                    node: process.versions.node
                }
            }
        };
    } else {
        options = {
            ...baseOptions,
            ...moduleResolutionConfig,
            disableNextSsg: !isPageFile,
            isDevelopment: development,
            isServerCompiler: isServer,
            pagesDir,
            appDir,
            isPageFile,
            ...supportedBrowsers && supportedBrowsers.length > 0 ? {
                env: {
                    targets: supportedBrowsers
                }
            } : {}
        };
        if (!options.env) {
            // Matches default @babel/preset-env behavior
            options.jsc.target = 'es5';
        }
    }
    // For node_modules in app browser layer, we don't need to do any server side transformation.
    // Only keep server actions transform to discover server actions from client components.
    if (isAppBrowserLayer && isNodeModules) {
        var _options_jsc_transform_optimizer_globals;
        options.disableNextSsg = true;
        options.disablePageConfig = true;
        options.isPageFile = false;
        options.optimizeServerReact = undefined;
        options.cjsRequireOptimizer = undefined;
        // Disable optimizer for node_modules in app browser layer, to avoid unnecessary replacement.
        // e.g. typeof window could result differently in js worker or browser.
        if ((_options_jsc_transform_optimizer_globals = options.jsc.transform.optimizer.globals) == null ? void 0 : _options_jsc_transform_optimizer_globals.typeofs) {
            delete options.jsc.transform.optimizer.globals.typeofs.window;
        }
    }
    return options;
} //# sourceMappingURL=options.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/define-env-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getDefineEnv: null,
    getDefineEnvPlugin: null,
    getNextConfigEnv: null,
    getNextPublicEnvironmentVariables: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getDefineEnv: function() {
        return getDefineEnv;
    },
    getDefineEnvPlugin: function() {
        return getDefineEnvPlugin;
    },
    getNextConfigEnv: function() {
        return getNextConfigEnv;
    },
    getNextPublicEnvironmentVariables: function() {
        return getNextPublicEnvironmentVariables;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _needsexperimentalreact = __turbopack_require__("[project]/node_modules/next/dist/lib/needs-experimental-react.js [app-rsc] (ecmascript)");
const _ppr = __turbopack_require__("[project]/node_modules/next/dist/server/lib/experimental/ppr.js [app-rsc] (ecmascript)");
function errorIfEnvConflicted(config, key) {
    const isPrivateKey = /^(?:NODE_.+)|^(?:__.+)$/i.test(key);
    const hasNextRuntimeKey = key === 'NEXT_RUNTIME';
    if (isPrivateKey || hasNextRuntimeKey) {
        throw new Error(`The key "${key}" under "env" in ${config.configFileName} is not allowed. https://nextjs.org/docs/messages/env-key-not-allowed`);
    }
}
function getNextPublicEnvironmentVariables() {
    const defineEnv = {};
    for(const key in process.env){
        if (key.startsWith('NEXT_PUBLIC_')) {
            const value = process.env[key];
            if (value != null) {
                defineEnv[`process.env.${key}`] = value;
            }
        }
    }
    return defineEnv;
}
function getNextConfigEnv(config) {
    // Refactored code below to use for-of
    const defineEnv = {};
    const env = config.env;
    for(const key in env){
        const value = env[key];
        if (value != null) {
            errorIfEnvConflicted(config, key);
            defineEnv[`process.env.${key}`] = value;
        }
    }
    return defineEnv;
}
/**
 * Serializes the DefineEnv config so that it can be inserted into the code by Webpack/Turbopack, JSON stringifies each value.
 */ function serializeDefineEnv(defineEnv) {
    const defineEnvStringified = {};
    for(const key in defineEnv){
        const value = defineEnv[key];
        defineEnvStringified[key] = JSON.stringify(value);
    }
    return defineEnvStringified;
}
function getImageConfig(config, dev) {
    var _config_images, _config_images1, _config_images2;
    return {
        'process.env.__NEXT_IMAGE_OPTS': {
            deviceSizes: config.images.deviceSizes,
            imageSizes: config.images.imageSizes,
            qualities: config.images.qualities,
            path: config.images.path,
            loader: config.images.loader,
            dangerouslyAllowSVG: config.images.dangerouslyAllowSVG,
            unoptimized: config == null ? void 0 : (_config_images = config.images) == null ? void 0 : _config_images.unoptimized,
            ...dev ? {
                // additional config in dev to allow validating on the client
                domains: config.images.domains,
                remotePatterns: (_config_images1 = config.images) == null ? void 0 : _config_images1.remotePatterns,
                localPatterns: (_config_images2 = config.images) == null ? void 0 : _config_images2.localPatterns,
                output: config.output
            } : {}
        }
    };
}
function getDefineEnv({ isTurbopack, clientRouterFilters, config, dev, distDir, fetchCacheKeyPrefix, hasRewrites, isClient, isEdgeServer, isNodeOrEdgeCompilation, isNodeServer, middlewareMatchers }) {
    var _config_experimental_staleTimes, _config_experimental_staleTimes1, _config_experimental_staleTimes2, _config_experimental_staleTimes3, _config_i18n, _config_compiler;
    const nextPublicEnv = getNextPublicEnvironmentVariables();
    const nextConfigEnv = getNextConfigEnv(config);
    const isPPREnabled = (0, _ppr.checkIsAppPPREnabled)(config.experimental.ppr);
    const isDynamicIOEnabled = !!config.experimental.dynamicIO;
    const defineEnv = {
        // internal field to identify the plugin config
        __NEXT_DEFINE_ENV: true,
        ...nextPublicEnv,
        ...nextConfigEnv,
        ...!isEdgeServer ? {} : {
            EdgeRuntime: /**
             * Cloud providers can set this environment variable to allow users
             * and library authors to have different implementations based on
             * the runtime they are running with, if it's not using `edge-runtime`
             */ process.env.NEXT_EDGE_RUNTIME_PROVIDER ?? 'edge-runtime',
            // process should be only { env: {...} } for edge runtime.
            // For ignore avoid warn on `process.emit` usage but directly omit it.
            'process.emit': false
        },
        'process.turbopack': isTurbopack,
        'process.env.TURBOPACK': isTurbopack,
        // TODO: enforce `NODE_ENV` on `process.env`, and add a test:
        'process.env.NODE_ENV': dev || config.experimental.allowDevelopmentBuild ? 'development' : 'production',
        'process.env.NEXT_RUNTIME': isEdgeServer ? 'edge' : isNodeServer ? 'nodejs' : '',
        'process.env.NEXT_MINIMAL': '',
        'process.env.__NEXT_APP_NAV_FAIL_HANDLING': Boolean(config.experimental.appNavFailHandling),
        'process.env.__NEXT_APP_ISR_INDICATOR': Boolean(config.devIndicators.appIsrStatus),
        'process.env.__NEXT_PPR': isPPREnabled,
        'process.env.__NEXT_DYNAMIC_IO': isDynamicIOEnabled,
        'process.env.NEXT_DEPLOYMENT_ID': config.deploymentId || false,
        'process.env.__NEXT_FETCH_CACHE_KEY_PREFIX': fetchCacheKeyPrefix ?? '',
        ...isTurbopack ? {} : {
            'process.env.__NEXT_MIDDLEWARE_MATCHERS': middlewareMatchers ?? []
        },
        'process.env.__NEXT_MANUAL_CLIENT_BASE_PATH': config.experimental.manualClientBasePath ?? false,
        'process.env.__NEXT_CLIENT_ROUTER_DYNAMIC_STALETIME': JSON.stringify(isNaN(Number((_config_experimental_staleTimes = config.experimental.staleTimes) == null ? void 0 : _config_experimental_staleTimes.dynamic)) ? 0 : (_config_experimental_staleTimes1 = config.experimental.staleTimes) == null ? void 0 : _config_experimental_staleTimes1.dynamic),
        'process.env.__NEXT_CLIENT_ROUTER_STATIC_STALETIME': JSON.stringify(isNaN(Number((_config_experimental_staleTimes2 = config.experimental.staleTimes) == null ? void 0 : _config_experimental_staleTimes2.static)) ? 5 * 60 // 5 minutes
         : (_config_experimental_staleTimes3 = config.experimental.staleTimes) == null ? void 0 : _config_experimental_staleTimes3.static),
        'process.env.__NEXT_CLIENT_ROUTER_FILTER_ENABLED': config.experimental.clientRouterFilter ?? true,
        'process.env.__NEXT_CLIENT_ROUTER_S_FILTER': (clientRouterFilters == null ? void 0 : clientRouterFilters.staticFilter) ?? false,
        'process.env.__NEXT_CLIENT_ROUTER_D_FILTER': (clientRouterFilters == null ? void 0 : clientRouterFilters.dynamicFilter) ?? false,
        'process.env.__NEXT_CLIENT_SEGMENT_CACHE': Boolean(config.experimental.clientSegmentCache),
        'process.env.__NEXT_OPTIMISTIC_CLIENT_CACHE': config.experimental.optimisticClientCache ?? true,
        'process.env.__NEXT_MIDDLEWARE_PREFETCH': config.experimental.middlewarePrefetch ?? 'flexible',
        'process.env.__NEXT_CROSS_ORIGIN': config.crossOrigin,
        'process.browser': isClient,
        'process.env.__NEXT_TEST_MODE': ("TURBOPACK compile-time value", false) ?? false,
        // This is used in client/dev-error-overlay/hot-dev-client.js to replace the dist directory
        ...dev && (isClient ?? isEdgeServer) ? {
            'process.env.__NEXT_DIST_DIR': distDir
        } : {},
        'process.env.__NEXT_TRAILING_SLASH': config.trailingSlash,
        'process.env.__NEXT_BUILD_INDICATOR': config.devIndicators.buildActivity ?? true,
        'process.env.__NEXT_BUILD_INDICATOR_POSITION': config.devIndicators.buildActivityPosition ?? 'bottom-right',
        'process.env.__NEXT_STRICT_MODE': config.reactStrictMode === null ? false : config.reactStrictMode,
        'process.env.__NEXT_STRICT_MODE_APP': config.reactStrictMode === null ? true : config.reactStrictMode,
        'process.env.__NEXT_OPTIMIZE_CSS': (config.experimental.optimizeCss && !dev) ?? false,
        'process.env.__NEXT_SCRIPT_WORKERS': (config.experimental.nextScriptWorkers && !dev) ?? false,
        'process.env.__NEXT_SCROLL_RESTORATION': config.experimental.scrollRestoration ?? false,
        ...getImageConfig(config, dev),
        'process.env.__NEXT_ROUTER_BASEPATH': config.basePath,
        'process.env.__NEXT_STRICT_NEXT_HEAD': config.experimental.strictNextHead ?? true,
        'process.env.__NEXT_HAS_REWRITES': hasRewrites,
        'process.env.__NEXT_CONFIG_OUTPUT': config.output,
        'process.env.__NEXT_I18N_SUPPORT': !!config.i18n,
        'process.env.__NEXT_I18N_DOMAINS': ((_config_i18n = config.i18n) == null ? void 0 : _config_i18n.domains) ?? false,
        'process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE': config.skipMiddlewareUrlNormalize,
        'process.env.__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE': config.experimental.externalMiddlewareRewritesResolve ?? false,
        'process.env.__NEXT_MANUAL_TRAILING_SLASH': config.skipTrailingSlashRedirect,
        'process.env.__NEXT_HAS_WEB_VITALS_ATTRIBUTION': (config.experimental.webVitalsAttribution && config.experimental.webVitalsAttribution.length > 0) ?? false,
        'process.env.__NEXT_WEB_VITALS_ATTRIBUTION': config.experimental.webVitalsAttribution ?? false,
        'process.env.__NEXT_LINK_NO_TOUCH_START': config.experimental.linkNoTouchStart ?? false,
        'process.env.__NEXT_ASSET_PREFIX': config.assetPrefix,
        'process.env.__NEXT_DISABLE_SYNC_DYNAMIC_API_WARNINGS': config.experimental.internal_disableSyncDynamicAPIWarnings ?? false,
        'process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS': !!config.experimental.authInterrupts,
        ...isNodeOrEdgeCompilation ? {
            // Fix bad-actors in the npm ecosystem (e.g. `node-formidable`)
            // This is typically found in unmaintained modules from the
            // pre-webpack era (common in server-side code)
            'global.GENTLY': false
        } : undefined,
        ...isNodeOrEdgeCompilation ? {
            'process.env.__NEXT_EXPERIMENTAL_REACT': (0, _needsexperimentalreact.needsExperimentalReact)(config)
        } : undefined
    };
    const userDefines = ((_config_compiler = config.compiler) == null ? void 0 : _config_compiler.define) ?? {};
    for(const key in userDefines){
        if (defineEnv.hasOwnProperty(key)) {
            throw new Error(`The \`compiler.define\` option is configured to replace the \`${key}\` variable. This variable is either part of a Next.js built-in or is already configured via the \`env\` option.`);
        }
        defineEnv[key] = userDefines[key];
    }
    return serializeDefineEnv(defineEnv);
}
function getDefineEnvPlugin(options) {
    return new _webpack.webpack.DefinePlugin(getDefineEnv(options));
} //# sourceMappingURL=define-env-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/babel/loader/util.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "consumeIterator", {
    enumerable: true,
    get: function() {
        return consumeIterator;
    }
});
function consumeIterator(iter) {
    while(true){
        const { value, done } = iter.next();
        if (done) {
            return value;
        }
    }
} //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/next/dist/build/babel/plugins/commonjs.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return CommonJSModulePlugin;
    }
});
const _plugintransformmodulescommonjs = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/plugin-transform-modules-commonjs.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function CommonJSModulePlugin(...args) {
    const commonjs = (0, _plugintransformmodulescommonjs.default)(...args);
    return {
        visitor: {
            Program: {
                exit (path, state) {
                    let foundModuleExports = false;
                    path.traverse({
                        MemberExpression (expressionPath) {
                            if (expressionPath.node.object.name !== 'module') return;
                            if (expressionPath.node.property.name !== 'exports') return;
                            foundModuleExports = true;
                        }
                    });
                    if (!foundModuleExports) {
                        return;
                    }
                    commonjs.visitor.Program.exit.call(this, path, state);
                }
            }
        }
    };
} //# sourceMappingURL=commonjs.js.map
}}),
"[project]/node_modules/next/dist/build/babel/plugins/next-page-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return nextPageConfig;
    }
});
const _core = __turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const CONFIG_KEY = 'config';
// replace program path with just a variable with the drop identifier
function replaceBundle(path, t) {
    path.parentPath.replaceWith(t.program([
        t.variableDeclaration('const', [
            t.variableDeclarator(t.identifier(_constants.STRING_LITERAL_DROP_BUNDLE), t.stringLiteral(`${_constants.STRING_LITERAL_DROP_BUNDLE} ${Date.now()}`))
        ])
    ], []));
}
function errorMessage(state, details) {
    const pageName = (state.filename || '').split(state.cwd || '').pop() || 'unknown';
    return `Invalid page config export found. ${details} in file ${pageName}. See: https://nextjs.org/docs/messages/invalid-page-config`;
}
function nextPageConfig({ types: t }) {
    return {
        visitor: {
            Program: {
                enter (path, state) {
                    path.traverse({
                        ExportDeclaration (exportPath, exportState) {
                            var _exportPath_node_specifiers;
                            if (_core.types.isExportNamedDeclaration(exportPath.node) && ((_exportPath_node_specifiers = exportPath.node.specifiers) == null ? void 0 : _exportPath_node_specifiers.some((specifier)=>{
                                return (t.isIdentifier(specifier.exported) ? specifier.exported.name : specifier.exported.value) === CONFIG_KEY;
                            })) && _core.types.isStringLiteral(exportPath.node.source)) {
                                throw new Error(errorMessage(exportState, 'Expected object but got export from'));
                            }
                        },
                        ExportNamedDeclaration (exportPath, exportState) {
                            var _exportPath_node_declaration, _exportPath_scope_getBinding;
                            if (exportState.bundleDropped || !exportPath.node.declaration && exportPath.node.specifiers.length === 0) {
                                return;
                            }
                            const config = {};
                            const declarations = [
                                ...((_exportPath_node_declaration = exportPath.node.declaration) == null ? void 0 : _exportPath_node_declaration.declarations) || [],
                                (_exportPath_scope_getBinding = exportPath.scope.getBinding(CONFIG_KEY)) == null ? void 0 : _exportPath_scope_getBinding.path.node
                            ].filter(Boolean);
                            for (const specifier of exportPath.node.specifiers){
                                if ((t.isIdentifier(specifier.exported) ? specifier.exported.name : specifier.exported.value) === CONFIG_KEY) {
                                    // export {} from 'somewhere'
                                    if (_core.types.isStringLiteral(exportPath.node.source)) {
                                        throw new Error(errorMessage(exportState, `Expected object but got import`));
                                    // import hello from 'world'
                                    // export { hello as config }
                                    } else if (_core.types.isIdentifier(specifier.local)) {
                                        var _exportPath_scope_getBinding1;
                                        if (_core.types.isImportSpecifier((_exportPath_scope_getBinding1 = exportPath.scope.getBinding(specifier.local.name)) == null ? void 0 : _exportPath_scope_getBinding1.path.node)) {
                                            throw new Error(errorMessage(exportState, `Expected object but got import`));
                                        }
                                    }
                                }
                            }
                            for (const declaration of declarations){
                                if (!_core.types.isIdentifier(declaration.id, {
                                    name: CONFIG_KEY
                                })) {
                                    continue;
                                }
                                let { init } = declaration;
                                if (_core.types.isTSAsExpression(init)) {
                                    init = init.expression;
                                }
                                if (!_core.types.isObjectExpression(init)) {
                                    const got = init ? init.type : 'undefined';
                                    throw new Error(errorMessage(exportState, `Expected object but got ${got}`));
                                }
                                for (const prop of init.properties){
                                    if (_core.types.isSpreadElement(prop)) {
                                        throw new Error(errorMessage(exportState, `Property spread is not allowed`));
                                    }
                                    const { name } = prop.key;
                                    if (_core.types.isIdentifier(prop.key, {
                                        name: 'amp'
                                    })) {
                                        if (!_core.types.isObjectProperty(prop)) {
                                            throw new Error(errorMessage(exportState, `Invalid property "${name}"`));
                                        }
                                        if (!_core.types.isBooleanLiteral(prop.value) && !_core.types.isStringLiteral(prop.value)) {
                                            throw new Error(errorMessage(exportState, `Invalid value for "${name}"`));
                                        }
                                        config.amp = prop.value.value;
                                    }
                                }
                            }
                            if (config.amp === true) {
                                var _exportState_file_opts, _exportState_file;
                                if (!((_exportState_file = exportState.file) == null ? void 0 : (_exportState_file_opts = _exportState_file.opts) == null ? void 0 : _exportState_file_opts.caller.isDev)) {
                                    // don't replace bundle in development so HMR can track
                                    // dependencies and trigger reload when they are changed
                                    replaceBundle(exportPath, t);
                                }
                                exportState.bundleDropped = true;
                                return;
                            }
                        }
                    }, state);
                }
            }
        }
    };
} //# sourceMappingURL=next-page-config.js.map
}}),
"[project]/node_modules/next/dist/build/babel/plugins/next-page-disallow-re-export-all-exports.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return NextPageDisallowReExportAllExports;
    }
});
function NextPageDisallowReExportAllExports() {
    return {
        visitor: {
            ExportAllDeclaration (path) {
                var _path_node_loc, _path_node_loc1;
                const err = new SyntaxError(`Using \`export * from '...'\` in a page is disallowed. Please use \`export { default } from '...'\` instead.\n` + `Read more: https://nextjs.org/docs/messages/export-all-in-page`);
                err.code = 'BABEL_PARSE_ERROR';
                err.loc = ((_path_node_loc = path.node.loc) == null ? void 0 : _path_node_loc.start) ?? ((_path_node_loc1 = path.node.loc) == null ? void 0 : _path_node_loc1.end) ?? path.node.loc;
                throw err;
            }
        }
    };
} //# sourceMappingURL=next-page-disallow-re-export-all-exports.js.map
}}),
"[project]/node_modules/next/dist/build/babel/plugins/next-ssg-transform.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    EXPORT_NAME_GET_SERVER_PROPS: null,
    EXPORT_NAME_GET_STATIC_PATHS: null,
    EXPORT_NAME_GET_STATIC_PROPS: null,
    default: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EXPORT_NAME_GET_SERVER_PROPS: function() {
        return EXPORT_NAME_GET_SERVER_PROPS;
    },
    EXPORT_NAME_GET_STATIC_PATHS: function() {
        return EXPORT_NAME_GET_STATIC_PATHS;
    },
    EXPORT_NAME_GET_STATIC_PROPS: function() {
        return EXPORT_NAME_GET_STATIC_PROPS;
    },
    default: function() {
        return nextTransformSsg;
    }
});
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const EXPORT_NAME_GET_STATIC_PROPS = 'getStaticProps';
const EXPORT_NAME_GET_STATIC_PATHS = 'getStaticPaths';
const EXPORT_NAME_GET_SERVER_PROPS = 'getServerSideProps';
const ssgExports = new Set([
    EXPORT_NAME_GET_STATIC_PROPS,
    EXPORT_NAME_GET_STATIC_PATHS,
    EXPORT_NAME_GET_SERVER_PROPS,
    // legacy methods added so build doesn't fail from importing
    // server-side only methods
    `unstable_getStaticProps`,
    `unstable_getStaticPaths`,
    `unstable_getServerProps`,
    `unstable_getServerSideProps`
]);
function decorateSsgExport(t, path, state) {
    const gsspName = state.isPrerender ? _constants1.STATIC_PROPS_ID : _constants1.SERVER_PROPS_ID;
    const gsspId = t.identifier(gsspName);
    const addGsspExport = (exportPath)=>{
        if (state.done) {
            return;
        }
        state.done = true;
        const [pageCompPath] = exportPath.replaceWithMultiple([
            t.exportNamedDeclaration(t.variableDeclaration(// this runs in `Program#exit`, no ES2015 transforms (preset env)
            // will be ran against this code.
            'var', [
                t.variableDeclarator(gsspId, t.booleanLiteral(true))
            ]), [
                t.exportSpecifier(gsspId, gsspId)
            ]),
            exportPath.node
        ]);
        exportPath.scope.registerDeclaration(pageCompPath);
    };
    path.traverse({
        ExportDefaultDeclaration (exportDefaultPath) {
            addGsspExport(exportDefaultPath);
        },
        ExportNamedDeclaration (exportNamedPath) {
            addGsspExport(exportNamedPath);
        }
    });
}
const isDataIdentifier = (name, state)=>{
    if (ssgExports.has(name)) {
        if (name === EXPORT_NAME_GET_SERVER_PROPS) {
            if (state.isPrerender) {
                throw new Error(_constants.SERVER_PROPS_SSG_CONFLICT);
            }
            state.isServerProps = true;
        } else {
            if (state.isServerProps) {
                throw new Error(_constants.SERVER_PROPS_SSG_CONFLICT);
            }
            state.isPrerender = true;
        }
        return true;
    }
    return false;
};
function nextTransformSsg({ types: t }) {
    function getIdentifier(path) {
        const parentPath = path.parentPath;
        if (parentPath.type === 'VariableDeclarator') {
            const pp = parentPath;
            const name = pp.get('id');
            return name.node.type === 'Identifier' ? name : null;
        }
        if (parentPath.type === 'AssignmentExpression') {
            const pp = parentPath;
            const name = pp.get('left');
            return name.node.type === 'Identifier' ? name : null;
        }
        if (path.node.type === 'ArrowFunctionExpression') {
            return null;
        }
        return path.node.id && path.node.id.type === 'Identifier' ? path.get('id') : null;
    }
    function isIdentifierReferenced(ident) {
        const b = ident.scope.getBinding(ident.node.name);
        if (b == null ? void 0 : b.referenced) {
            // Functions can reference themselves, so we need to check if there's a
            // binding outside the function scope or not.
            if (b.path.type === 'FunctionDeclaration') {
                return !b.constantViolations.concat(b.referencePaths) // Check that every reference is contained within the function:
                .every((ref)=>ref.findParent((p)=>p === b.path));
            }
            return true;
        }
        return false;
    }
    function markFunction(path, state) {
        const ident = getIdentifier(path);
        if ((ident == null ? void 0 : ident.node) && isIdentifierReferenced(ident)) {
            state.refs.add(ident);
        }
    }
    function markImport(path, state) {
        const local = path.get('local');
        if (isIdentifierReferenced(local)) {
            state.refs.add(local);
        }
    }
    return {
        visitor: {
            Program: {
                enter (path, state) {
                    state.refs = new Set();
                    state.isPrerender = false;
                    state.isServerProps = false;
                    state.done = false;
                    path.traverse({
                        VariableDeclarator (variablePath, variableState) {
                            if (variablePath.node.id.type === 'Identifier') {
                                const local = variablePath.get('id');
                                if (isIdentifierReferenced(local)) {
                                    variableState.refs.add(local);
                                }
                            } else if (variablePath.node.id.type === 'ObjectPattern') {
                                const pattern = variablePath.get('id');
                                const properties = pattern.get('properties');
                                properties.forEach((p)=>{
                                    const local = p.get(p.node.type === 'ObjectProperty' ? 'value' : p.node.type === 'RestElement' ? 'argument' : function() {
                                        throw new Error('invariant');
                                    }());
                                    if (isIdentifierReferenced(local)) {
                                        variableState.refs.add(local);
                                    }
                                });
                            } else if (variablePath.node.id.type === 'ArrayPattern') {
                                const pattern = variablePath.get('id');
                                const elements = pattern.get('elements');
                                elements.forEach((e)=>{
                                    var _e_node, _e_node1;
                                    let local;
                                    if (((_e_node = e.node) == null ? void 0 : _e_node.type) === 'Identifier') {
                                        local = e;
                                    } else if (((_e_node1 = e.node) == null ? void 0 : _e_node1.type) === 'RestElement') {
                                        local = e.get('argument');
                                    } else {
                                        return;
                                    }
                                    if (isIdentifierReferenced(local)) {
                                        variableState.refs.add(local);
                                    }
                                });
                            }
                        },
                        FunctionDeclaration: markFunction,
                        FunctionExpression: markFunction,
                        ArrowFunctionExpression: markFunction,
                        ImportSpecifier: markImport,
                        ImportDefaultSpecifier: markImport,
                        ImportNamespaceSpecifier: markImport,
                        ExportNamedDeclaration (exportNamedPath, exportNamedState) {
                            const specifiers = exportNamedPath.get('specifiers');
                            if (specifiers.length) {
                                specifiers.forEach((s)=>{
                                    if (isDataIdentifier(t.isIdentifier(s.node.exported) ? s.node.exported.name : s.node.exported.value, exportNamedState)) {
                                        s.remove();
                                    }
                                });
                                if (exportNamedPath.node.specifiers.length < 1) {
                                    exportNamedPath.remove();
                                }
                                return;
                            }
                            const decl = exportNamedPath.get('declaration');
                            if (decl == null || decl.node == null) {
                                return;
                            }
                            switch(decl.node.type){
                                case 'FunctionDeclaration':
                                    {
                                        const name = decl.node.id.name;
                                        if (isDataIdentifier(name, exportNamedState)) {
                                            exportNamedPath.remove();
                                        }
                                        break;
                                    }
                                case 'VariableDeclaration':
                                    {
                                        const inner = decl.get('declarations');
                                        inner.forEach((d)=>{
                                            if (d.node.id.type !== 'Identifier') {
                                                return;
                                            }
                                            const name = d.node.id.name;
                                            if (isDataIdentifier(name, exportNamedState)) {
                                                d.remove();
                                            }
                                        });
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                        }
                    }, state);
                    if (!state.isPrerender && !state.isServerProps) {
                        return;
                    }
                    const refs = state.refs;
                    let count;
                    function sweepFunction(sweepPath) {
                        const ident = getIdentifier(sweepPath);
                        if ((ident == null ? void 0 : ident.node) && refs.has(ident) && !isIdentifierReferenced(ident)) {
                            ++count;
                            if (t.isAssignmentExpression(sweepPath.parentPath.node) || t.isVariableDeclarator(sweepPath.parentPath.node)) {
                                sweepPath.parentPath.remove();
                            } else {
                                sweepPath.remove();
                            }
                        }
                    }
                    function sweepImport(sweepPath) {
                        const local = sweepPath.get('local');
                        if (refs.has(local) && !isIdentifierReferenced(local)) {
                            ++count;
                            sweepPath.remove();
                            if (sweepPath.parent.specifiers.length === 0) {
                                sweepPath.parentPath.remove();
                            }
                        }
                    }
                    do {
                        ;
                        path.scope.crawl();
                        count = 0;
                        path.traverse({
                            // eslint-disable-next-line no-loop-func
                            VariableDeclarator (variablePath) {
                                if (variablePath.node.id.type === 'Identifier') {
                                    const local = variablePath.get('id');
                                    if (refs.has(local) && !isIdentifierReferenced(local)) {
                                        ++count;
                                        variablePath.remove();
                                    }
                                } else if (variablePath.node.id.type === 'ObjectPattern') {
                                    const pattern = variablePath.get('id');
                                    const beforeCount = count;
                                    const properties = pattern.get('properties');
                                    properties.forEach((p)=>{
                                        const local = p.get(p.node.type === 'ObjectProperty' ? 'value' : p.node.type === 'RestElement' ? 'argument' : function() {
                                            throw new Error('invariant');
                                        }());
                                        if (refs.has(local) && !isIdentifierReferenced(local)) {
                                            ++count;
                                            p.remove();
                                        }
                                    });
                                    if (beforeCount !== count && pattern.get('properties').length < 1) {
                                        variablePath.remove();
                                    }
                                } else if (variablePath.node.id.type === 'ArrayPattern') {
                                    const pattern = variablePath.get('id');
                                    const beforeCount = count;
                                    const elements = pattern.get('elements');
                                    elements.forEach((e)=>{
                                        var _e_node, _e_node1;
                                        let local;
                                        if (((_e_node = e.node) == null ? void 0 : _e_node.type) === 'Identifier') {
                                            local = e;
                                        } else if (((_e_node1 = e.node) == null ? void 0 : _e_node1.type) === 'RestElement') {
                                            local = e.get('argument');
                                        } else {
                                            return;
                                        }
                                        if (refs.has(local) && !isIdentifierReferenced(local)) {
                                            ++count;
                                            e.remove();
                                        }
                                    });
                                    if (beforeCount !== count && pattern.get('elements').length < 1) {
                                        variablePath.remove();
                                    }
                                }
                            },
                            FunctionDeclaration: sweepFunction,
                            FunctionExpression: sweepFunction,
                            ArrowFunctionExpression: sweepFunction,
                            ImportSpecifier: sweepImport,
                            ImportDefaultSpecifier: sweepImport,
                            ImportNamespaceSpecifier: sweepImport
                        });
                    }while (count)
                    decorateSsgExport(t, path, state);
                }
            }
        }
    };
} //# sourceMappingURL=next-ssg-transform.js.map
}}),
"[project]/node_modules/next/dist/build/babel/plugins/next-font-unsupported.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return NextPageDisallowReExportAllExports;
    }
});
function NextPageDisallowReExportAllExports() {
    return {
        visitor: {
            ImportDeclaration (path) {
                if ([
                    '@next/font/local',
                    '@next/font/google',
                    'next/font/local',
                    'next/font/google'
                ].includes(path.node.source.value)) {
                    var _path_node_loc, _path_node_loc1;
                    const err = new SyntaxError(`"next/font" requires SWC although Babel is being used due to a custom babel config being present.\nRead more: https://nextjs.org/docs/messages/babel-font-loader-conflict`);
                    err.code = 'BABEL_PARSE_ERROR';
                    err.loc = ((_path_node_loc = path.node.loc) == null ? void 0 : _path_node_loc.start) ?? ((_path_node_loc1 = path.node.loc) == null ? void 0 : _path_node_loc1.end) ?? path.node.loc;
                    throw err;
                }
            }
        }
    };
} //# sourceMappingURL=next-font-unsupported.js.map
}}),
"[project]/node_modules/next/dist/build/babel/loader/get-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return getConfig;
    }
});
const _fs = __turbopack_require__("[externals]/fs [external] (fs, cjs)");
const _json5 = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/json5/index.js [app-rsc] (ecmascript)"));
const _core = __turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core.js [app-rsc] (ecmascript)");
const _corelibconfig = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core-lib-config.js [app-rsc] (ecmascript)"));
const _util = __turbopack_require__("[project]/node_modules/next/dist/build/babel/loader/util.js [app-rsc] (ecmascript)");
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
const _pluginsyntaxjsx = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/plugin-syntax-jsx.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const nextDistPath = /(next[\\/]dist[\\/]shared[\\/]lib)|(next[\\/]dist[\\/]client)|(next[\\/]dist[\\/]pages)/;
const fileExtensionRegex = /\.([a-z]+)$/;
function getCacheCharacteristics(loaderOptions, source, filename) {
    var _fileExtensionRegex_exec;
    const { isServer, pagesDir } = loaderOptions;
    const isPageFile = filename.startsWith(pagesDir);
    const isNextDist = nextDistPath.test(filename);
    const hasModuleExports = source.indexOf('module.exports') !== -1;
    const fileExt = ((_fileExtensionRegex_exec = fileExtensionRegex.exec(filename)) == null ? void 0 : _fileExtensionRegex_exec[1]) || 'unknown';
    return {
        isServer,
        isPageFile,
        isNextDist,
        hasModuleExports,
        fileExt
    };
}
/**
 * Return an array of Babel plugins, conditioned upon loader options and
 * source file characteristics.
 */ function getPlugins(loaderOptions, cacheCharacteristics) {
    const { isServer, isPageFile, isNextDist, hasModuleExports } = cacheCharacteristics;
    const { development } = loaderOptions;
    const hasReactRefresh = loaderOptions.transformMode !== 'standalone' ? loaderOptions.hasReactRefresh : false;
    const applyCommonJsItem = hasModuleExports ? (0, _core.createConfigItem)(__turbopack_require__("[project]/node_modules/next/dist/build/babel/plugins/commonjs.js [app-rsc] (ecmascript)"), {
        type: 'plugin'
    }) : null;
    const reactRefreshItem = hasReactRefresh ? (0, _core.createConfigItem)([
        __turbopack_require__("[project]/node_modules/next/dist/compiled/react-refresh/babel.js [app-rsc] (ecmascript)"),
        {
            skipEnvCheck: true
        }
    ], {
        type: 'plugin'
    }) : null;
    const pageConfigItem = !isServer && isPageFile ? (0, _core.createConfigItem)([
        __turbopack_require__("[project]/node_modules/next/dist/build/babel/plugins/next-page-config.js [app-rsc] (ecmascript)")
    ], {
        type: 'plugin'
    }) : null;
    const disallowExportAllItem = !isServer && isPageFile ? (0, _core.createConfigItem)([
        __turbopack_require__("[project]/node_modules/next/dist/build/babel/plugins/next-page-disallow-re-export-all-exports.js [app-rsc] (ecmascript)")
    ], {
        type: 'plugin'
    }) : null;
    const transformDefineItem = (0, _core.createConfigItem)([
        "[project]/node_modules/next/dist/compiled/babel/plugin-transform-define.js [app-rsc] (ecmascript)",
        {
            'process.env.NODE_ENV': development ? 'development' : 'production',
            'typeof window': isServer ? 'undefined' : 'object',
            'process.browser': isServer ? false : true
        },
        'next-js-transform-define-instance'
    ], {
        type: 'plugin'
    });
    const nextSsgItem = !isServer && isPageFile ? (0, _core.createConfigItem)([
        "[project]/node_modules/next/dist/build/babel/plugins/next-ssg-transform.js [app-rsc] (ecmascript)"
    ], {
        type: 'plugin'
    }) : null;
    const commonJsItem = isNextDist ? (0, _core.createConfigItem)(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/plugin-transform-modules-commonjs.js [app-rsc] (ecmascript)"), {
        type: 'plugin'
    }) : null;
    const nextFontUnsupported = (0, _core.createConfigItem)([
        __turbopack_require__("[project]/node_modules/next/dist/build/babel/plugins/next-font-unsupported.js [app-rsc] (ecmascript)")
    ], {
        type: 'plugin'
    });
    return [
        reactRefreshItem,
        pageConfigItem,
        disallowExportAllItem,
        applyCommonJsItem,
        transformDefineItem,
        nextSsgItem,
        commonJsItem,
        nextFontUnsupported
    ].filter(Boolean);
}
const isJsonFile = /\.(json|babelrc)$/;
const isJsFile = /\.js$/;
/**
 * While this function does block execution while reading from disk, it
 * should not introduce any issues.  The function is only invoked when
 * generating a fresh config, and only a small handful of configs should
 * be generated during compilation.
 */ function getCustomBabelConfig(configFilePath) {
    if (isJsonFile.exec(configFilePath)) {
        const babelConfigRaw = (0, _fs.readFileSync)(configFilePath, 'utf8');
        return _json5.default.parse(babelConfigRaw);
    } else if (isJsFile.exec(configFilePath)) {
        return (()=>{
            const e = new Error("Cannot find module as expression is too dynamic");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })();
    }
    throw new Error('The Next.js Babel loader does not support .mjs or .cjs config files.');
}
let babelConfigWarned = false;
/**
 * Check if custom babel configuration from user only contains options that
 * can be migrated into latest Next.js features supported by SWC.
 *
 * This raises soft warning messages only, not making any errors yet.
 */ function checkCustomBabelConfigDeprecation(config) {
    if (!config || Object.keys(config).length === 0) {
        return;
    }
    const { plugins, presets, ...otherOptions } = config;
    if (Object.keys(otherOptions ?? {}).length > 0) {
        return;
    }
    if (babelConfigWarned) {
        return;
    }
    babelConfigWarned = true;
    const isPresetReadyToDeprecate = !presets || presets.length === 0 || presets.length === 1 && presets[0] === 'next/babel';
    const pluginReasons = [];
    const unsupportedPlugins = [];
    if (Array.isArray(plugins)) {
        for (const plugin of plugins){
            const pluginName = Array.isArray(plugin) ? plugin[0] : plugin;
            // [NOTE]: We cannot detect if the user uses babel-plugin-macro based transform plugins,
            // such as `styled-components/macro` in here.
            switch(pluginName){
                case 'styled-components':
                case 'babel-plugin-styled-components':
                    pluginReasons.push(`\t- 'styled-components' can be enabled via 'compiler.styledComponents' in 'next.config.js'`);
                    break;
                case '@emotion/babel-plugin':
                    pluginReasons.push(`\t- '@emotion/babel-plugin' can be enabled via 'compiler.emotion' in 'next.config.js'`);
                    break;
                case 'babel-plugin-relay':
                    pluginReasons.push(`\t- 'babel-plugin-relay' can be enabled via 'compiler.relay' in 'next.config.js'`);
                    break;
                case 'react-remove-properties':
                    pluginReasons.push(`\t- 'react-remove-properties' can be enabled via 'compiler.reactRemoveProperties' in 'next.config.js'`);
                    break;
                case 'transform-remove-console':
                    pluginReasons.push(`\t- 'transform-remove-console' can be enabled via 'compiler.removeConsole' in 'next.config.js'`);
                    break;
                default:
                    unsupportedPlugins.push(pluginName);
                    break;
            }
        }
    }
    if (isPresetReadyToDeprecate && unsupportedPlugins.length === 0) {
        _log.warn(`It looks like there is a custom Babel configuration that can be removed${pluginReasons.length > 0 ? ':' : '.'}`);
        if (pluginReasons.length > 0) {
            _log.warn(`Next.js supports the following features natively: `);
            _log.warn(pluginReasons.join(''));
            _log.warn(`For more details configuration options, please refer https://nextjs.org/docs/architecture/nextjs-compiler#supported-features`);
        }
    }
}
/**
 * Generate a new, flat Babel config, ready to be handed to Babel-traverse.
 * This config should have no unresolved overrides, presets, etc.
 */ function getFreshConfig(cacheCharacteristics, loaderOptions, target, filename, inputSourceMap) {
    const hasReactCompiler = (()=>{
        if (loaderOptions.reactCompilerPlugins && loaderOptions.reactCompilerPlugins.length === 0) {
            return false;
        }
        if (loaderOptions.reactCompilerExclude && loaderOptions.reactCompilerExclude(filename)) {
            return false;
        }
        return true;
    })();
    const reactCompilerPluginsIfEnabled = hasReactCompiler ? loaderOptions.reactCompilerPlugins ?? [] : [];
    let { isServer, pagesDir, srcDir, development } = loaderOptions;
    let options = {
        babelrc: false,
        cloneInputAst: false,
        filename,
        inputSourceMap: inputSourceMap || undefined,
        // Ensure that Webpack will get a full absolute path in the sourcemap
        // so that it can properly map the module back to its internal cached
        // modules.
        sourceFileName: filename,
        sourceMaps: this.sourceMap
    };
    const baseCaller = {
        name: 'next-babel-turbo-loader',
        supportsStaticESM: true,
        supportsDynamicImport: true,
        // Provide plugins with insight into webpack target.
        // https://github.com/babel/babel-loader/issues/787
        target: target,
        // Webpack 5 supports TLA behind a flag. We enable it by default
        // for Babel, and then webpack will throw an error if the experimental
        // flag isn't enabled.
        supportsTopLevelAwait: true,
        isServer,
        srcDir,
        pagesDir,
        isDev: development,
        ...loaderOptions.caller
    };
    if (loaderOptions.transformMode === 'standalone') {
        options.plugins = [
            _pluginsyntaxjsx.default,
            ...reactCompilerPluginsIfEnabled
        ];
        options.presets = [
            [
                __turbopack_require__("[project]/node_modules/next/dist/compiled/babel/preset-typescript.js [app-rsc] (ecmascript)"),
                {
                    allowNamespaces: true
                }
            ]
        ];
        options.caller = baseCaller;
    } else {
        let { configFile, hasJsxRuntime } = loaderOptions;
        let customConfig = configFile ? getCustomBabelConfig(configFile) : undefined;
        checkCustomBabelConfigDeprecation(customConfig);
        // Set the default sourcemap behavior based on Webpack's mapping flag,
        // but allow users to override if they want.
        options.sourceMaps = loaderOptions.sourceMaps === undefined ? this.sourceMap : loaderOptions.sourceMaps;
        options.plugins = [
            ...getPlugins(loaderOptions, cacheCharacteristics),
            ...reactCompilerPluginsIfEnabled,
            ...(customConfig == null ? void 0 : customConfig.plugins) || []
        ];
        // target can be provided in babelrc
        options.target = isServer ? undefined : customConfig == null ? void 0 : customConfig.target;
        // env can be provided in babelrc
        options.env = customConfig == null ? void 0 : customConfig.env;
        options.presets = (()=>{
            // If presets is defined the user will have next/babel in their babelrc
            if (customConfig == null ? void 0 : customConfig.presets) {
                return customConfig.presets;
            }
            // If presets is not defined the user will likely have "env" in their babelrc
            if (customConfig) {
                return undefined;
            }
            // If no custom config is provided the default is to use next/babel
            return [
                'next/babel'
            ];
        })();
        options.overrides = loaderOptions.overrides;
        options.caller = {
            ...baseCaller,
            hasJsxRuntime
        };
    }
    // Babel does strict checks on the config so undefined is not allowed
    if (typeof options.target === 'undefined') {
        delete options.target;
    }
    Object.defineProperty(options.caller, 'onWarning', {
        enumerable: false,
        writable: false,
        value: (reason)=>{
            if (!(reason instanceof Error)) {
                reason = new Error(reason);
            }
            this.emitWarning(reason);
        }
    });
    const loadedOptions = (0, _core.loadOptions)(options);
    const config = (0, _util.consumeIterator)((0, _corelibconfig.default)(loadedOptions));
    return config;
}
/**
 * Each key returned here corresponds with a Babel config that can be shared.
 * The conditions of permissible sharing between files is dependent on specific
 * file attributes and Next.js compiler states: `CharacteristicsGermaneToCaching`.
 */ function getCacheKey(cacheCharacteristics) {
    const { isServer, isPageFile, isNextDist, hasModuleExports, fileExt } = cacheCharacteristics;
    const flags = 0 | (isServer ? 1 : 0) | (isPageFile ? 2 : 0) | (isNextDist ? 4 : 0) | (hasModuleExports ? 8 : 0);
    return fileExt + flags;
}
const configCache = new Map();
const configFiles = new Set();
function getConfig({ source, target, loaderOptions, filename, inputSourceMap }) {
    const cacheCharacteristics = getCacheCharacteristics(loaderOptions, source, filename);
    if (loaderOptions.transformMode === 'default' && loaderOptions.configFile) {
        // Ensures webpack invalidates the cache for this loader when the config file changes
        this.addDependency(loaderOptions.configFile);
    }
    const cacheKey = getCacheKey(cacheCharacteristics);
    if (configCache.has(cacheKey)) {
        const cachedConfig = configCache.get(cacheKey);
        return {
            ...cachedConfig,
            options: {
                ...cachedConfig.options,
                cwd: loaderOptions.cwd,
                root: loaderOptions.cwd,
                filename,
                sourceFileName: filename
            }
        };
    }
    if (loaderOptions.transformMode === 'default' && loaderOptions.configFile && !configFiles.has(loaderOptions.configFile)) {
        configFiles.add(loaderOptions.configFile);
        _log.info(`Using external babel configuration from ${loaderOptions.configFile}`);
    }
    const freshConfig = getFreshConfig.call(this, cacheCharacteristics, loaderOptions, target, filename, inputSourceMap);
    configCache.set(cacheKey, freshConfig);
    return freshConfig;
} //# sourceMappingURL=get-config.js.map
}}),
"[project]/node_modules/next/dist/build/babel/loader/transform.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
 * Partially adapted from @babel/core (MIT license).
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return transform;
    }
});
const _traverse = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/traverse.js [app-rsc] (ecmascript)"));
const _generator = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/generator.js [app-rsc] (ecmascript)"));
const _corelibnormalizefile = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core-lib-normalize-file.js [app-rsc] (ecmascript)"));
const _corelibnormalizeopts = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core-lib-normalize-opts.js [app-rsc] (ecmascript)"));
const _corelibblockhoistplugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core-lib-block-hoist-plugin.js [app-rsc] (ecmascript)"));
const _corelibpluginpass = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/babel/core-lib-plugin-pass.js [app-rsc] (ecmascript)"));
const _getconfig = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/babel/loader/get-config.js [app-rsc] (ecmascript)"));
const _util = __turbopack_require__("[project]/node_modules/next/dist/build/babel/loader/util.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getTraversalParams(file, pluginPairs) {
    const passPairs = [];
    const passes = [];
    const visitors = [];
    for (const plugin of pluginPairs.concat((0, _corelibblockhoistplugin.default)())){
        const pass = new _corelibpluginpass.default(file, plugin.key, plugin.options);
        passPairs.push([
            plugin,
            pass
        ]);
        passes.push(pass);
        visitors.push(plugin.visitor);
    }
    return {
        passPairs,
        passes,
        visitors
    };
}
function invokePluginPre(file, passPairs) {
    for (const [{ pre }, pass] of passPairs){
        if (pre) {
            pre.call(pass, file);
        }
    }
}
function invokePluginPost(file, passPairs) {
    for (const [{ post }, pass] of passPairs){
        if (post) {
            post.call(pass, file);
        }
    }
}
function transformAstPass(file, pluginPairs, parentSpan) {
    const { passPairs, passes, visitors } = getTraversalParams(file, pluginPairs);
    invokePluginPre(file, passPairs);
    const visitor = _traverse.default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);
    parentSpan.traceChild('babel-turbo-traverse').traceFn(()=>(0, _traverse.default)(file.ast, visitor, file.scope));
    invokePluginPost(file, passPairs);
}
function transformAst(file, babelConfig, parentSpan) {
    for (const pluginPairs of babelConfig.passes){
        transformAstPass(file, pluginPairs, parentSpan);
    }
}
function transform(source, inputSourceMap, loaderOptions, filename, target, parentSpan) {
    const getConfigSpan = parentSpan.traceChild('babel-turbo-get-config');
    const babelConfig = _getconfig.default.call(this, {
        source,
        loaderOptions,
        inputSourceMap,
        target,
        filename
    });
    getConfigSpan.stop();
    const normalizeSpan = parentSpan.traceChild('babel-turbo-normalize-file');
    const file = (0, _util.consumeIterator)((0, _corelibnormalizefile.default)(babelConfig.passes, (0, _corelibnormalizeopts.default)(babelConfig), source));
    normalizeSpan.stop();
    const transformSpan = parentSpan.traceChild('babel-turbo-transform');
    transformAst(file, babelConfig, transformSpan);
    transformSpan.stop();
    const generateSpan = parentSpan.traceChild('babel-turbo-generate');
    const { code, map } = (0, _generator.default)(file.ast, file.opts.generatorOpts, file.code);
    generateSpan.stop();
    return {
        code,
        map
    };
} //# sourceMappingURL=transform.js.map
}}),
"[project]/node_modules/next/dist/build/babel/loader/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _transform = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/babel/loader/transform.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function nextBabelLoader(parentTrace, inputSource, inputSourceMap) {
    const filename = this.resourcePath;
    // Ensure `.d.ts` are not processed.
    if (filename.endsWith('.d.ts')) {
        return [
            inputSource,
            inputSourceMap
        ];
    }
    const target = this.target;
    const loaderOptions = parentTrace.traceChild('get-options') // @ts-ignore TODO: remove ignore once webpack 5 types are used
    .traceFn(()=>this.getOptions());
    if (loaderOptions.exclude && loaderOptions.exclude(filename)) {
        return [
            inputSource,
            inputSourceMap
        ];
    }
    const loaderSpanInner = parentTrace.traceChild('next-babel-turbo-transform');
    const { code: transformedSource, map: outputSourceMap } = loaderSpanInner.traceFn(()=>_transform.default.call(this, inputSource, inputSourceMap, loaderOptions, filename, target, loaderSpanInner));
    return [
        transformedSource,
        outputSourceMap
    ];
}
const nextBabelLoaderOuter = function nextBabelLoaderOuter(inputSource, inputSourceMap) {
    const callback = this.async();
    const loaderSpan = this.currentTraceSpan.traceChild('next-babel-turbo-loader');
    loaderSpan.traceAsyncFn(()=>nextBabelLoader.call(this, loaderSpan, inputSource, inputSourceMap)).then(([transformedSource, outputSourceMap])=>callback == null ? void 0 : callback(null, transformedSource, outputSourceMap || inputSourceMap), (err)=>{
        callback == null ? void 0 : callback(err);
    });
};
const _default = nextBabelLoaderOuter; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/get-babel-loader-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getBabelLoader: null,
    getReactCompilerLoader: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getBabelLoader: function() {
        return getBabelLoader;
    },
    getReactCompilerLoader: function() {
        return getReactCompilerLoader;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getReactCompiler() {
    try {
        // It's in peerDependencies, so it should be available
        // eslint-disable-next-line import/no-extraneous-dependencies
        return (()=>{
            const e = new Error("Cannot find module 'babel-plugin-react-compiler'");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })();
    } catch  {
        throw new Error('Failed to load the `babel-plugin-react-compiler`. It is required to use the React Compiler. Please install it.');
    }
}
const getReactCompilerPlugins = (options, isDev, isServer)=>{
    if (!options || isServer) {
        return undefined;
    }
    const compilerOptions = typeof options === 'boolean' ? {} : options;
    if (options) {
        return [
            [
                getReactCompiler(),
                {
                    panicThreshold: isDev ? undefined : 'NONE',
                    ...compilerOptions
                }
            ]
        ];
    }
    return undefined;
};
const getBabelLoader = (useSWCLoader, babelConfigFile, isServer, distDir, pagesDir, cwd, srcDir, dev, isClient, reactCompilerOptions, reactCompilerExclude)=>{
    if (!useSWCLoader) {
        return {
            loader: "[project]/node_modules/next/dist/build/babel/loader/index.js [app-rsc] (ecmascript)",
            options: {
                transformMode: 'default',
                configFile: babelConfigFile,
                isServer,
                distDir,
                pagesDir,
                cwd,
                srcDir: _path.default.dirname(srcDir),
                development: dev,
                hasReactRefresh: dev && isClient,
                hasJsxRuntime: true,
                reactCompilerPlugins: getReactCompilerPlugins(reactCompilerOptions, dev, isServer),
                reactCompilerExclude
            }
        };
    }
    return undefined;
};
/**
 * Get a separate babel loader for the react compiler, only used if Babel is not
 * configured through e.g. .babelrc. If user have babel config, this should be configured in the babel loader itself.
 * Note from react compiler:
 * > For best results, compiler must run as the first plugin in your Babel pipeline so it receives input as close to the original source as possible.
 */ const getReactCompilerLoader = (options, cwd, isDev, isServer, reactCompilerExclude)=>{
    const reactCompilerPlugins = getReactCompilerPlugins(options, isDev, isServer);
    if (!reactCompilerPlugins) {
        return undefined;
    }
    const config = {
        loader: "[project]/node_modules/next/dist/build/babel/loader/index.js [app-rsc] (ecmascript)",
        options: {
            transformMode: 'standalone',
            cwd,
            reactCompilerPlugins
        }
    };
    if (reactCompilerExclude) {
        config.options.reactCompilerExclude = reactCompilerExclude;
    }
    return config;
}; //# sourceMappingURL=get-babel-loader-config.js.map
}}),
"[project]/node_modules/next/dist/build/load-jsconfig.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    parseJsonFile: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return loadJsConfig;
    },
    parseJsonFile: function() {
        return parseJsonFile;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _fs = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[externals]/fs [external] (fs, cjs)"));
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
const _getTypeScriptConfiguration = __turbopack_require__("[project]/node_modules/next/dist/lib/typescript/getTypeScriptConfiguration.js [app-rsc] (ecmascript)");
const _iserror = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/lib/is-error.js [app-rsc] (ecmascript)"));
const _hasnecessarydependencies = __turbopack_require__("[project]/node_modules/next/dist/lib/has-necessary-dependencies.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
let TSCONFIG_WARNED = false;
function parseJsonFile(filePath) {
    const JSON5 = __turbopack_require__("[project]/node_modules/next/dist/compiled/json5/index.js [app-rsc] (ecmascript)");
    const contents = (0, _fs.readFileSync)(filePath, 'utf8');
    // Special case an empty file
    if (contents.trim() === '') {
        return {};
    }
    try {
        return JSON5.parse(contents);
    } catch (err) {
        if (!(0, _iserror.default)(err)) throw err;
        const { codeFrameColumns } = __turbopack_require__("[project]/node_modules/next/dist/compiled/babel/code-frame.js [app-rsc] (ecmascript)");
        const codeFrame = codeFrameColumns(String(contents), {
            start: {
                line: err.lineNumber || 0,
                column: err.columnNumber || 0
            }
        }, {
            message: err.message,
            highlightCode: true
        });
        throw new Error(`Failed to parse "${filePath}":\n${codeFrame}`);
    }
}
async function loadJsConfig(dir, config) {
    var _jsConfig_compilerOptions;
    let typeScriptPath;
    try {
        const deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(dir, [
            {
                pkg: 'typescript',
                file: 'typescript/lib/typescript.js',
                exportsRestrict: true
            }
        ]);
        typeScriptPath = deps.resolved.get('typescript');
    } catch  {}
    const tsConfigPath = _path.default.join(dir, config.typescript.tsconfigPath);
    const useTypeScript = Boolean(typeScriptPath && _fs.default.existsSync(tsConfigPath));
    let implicitBaseurl;
    let jsConfig;
    // jsconfig is a subset of tsconfig
    if (useTypeScript) {
        if (config.typescript.tsconfigPath !== 'tsconfig.json' && TSCONFIG_WARNED === false) {
            TSCONFIG_WARNED = true;
            _log.info(`Using tsconfig file: ${config.typescript.tsconfigPath}`);
        }
        const ts = await Promise.resolve((()=>{
            const e = new Error("Cannot find module as expression is too dynamic");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })());
        const tsConfig = await (0, _getTypeScriptConfiguration.getTypeScriptConfiguration)(ts, tsConfigPath, true);
        jsConfig = {
            compilerOptions: tsConfig.options
        };
        implicitBaseurl = _path.default.dirname(tsConfigPath);
    }
    const jsConfigPath = _path.default.join(dir, 'jsconfig.json');
    if (!useTypeScript && _fs.default.existsSync(jsConfigPath)) {
        jsConfig = parseJsonFile(jsConfigPath);
        implicitBaseurl = _path.default.dirname(jsConfigPath);
    }
    let resolvedBaseUrl;
    if (jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.baseUrl) {
        resolvedBaseUrl = {
            baseUrl: _path.default.resolve(dir, jsConfig.compilerOptions.baseUrl),
            isImplicit: false
        };
    } else {
        if (implicitBaseurl) {
            resolvedBaseUrl = {
                baseUrl: implicitBaseurl,
                isImplicit: true
            };
        }
    }
    return {
        useTypeScript,
        jsConfig,
        resolvedBaseUrl
    };
} //# sourceMappingURL=load-jsconfig.js.map
}}),
"[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* eslint-disable @typescript-eslint/no-use-before-define */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    createDefineEnv: null,
    getBinaryMetadata: null,
    getSupportedArchTriples: null,
    initCustomTraceSubscriber: null,
    initHeapProfiler: null,
    isWasm: null,
    loadBindings: null,
    lockfilePatchPromise: null,
    minify: null,
    parse: null,
    teardownHeapProfiler: null,
    teardownTraceSubscriber: null,
    transform: null,
    transformSync: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createDefineEnv: function() {
        return createDefineEnv;
    },
    getBinaryMetadata: function() {
        return getBinaryMetadata;
    },
    getSupportedArchTriples: function() {
        return getSupportedArchTriples;
    },
    initCustomTraceSubscriber: function() {
        return initCustomTraceSubscriber;
    },
    initHeapProfiler: function() {
        return initHeapProfiler;
    },
    isWasm: function() {
        return isWasm;
    },
    loadBindings: function() {
        return loadBindings;
    },
    lockfilePatchPromise: function() {
        return lockfilePatchPromise;
    },
    minify: function() {
        return minify;
    },
    parse: function() {
        return parse;
    },
    teardownHeapProfiler: function() {
        return teardownHeapProfiler;
    },
    teardownTraceSubscriber: function() {
        return teardownTraceSubscriber;
    },
    transform: function() {
        return transform;
    },
    transformSync: function() {
        return transformSync;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _url = __turbopack_require__("[externals]/url [external] (url, cjs)");
const _os = __turbopack_require__("[externals]/os [external] (os, cjs)");
const _triples = __turbopack_require__("[project]/node_modules/next/dist/compiled/@napi-rs/triples/index.js [app-rsc] (ecmascript)");
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
const _options = __turbopack_require__("[project]/node_modules/next/dist/build/swc/options.js [app-rsc] (ecmascript)");
const _swcloadfailure = __turbopack_require__("[project]/node_modules/next/dist/telemetry/events/swc-load-failure.js [app-rsc] (ecmascript)");
const _patchincorrectlockfile = __turbopack_require__("[project]/node_modules/next/dist/lib/patch-incorrect-lockfile.js [app-rsc] (ecmascript)");
const _downloadswc = __turbopack_require__("[project]/node_modules/next/dist/lib/download-swc.js [app-rsc] (ecmascript)");
const _util = __turbopack_require__("[externals]/util [external] (util, cjs)");
const _defineenvplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/define-env-plugin.js [app-rsc] (ecmascript)");
const _getbabelloaderconfig = __turbopack_require__("[project]/node_modules/next/dist/build/get-babel-loader-config.js [app-rsc] (ecmascript)");
const _turbopackutils = __turbopack_require__("[project]/node_modules/next/dist/server/dev/turbopack-utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const nextVersion = "15.1.4";
const ArchName = (0, _os.arch)();
const PlatformName = (0, _os.platform)();
function infoLog(...args) {
    if (process.env.NEXT_PRIVATE_BUILD_WORKER) {
        return;
    }
    if (process.env.DEBUG) {
        _log.info(...args);
    }
}
function getSupportedArchTriples() {
    const { darwin, win32, linux, freebsd, android } = _triples.platformArchTriples;
    return {
        darwin,
        win32: {
            arm64: win32.arm64,
            ia32: win32.ia32.filter((triple)=>triple.abi === 'msvc'),
            x64: win32.x64.filter((triple)=>triple.abi === 'msvc')
        },
        linux: {
            // linux[x64] includes `gnux32` abi, with x64 arch.
            x64: linux.x64.filter((triple)=>triple.abi !== 'gnux32'),
            arm64: linux.arm64,
            // This target is being deprecated, however we keep it in `knownDefaultWasmFallbackTriples` for now
            arm: linux.arm
        },
        // Below targets are being deprecated, however we keep it in `knownDefaultWasmFallbackTriples` for now
        freebsd: {
            x64: freebsd.x64
        },
        android: {
            arm64: android.arm64,
            arm: android.arm
        }
    };
}
const triples = (()=>{
    var _supportedArchTriples_PlatformName, _platformArchTriples_PlatformName;
    const supportedArchTriples = getSupportedArchTriples();
    const targetTriple = (_supportedArchTriples_PlatformName = supportedArchTriples[PlatformName]) == null ? void 0 : _supportedArchTriples_PlatformName[ArchName];
    // If we have supported triple, return it right away
    if (targetTriple) {
        return targetTriple;
    }
    // If there isn't corresponding target triple in `supportedArchTriples`, check if it's excluded from original raw triples
    // Otherwise, it is completely unsupported platforms.
    let rawTargetTriple = (_platformArchTriples_PlatformName = _triples.platformArchTriples[PlatformName]) == null ? void 0 : _platformArchTriples_PlatformName[ArchName];
    if (rawTargetTriple) {
        _log.warn(`Trying to load next-swc for target triple ${rawTargetTriple}, but there next-swc does not have native bindings support`);
    } else {
        _log.warn(`Trying to load next-swc for unsupported platforms ${PlatformName}/${ArchName}`);
    }
    return [];
})();
// Allow to specify an absolute path to the custom turbopack binary to load.
// If one of env variables is set, `loadNative` will try to use specified
// binary instead. This is thin, naive interface
// - `loadBindings` will not validate neither path nor the binary.
//
// Note these are internal flag: there's no stability, feature guarantee.
const __INTERNAL_CUSTOM_TURBOPACK_BINDINGS = process.env.__INTERNAL_CUSTOM_TURBOPACK_BINDINGS;
function checkVersionMismatch(pkgData) {
    const version = pkgData.version;
    if (version && version !== nextVersion) {
        _log.warn(`Mismatching @next/swc version, detected: ${version} while Next.js is on ${nextVersion}. Please ensure these match`);
    }
}
// These are the platforms we'll try to load wasm bindings first,
// only try to load native bindings if loading wasm binding somehow fails.
// Fallback to native binding is for migration period only,
// once we can verify loading-wasm-first won't cause visible regressions,
// we'll not include native bindings for these platform at all.
const knownDefaultWasmFallbackTriples = [
    'x86_64-unknown-freebsd',
    'aarch64-linux-android',
    'arm-linux-androideabi',
    'armv7-unknown-linux-gnueabihf',
    'i686-pc-windows-msvc'
];
// The last attempt's error code returned when cjs require to native bindings fails.
// If node.js throws an error without error code, this should be `unknown` instead of undefined.
// For the wasm-first targets (`knownDefaultWasmFallbackTriples`) this will be `unsupported_target`.
let lastNativeBindingsLoadErrorCode = undefined;
let nativeBindings;
let wasmBindings;
let downloadWasmPromise;
let pendingBindings;
let swcTraceFlushGuard;
let swcHeapProfilerFlushGuard;
let downloadNativeBindingsPromise = undefined;
const lockfilePatchPromise = {};
async function loadBindings(useWasmBinary = false) {
    // Increase Rust stack size as some npm packages being compiled need more than the default.
    if (!process.env.RUST_MIN_STACK) {
        process.env.RUST_MIN_STACK = '8388608';
    }
    if (pendingBindings) {
        return pendingBindings;
    }
    // rust needs stdout to be blocking, otherwise it will throw an error (on macOS at least) when writing a lot of data (logs) to it
    // see https://github.com/napi-rs/napi-rs/issues/1630
    // and https://github.com/nodejs/node/blob/main/doc/api/process.md#a-note-on-process-io
    if (process.stdout._handle != null) {
        // @ts-ignore
        process.stdout._handle.setBlocking == null ? void 0 : process.stdout._handle.setBlocking.call(process.stdout._handle, true);
    }
    if (process.stderr._handle != null) {
        // @ts-ignore
        process.stderr._handle.setBlocking == null ? void 0 : process.stderr._handle.setBlocking.call(process.stderr._handle, true);
    }
    pendingBindings = new Promise(async (resolve, _reject)=>{
        if (!lockfilePatchPromise.cur) {
            // always run lockfile check once so that it gets patched
            // even if it doesn't fail to load locally
            lockfilePatchPromise.cur = (0, _patchincorrectlockfile.patchIncorrectLockfile)(process.cwd()).catch(console.error);
        }
        let attempts = [];
        const disableWasmFallback = process.env.NEXT_DISABLE_SWC_WASM;
        const unsupportedPlatform = triples.some((triple)=>!!(triple == null ? void 0 : triple.raw) && knownDefaultWasmFallbackTriples.includes(triple.raw));
        const isWebContainer = process.versions.webcontainer;
        // Normal execution relies on the param `useWasmBinary` flag to load, but
        // in certain cases where there isn't a native binary we always load wasm fallback first.
        const shouldLoadWasmFallbackFirst = !disableWasmFallback && useWasmBinary || unsupportedPlatform || isWebContainer;
        if (!unsupportedPlatform && useWasmBinary) {
            _log.warn(`experimental.useWasmBinary is not an option for supported platform ${PlatformName}/${ArchName} and will be ignored.`);
        }
        if (shouldLoadWasmFallbackFirst) {
            lastNativeBindingsLoadErrorCode = 'unsupported_target';
            const fallbackBindings = await tryLoadWasmWithFallback(attempts);
            if (fallbackBindings) {
                return resolve(fallbackBindings);
            }
        }
        // Trickle down loading `fallback` bindings:
        //
        // - First, try to load native bindings installed in node_modules.
        // - If that fails with `ERR_MODULE_NOT_FOUND`, treat it as case of https://github.com/npm/cli/issues/4828
        // that host system where generated package lock is not matching to the guest system running on, try to manually
        // download corresponding target triple and load it. This won't be triggered if native bindings are failed to load
        // with other reasons than `ERR_MODULE_NOT_FOUND`.
        // - Lastly, falls back to wasm binding where possible.
        try {
            return resolve(loadNative());
        } catch (a) {
            if (Array.isArray(a) && a.every((m)=>m.includes('it was not installed'))) {
                let fallbackBindings = await tryLoadNativeWithFallback(attempts);
                if (fallbackBindings) {
                    return resolve(fallbackBindings);
                }
            }
            attempts = attempts.concat(a);
        }
        // For these platforms we already tried to load wasm and failed, skip reattempt
        if (!shouldLoadWasmFallbackFirst && !disableWasmFallback) {
            const fallbackBindings = await tryLoadWasmWithFallback(attempts);
            if (fallbackBindings) {
                return resolve(fallbackBindings);
            }
        }
        logLoadFailure(attempts, true);
    });
    return pendingBindings;
}
async function tryLoadNativeWithFallback(attempts) {
    const nativeBindingsDirectory = _path.default.join(_path.default.dirname("[project]/node_modules/next/package.json (json)"), 'next-swc-fallback');
    if (!downloadNativeBindingsPromise) {
        downloadNativeBindingsPromise = (0, _downloadswc.downloadNativeNextSwc)(nextVersion, nativeBindingsDirectory, triples.map((triple)=>triple.platformArchABI));
    }
    await downloadNativeBindingsPromise;
    try {
        return loadNative(nativeBindingsDirectory);
    } catch (a) {
        attempts.push(...[].concat(a));
    }
    return undefined;
}
async function tryLoadWasmWithFallback(attempts) {
    try {
        let bindings = await loadWasm('');
        // @ts-expect-error TODO: this event has a wrong type.
        (0, _swcloadfailure.eventSwcLoadFailure)({
            wasm: 'enabled',
            nativeBindingsErrorCode: lastNativeBindingsLoadErrorCode
        });
        return bindings;
    } catch (a) {
        attempts.push(...[].concat(a));
    }
    try {
        // if not installed already download wasm package on-demand
        // we download to a custom directory instead of to node_modules
        // as node_module import attempts are cached and can't be re-attempted
        // x-ref: https://github.com/nodejs/modules/issues/307
        const wasmDirectory = _path.default.join(_path.default.dirname("[project]/node_modules/next/package.json (json)"), 'wasm');
        if (!downloadWasmPromise) {
            downloadWasmPromise = (0, _downloadswc.downloadWasmSwc)(nextVersion, wasmDirectory);
        }
        await downloadWasmPromise;
        let bindings = await loadWasm(wasmDirectory);
        // @ts-expect-error TODO: this event has a wrong type.
        (0, _swcloadfailure.eventSwcLoadFailure)({
            wasm: 'fallback',
            nativeBindingsErrorCode: lastNativeBindingsLoadErrorCode
        });
        // still log native load attempts so user is
        // aware it failed and should be fixed
        for (const attempt of attempts){
            _log.warn(attempt);
        }
        return bindings;
    } catch (a) {
        attempts.push(...[].concat(a));
    }
}
function loadBindingsSync() {
    let attempts = [];
    try {
        return loadNative();
    } catch (a) {
        attempts = attempts.concat(a);
    }
    // we can leverage the wasm bindings if they are already
    // loaded
    if (wasmBindings) {
        return wasmBindings;
    }
    logLoadFailure(attempts);
    throw new Error('Failed to load bindings', {
        cause: attempts
    });
}
let loggingLoadFailure = false;
function logLoadFailure(attempts, triedWasm = false) {
    // make sure we only emit the event and log the failure once
    if (loggingLoadFailure) return;
    loggingLoadFailure = true;
    for (let attempt of attempts){
        _log.warn(attempt);
    }
    // @ts-expect-error TODO: this event has a wrong type.
    (0, _swcloadfailure.eventSwcLoadFailure)({
        wasm: triedWasm ? 'failed' : undefined,
        nativeBindingsErrorCode: lastNativeBindingsLoadErrorCode
    }).then(()=>lockfilePatchPromise.cur || Promise.resolve()).finally(()=>{
        _log.error(`Failed to load SWC binary for ${PlatformName}/${ArchName}, see more info here: https://nextjs.org/docs/messages/failed-loading-swc`);
        process.exit(1);
    });
}
function createDefineEnv({ isTurbopack, clientRouterFilters, config, dev, distDir, fetchCacheKeyPrefix, hasRewrites, middlewareMatchers }) {
    let defineEnv = {
        client: [],
        edge: [],
        nodejs: []
    };
    for (const variant of Object.keys(defineEnv)){
        defineEnv[variant] = rustifyEnv((0, _defineenvplugin.getDefineEnv)({
            isTurbopack,
            clientRouterFilters,
            config,
            dev,
            distDir,
            fetchCacheKeyPrefix,
            hasRewrites,
            isClient: variant === 'client',
            isEdgeServer: variant === 'edge',
            isNodeOrEdgeCompilation: variant === 'nodejs' || variant === 'edge',
            isNodeServer: variant === 'nodejs',
            middlewareMatchers
        }));
    }
    return defineEnv;
}
function rustifyEnv(env) {
    return Object.entries(env).filter(([_, value])=>value != null).map(([name, value])=>({
            name,
            value
        }));
}
// TODO(sokra) Support wasm option.
function bindingToApi(binding, _wasm) {
    const cancel = new class Cancel extends Error {
    }();
    /**
   * Utility function to ensure all variants of an enum are handled.
   */ function invariant(never, computeMessage) {
        throw new Error(`Invariant: ${computeMessage(never)}`);
    }
    async function withErrorCause(fn) {
        try {
            return await fn();
        } catch (nativeError) {
            throw new _turbopackutils.TurbopackInternalError(nativeError);
        }
    }
    /**
   * Calls a native function and streams the result.
   * If useBuffer is true, all values will be preserved, potentially buffered
   * if consumed slower than produced. Else, only the latest value will be
   * preserved.
   */ function subscribe(useBuffer, nativeFunction) {
        // A buffer of produced items. This will only contain values if the
        // consumer is slower than the producer.
        let buffer = [];
        // A deferred value waiting for the next produced item. This will only
        // exist if the consumer is faster than the producer.
        let waiting;
        let canceled = false;
        // The native function will call this every time it emits a new result. We
        // either need to notify a waiting consumer, or buffer the new result until
        // the consumer catches up.
        function emitResult(err, value) {
            if (waiting) {
                let { resolve, reject } = waiting;
                waiting = undefined;
                if (err) reject(err);
                else resolve(value);
            } else {
                const item = {
                    err,
                    value
                };
                if (useBuffer) buffer.push(item);
                else buffer[0] = item;
            }
        }
        async function* createIterator() {
            const task = await withErrorCause(()=>nativeFunction(emitResult));
            try {
                while(!canceled){
                    if (buffer.length > 0) {
                        const item = buffer.shift();
                        if (item.err) throw item.err;
                        yield item.value;
                    } else {
                        // eslint-disable-next-line no-loop-func
                        yield new Promise((resolve, reject)=>{
                            waiting = {
                                resolve,
                                reject
                            };
                        });
                    }
                }
            } catch (e) {
                if (e === cancel) return;
                if (e instanceof Error) {
                    throw new _turbopackutils.TurbopackInternalError(e);
                }
                throw e;
            } finally{
                if (task) {
                    binding.rootTaskDispose(task);
                }
            }
        }
        const iterator = createIterator();
        iterator.return = async ()=>{
            canceled = true;
            if (waiting) waiting.reject(cancel);
            return {
                value: undefined,
                done: true
            };
        };
        return iterator;
    }
    async function rustifyProjectOptions(options) {
        return {
            ...options,
            nextConfig: await serializeNextConfig(options.nextConfig, options.projectPath),
            jsConfig: JSON.stringify(options.jsConfig),
            env: rustifyEnv(options.env)
        };
    }
    async function rustifyPartialProjectOptions(options) {
        return {
            ...options,
            nextConfig: options.nextConfig && await serializeNextConfig(options.nextConfig, options.projectPath),
            jsConfig: options.jsConfig && JSON.stringify(options.jsConfig),
            env: options.env && rustifyEnv(options.env)
        };
    }
    class ProjectImpl {
        constructor(nativeProject){
            this._nativeProject = nativeProject;
        }
        async update(options) {
            await withErrorCause(async ()=>binding.projectUpdate(this._nativeProject, await rustifyPartialProjectOptions(options)));
        }
        entrypointsSubscribe() {
            const subscription = subscribe(false, async (callback)=>binding.projectEntrypointsSubscribe(this._nativeProject, callback));
            return async function*() {
                for await (const entrypoints of subscription){
                    const routes = new Map();
                    for (const { pathname, ...nativeRoute } of entrypoints.routes){
                        let route;
                        const routeType = nativeRoute.type;
                        switch(routeType){
                            case 'page':
                                route = {
                                    type: 'page',
                                    htmlEndpoint: new EndpointImpl(nativeRoute.htmlEndpoint),
                                    dataEndpoint: new EndpointImpl(nativeRoute.dataEndpoint)
                                };
                                break;
                            case 'page-api':
                                route = {
                                    type: 'page-api',
                                    endpoint: new EndpointImpl(nativeRoute.endpoint)
                                };
                                break;
                            case 'app-page':
                                route = {
                                    type: 'app-page',
                                    pages: nativeRoute.pages.map((page)=>({
                                            originalName: page.originalName,
                                            htmlEndpoint: new EndpointImpl(page.htmlEndpoint),
                                            rscEndpoint: new EndpointImpl(page.rscEndpoint)
                                        }))
                                };
                                break;
                            case 'app-route':
                                route = {
                                    type: 'app-route',
                                    originalName: nativeRoute.originalName,
                                    endpoint: new EndpointImpl(nativeRoute.endpoint)
                                };
                                break;
                            case 'conflict':
                                route = {
                                    type: 'conflict'
                                };
                                break;
                            default:
                                const _exhaustiveCheck = routeType;
                                invariant(nativeRoute, ()=>`Unknown route type: ${_exhaustiveCheck}`);
                        }
                        routes.set(pathname, route);
                    }
                    const napiMiddlewareToMiddleware = (middleware)=>({
                            endpoint: new EndpointImpl(middleware.endpoint),
                            runtime: middleware.runtime,
                            matcher: middleware.matcher
                        });
                    const middleware = entrypoints.middleware ? napiMiddlewareToMiddleware(entrypoints.middleware) : undefined;
                    const napiInstrumentationToInstrumentation = (instrumentation)=>({
                            nodeJs: new EndpointImpl(instrumentation.nodeJs),
                            edge: new EndpointImpl(instrumentation.edge)
                        });
                    const instrumentation = entrypoints.instrumentation ? napiInstrumentationToInstrumentation(entrypoints.instrumentation) : undefined;
                    yield {
                        routes,
                        middleware,
                        instrumentation,
                        pagesDocumentEndpoint: new EndpointImpl(entrypoints.pagesDocumentEndpoint),
                        pagesAppEndpoint: new EndpointImpl(entrypoints.pagesAppEndpoint),
                        pagesErrorEndpoint: new EndpointImpl(entrypoints.pagesErrorEndpoint),
                        issues: entrypoints.issues,
                        diagnostics: entrypoints.diagnostics
                    };
                }
            }();
        }
        hmrEvents(identifier) {
            return subscribe(true, async (callback)=>binding.projectHmrEvents(this._nativeProject, identifier, callback));
        }
        hmrIdentifiersSubscribe() {
            return subscribe(false, async (callback)=>binding.projectHmrIdentifiersSubscribe(this._nativeProject, callback));
        }
        traceSource(stackFrame) {
            return binding.projectTraceSource(this._nativeProject, stackFrame);
        }
        getSourceForAsset(filePath) {
            return binding.projectGetSourceForAsset(this._nativeProject, filePath);
        }
        getSourceMap(filePath) {
            return binding.projectGetSourceMap(this._nativeProject, filePath);
        }
        getSourceMapSync(filePath) {
            return binding.projectGetSourceMapSync(this._nativeProject, filePath);
        }
        updateInfoSubscribe(aggregationMs) {
            return subscribe(true, async (callback)=>binding.projectUpdateInfoSubscribe(this._nativeProject, aggregationMs, callback));
        }
        shutdown() {
            return binding.projectShutdown(this._nativeProject);
        }
        onExit() {
            return binding.projectOnExit(this._nativeProject);
        }
    }
    class EndpointImpl {
        constructor(nativeEndpoint){
            this._nativeEndpoint = nativeEndpoint;
        }
        async writeToDisk() {
            return await withErrorCause(()=>binding.endpointWriteToDisk(this._nativeEndpoint));
        }
        async clientChanged() {
            const clientSubscription = subscribe(false, async (callback)=>binding.endpointClientChangedSubscribe(await this._nativeEndpoint, callback));
            await clientSubscription.next();
            return clientSubscription;
        }
        async serverChanged(includeIssues) {
            const serverSubscription = subscribe(false, async (callback)=>binding.endpointServerChangedSubscribe(await this._nativeEndpoint, includeIssues, callback));
            await serverSubscription.next();
            return serverSubscription;
        }
    }
    /**
   * Returns a new copy of next.js config object to avoid mutating the original.
   *
   * Also it does some augmentation to the configuration as well, for example set the
   * turbopack's rules if `experimental.reactCompilerOptions` is set.
   */ function augmentNextConfig(originalNextConfig, projectPath) {
        var _nextConfig_experimental;
        let nextConfig = {
            ...originalNextConfig
        };
        const reactCompilerOptions = (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.reactCompiler;
        // It is not easy to set the rules inside of rust as resolving, and passing the context identical to the webpack
        // config is bit hard, also we can reuse same codes between webpack config in here.
        if (reactCompilerOptions) {
            var _nextConfig_experimental_turbo, _nextConfig_experimental1;
            const ruleKeys = [
                '*.ts',
                '*.js',
                '*.jsx',
                '*.tsx'
            ];
            if (Object.keys((nextConfig == null ? void 0 : (_nextConfig_experimental1 = nextConfig.experimental) == null ? void 0 : (_nextConfig_experimental_turbo = _nextConfig_experimental1.turbo) == null ? void 0 : _nextConfig_experimental_turbo.rules) ?? []).some((key)=>ruleKeys.includes(key))) {
                _log.warn(`The React Compiler cannot be enabled automatically because 'experimental.turbo' contains a rule for '*.ts', '*.js', '*.jsx', and '*.tsx'. Remove this rule, or add 'babel-loader' and 'babel-plugin-react-compiler' to the Turbopack configuration manually.`);
            } else {
                if (!nextConfig.experimental.turbo) {
                    nextConfig.experimental.turbo = {};
                }
                if (!nextConfig.experimental.turbo.rules) {
                    nextConfig.experimental.turbo.rules = {};
                }
                for (const key of [
                    '*.ts',
                    '*.js',
                    '*.jsx',
                    '*.tsx'
                ]){
                    nextConfig.experimental.turbo.rules[key] = {
                        browser: {
                            foreign: false,
                            loaders: [
                                (0, _getbabelloaderconfig.getReactCompilerLoader)(originalNextConfig.experimental.reactCompiler, projectPath, nextConfig.dev, false, undefined)
                            ]
                        }
                    };
                }
            }
        }
        return nextConfig;
    }
    async function serializeNextConfig(nextConfig, projectPath) {
        var _nextConfigSerializable_experimental_turbo, _nextConfigSerializable_experimental;
        // Avoid mutating the existing `nextConfig` object.
        let nextConfigSerializable = augmentNextConfig(nextConfig, projectPath);
        nextConfigSerializable.generateBuildId = await (nextConfig.generateBuildId == null ? void 0 : nextConfig.generateBuildId.call(nextConfig));
        // TODO: these functions takes arguments, have to be supported in a different way
        nextConfigSerializable.exportPathMap = {};
        nextConfigSerializable.webpack = nextConfig.webpack && {};
        if ((_nextConfigSerializable_experimental = nextConfigSerializable.experimental) == null ? void 0 : (_nextConfigSerializable_experimental_turbo = _nextConfigSerializable_experimental.turbo) == null ? void 0 : _nextConfigSerializable_experimental_turbo.rules) {
            var _nextConfigSerializable_experimental_turbo1;
            ensureLoadersHaveSerializableOptions((_nextConfigSerializable_experimental_turbo1 = nextConfigSerializable.experimental.turbo) == null ? void 0 : _nextConfigSerializable_experimental_turbo1.rules);
        }
        nextConfigSerializable.modularizeImports = nextConfigSerializable.modularizeImports ? Object.fromEntries(Object.entries(nextConfigSerializable.modularizeImports).map(([mod, config])=>[
                mod,
                {
                    ...config,
                    transform: typeof config.transform === 'string' ? config.transform : Object.entries(config.transform).map(([key, value])=>[
                            key,
                            value
                        ])
                }
            ])) : undefined;
        // loaderFile is an absolute path, we need it to be relative for turbopack.
        if (nextConfigSerializable.images.loaderFile) {
            nextConfigSerializable.images = {
                ...nextConfig.images,
                loaderFile: './' + _path.default.relative(projectPath, nextConfig.images.loaderFile)
            };
        }
        return JSON.stringify(nextConfigSerializable, null, 2);
    }
    function ensureLoadersHaveSerializableOptions(turbopackRules) {
        for (const [glob, rule] of Object.entries(turbopackRules)){
            if (Array.isArray(rule)) {
                checkLoaderItems(rule, glob);
            } else {
                checkConfigItem(rule, glob);
            }
        }
        function checkConfigItem(rule, glob) {
            if (!rule) return;
            if ('loaders' in rule) {
                checkLoaderItems(rule.loaders, glob);
            } else {
                for(const key in rule){
                    const inner = rule[key];
                    if (typeof inner === 'object' && inner) {
                        checkConfigItem(inner, glob);
                    }
                }
            }
        }
        function checkLoaderItems(loaderItems, glob) {
            for (const loaderItem of loaderItems){
                if (typeof loaderItem !== 'string' && !(0, _util.isDeepStrictEqual)(loaderItem, JSON.parse(JSON.stringify(loaderItem)))) {
                    throw new Error(`loader ${loaderItem.loader} for match "${glob}" does not have serializable options. Ensure that options passed are plain JavaScript objects and values.`);
                }
            }
        }
    }
    return async function createProject(options, turboEngineOptions) {
        return new ProjectImpl(await binding.projectNew(await rustifyProjectOptions(options), turboEngineOptions || {}));
    };
}
async function loadWasm(importPath = '') {
    if (wasmBindings) {
        return wasmBindings;
    }
    let attempts = [];
    for (let pkg of [
        '@next/swc-wasm-nodejs',
        '@next/swc-wasm-web'
    ]){
        try {
            let pkgPath = pkg;
            if (importPath) {
                // the import path must be exact when not in node_modules
                pkgPath = _path.default.join(importPath, pkg, 'wasm.js');
            }
            let bindings = await Promise.resolve().then(()=>{
                const e = new Error("Cannot find module as expression is too dynamic");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            });
            if (pkg === '@next/swc-wasm-web') {
                bindings = await bindings.default();
            }
            infoLog('next-swc build: wasm build @next/swc-wasm-web');
            // Note wasm binary does not support async intefaces yet, all async
            // interface coereces to sync interfaces.
            wasmBindings = {
                css: {
                    lightning: {
                        transform: function(_options) {
                            throw new Error('`css.lightning.transform` is not supported by the wasm bindings.');
                        },
                        transformStyleAttr: function(_options) {
                            throw new Error('`css.lightning.transformStyleAttr` is not supported by the wasm bindings.');
                        }
                    }
                },
                isWasm: true,
                transform (src, options) {
                    // TODO: we can remove fallback to sync interface once new stable version of next-swc gets published (current v12.2)
                    return (bindings == null ? void 0 : bindings.transform) ? bindings.transform(src.toString(), options) : Promise.resolve(bindings.transformSync(src.toString(), options));
                },
                transformSync (src, options) {
                    return bindings.transformSync(src.toString(), options);
                },
                minify (src, options) {
                    return (bindings == null ? void 0 : bindings.minify) ? bindings.minify(src.toString(), options) : Promise.resolve(bindings.minifySync(src.toString(), options));
                },
                minifySync (src, options) {
                    return bindings.minifySync(src.toString(), options);
                },
                parse (src, options) {
                    return (bindings == null ? void 0 : bindings.parse) ? bindings.parse(src.toString(), options) : Promise.resolve(bindings.parseSync(src.toString(), options));
                },
                getTargetTriple () {
                    return undefined;
                },
                turbo: {
                    createProject: function(_options, _turboEngineOptions) {
                        throw new Error('`turbo.createProject` is not supported by the wasm bindings.');
                    },
                    startTurbopackTraceServer: function(_traceFilePath) {
                        throw new Error('`turbo.startTurbopackTraceServer` is not supported by the wasm bindings.');
                    }
                },
                mdx: {
                    compile (src, options) {
                        return bindings.mdxCompile(src, getMdxOptions(options));
                    },
                    compileSync (src, options) {
                        return bindings.mdxCompileSync(src, getMdxOptions(options));
                    }
                }
            };
            return wasmBindings;
        } catch (e) {
            // Only log attempts for loading wasm when loading as fallback
            if (importPath) {
                if ((e == null ? void 0 : e.code) === 'ERR_MODULE_NOT_FOUND') {
                    attempts.push(`Attempted to load ${pkg}, but it was not installed`);
                } else {
                    attempts.push(`Attempted to load ${pkg}, but an error occurred: ${e.message ?? e}`);
                }
            }
        }
    }
    throw attempts;
}
function loadNative(importPath) {
    if (nativeBindings) {
        return nativeBindings;
    }
    const customBindings = !!__INTERNAL_CUSTOM_TURBOPACK_BINDINGS ? (()=>{
        const e = new Error("Cannot find module as expression is too dynamic");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })() : null;
    let bindings = customBindings;
    let attempts = [];
    const NEXT_TEST_NATIVE_DIR = process.env.NEXT_TEST_NATIVE_DIR;
    for (const triple of triples){
        if (NEXT_TEST_NATIVE_DIR) {
            try {
                // Use the binary directly to skip `pnpm pack` for testing as it's slow because of the large native binary.
                bindings = (()=>{
                    const e = new Error("Cannot find module 'unknown'");
                    e.code = 'MODULE_NOT_FOUND';
                    throw e;
                })();
                infoLog('next-swc build: local built @next/swc from NEXT_TEST_NATIVE_DIR');
                break;
            } catch (e) {}
        } else {
            try {
                bindings = (()=>{
                    const e = new Error("Cannot find module 'unknown'");
                    e.code = 'MODULE_NOT_FOUND';
                    throw e;
                })();
                infoLog('next-swc build: local built @next/swc');
                break;
            } catch (e) {}
        }
    }
    if (!bindings) {
        for (const triple of triples){
            let pkg = importPath ? _path.default.join(importPath, `@next/swc-${triple.platformArchABI}`, `next-swc.${triple.platformArchABI}.node`) : `@next/swc-${triple.platformArchABI}`;
            try {
                bindings = (()=>{
                    const e = new Error("Cannot find module as expression is too dynamic");
                    e.code = 'MODULE_NOT_FOUND';
                    throw e;
                })();
                if (!importPath) {
                    checkVersionMismatch((()=>{
                        const e = new Error("Cannot find module 'unknown'");
                        e.code = 'MODULE_NOT_FOUND';
                        throw e;
                    })());
                }
                break;
            } catch (e) {
                if ((e == null ? void 0 : e.code) === 'MODULE_NOT_FOUND') {
                    attempts.push(`Attempted to load ${pkg}, but it was not installed`);
                } else {
                    attempts.push(`Attempted to load ${pkg}, but an error occurred: ${e.message ?? e}`);
                }
                lastNativeBindingsLoadErrorCode = (e == null ? void 0 : e.code) ?? 'unknown';
            }
        }
    }
    if (bindings) {
        nativeBindings = {
            isWasm: false,
            transform (src, options) {
                var _options_jsc;
                const isModule = typeof src !== 'undefined' && typeof src !== 'string' && !Buffer.isBuffer(src);
                options = options || {};
                if (options == null ? void 0 : (_options_jsc = options.jsc) == null ? void 0 : _options_jsc.parser) {
                    options.jsc.parser.syntax = options.jsc.parser.syntax ?? 'ecmascript';
                }
                return bindings.transform(isModule ? JSON.stringify(src) : src, isModule, toBuffer(options));
            },
            transformSync (src, options) {
                var _options_jsc;
                if (typeof src === 'undefined') {
                    throw new Error("transformSync doesn't implement reading the file from filesystem");
                } else if (Buffer.isBuffer(src)) {
                    throw new Error("transformSync doesn't implement taking the source code as Buffer");
                }
                const isModule = typeof src !== 'string';
                options = options || {};
                if (options == null ? void 0 : (_options_jsc = options.jsc) == null ? void 0 : _options_jsc.parser) {
                    options.jsc.parser.syntax = options.jsc.parser.syntax ?? 'ecmascript';
                }
                return bindings.transformSync(isModule ? JSON.stringify(src) : src, isModule, toBuffer(options));
            },
            minify (src, options) {
                return bindings.minify(toBuffer(src), toBuffer(options ?? {}));
            },
            minifySync (src, options) {
                return bindings.minifySync(toBuffer(src), toBuffer(options ?? {}));
            },
            parse (src, options) {
                return bindings.parse(src, toBuffer(options ?? {}));
            },
            getTargetTriple: bindings.getTargetTriple,
            initCustomTraceSubscriber: bindings.initCustomTraceSubscriber,
            teardownTraceSubscriber: bindings.teardownTraceSubscriber,
            initHeapProfiler: bindings.initHeapProfiler,
            teardownHeapProfiler: bindings.teardownHeapProfiler,
            turbo: {
                createProject: bindingToApi(customBindings ?? bindings, false),
                startTurbopackTraceServer (traceFilePath) {
                    _log.warn('Turbopack trace server started. View trace at https://turbo-trace-viewer.vercel.app/');
                    (customBindings ?? bindings).startTurbopackTraceServer(traceFilePath);
                }
            },
            mdx: {
                compile (src, options) {
                    return bindings.mdxCompile(src, toBuffer(getMdxOptions(options)));
                },
                compileSync (src, options) {
                    bindings.mdxCompileSync(src, toBuffer(getMdxOptions(options)));
                }
            },
            css: {
                lightning: {
                    transform (transformOptions) {
                        return bindings.lightningCssTransform(transformOptions);
                    },
                    transformStyleAttr (transformAttrOptions) {
                        return bindings.lightningCssTransformStyleAttribute(transformAttrOptions);
                    }
                }
            }
        };
        return nativeBindings;
    }
    throw attempts;
}
/// Build a mdx options object contains default values that
/// can be parsed with serde_wasm_bindgen.
function getMdxOptions(options = {}) {
    return {
        ...options,
        development: options.development ?? false,
        jsx: options.jsx ?? false,
        mdxType: options.mdxType ?? 'commonMark'
    };
}
function toBuffer(t) {
    return Buffer.from(JSON.stringify(t));
}
async function isWasm() {
    let bindings = await loadBindings();
    return bindings.isWasm;
}
async function transform(src, options) {
    let bindings = await loadBindings();
    return bindings.transform(src, options);
}
function transformSync(src, options) {
    let bindings = loadBindingsSync();
    return bindings.transformSync(src, options);
}
async function minify(src, options) {
    let bindings = await loadBindings();
    return bindings.minify(src, options);
}
async function parse(src, options) {
    let bindings = await loadBindings();
    let parserOptions = (0, _options.getParserOptions)(options);
    return bindings.parse(src, parserOptions).then((astStr)=>JSON.parse(astStr));
}
function getBinaryMetadata() {
    var _bindings_getTargetTriple;
    let bindings;
    try {
        bindings = loadNative();
    } catch (e) {
    // Suppress exceptions, this fn allows to fail to load native bindings
    }
    return {
        target: bindings == null ? void 0 : (_bindings_getTargetTriple = bindings.getTargetTriple) == null ? void 0 : _bindings_getTargetTriple.call(bindings)
    };
}
function initCustomTraceSubscriber(traceFileName) {
    if (!swcTraceFlushGuard) {
        // Wasm binary doesn't support trace emission
        let bindings = loadNative();
        swcTraceFlushGuard = bindings.initCustomTraceSubscriber == null ? void 0 : bindings.initCustomTraceSubscriber.call(bindings, traceFileName);
    }
}
function initHeapProfiler() {
    try {
        if (!swcHeapProfilerFlushGuard) {
            let bindings = loadNative();
            swcHeapProfilerFlushGuard = bindings.initHeapProfiler == null ? void 0 : bindings.initHeapProfiler.call(bindings);
        }
    } catch (_) {
    // Suppress exceptions, this fn allows to fail to load native bindings
    }
}
function once(fn) {
    let executed = false;
    return function() {
        if (!executed) {
            executed = true;
            fn();
        }
    };
}
const teardownHeapProfiler = once(()=>{
    try {
        let bindings = loadNative();
        if (swcHeapProfilerFlushGuard) {
            bindings.teardownHeapProfiler == null ? void 0 : bindings.teardownHeapProfiler.call(bindings, swcHeapProfilerFlushGuard);
        }
    } catch (e) {
    // Suppress exceptions, this fn allows to fail to load native bindings
    }
});
const teardownTraceSubscriber = once(()=>{
    try {
        let bindings = loadNative();
        if (swcTraceFlushGuard) {
            bindings.teardownTraceSubscriber == null ? void 0 : bindings.teardownTraceSubscriber.call(bindings, swcTraceFlushGuard);
        }
    } catch (e) {
    // Suppress exceptions, this fn allows to fail to load native bindings
    }
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/next-config-ts/require-hook.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    deregisterHook: null,
    registerHook: null,
    requireFromString: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    deregisterHook: function() {
        return deregisterHook;
    },
    registerHook: function() {
        return registerHook;
    },
    requireFromString: function() {
        return requireFromString;
    }
});
const _nodemodule = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/node:module [external] (node:module, cjs)"));
const _nodefs = __turbopack_require__("[externals]/node:fs [external] (node:fs, cjs)");
const _nodepath = __turbopack_require__("[externals]/node:path [external] (node:path, cjs)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const oldJSHook = ("TURBOPACK ident replacement", __turbopack_require_real__).extensions['.js'];
const extensions = [
    '.ts',
    '.cts',
    '.mts',
    '.cjs',
    '.mjs'
];
function registerHook(swcOptions) {
    // lazy require swc since it loads React before even setting NODE_ENV
    // resulting loading Development React on Production
    const { transformSync } = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
    ("TURBOPACK ident replacement", __turbopack_require_real__).extensions['.js'] = function(mod, oldFilename) {
        try {
            return oldJSHook(mod, oldFilename);
        } catch (error) {
            if (error.code !== 'ERR_REQUIRE_ESM') {
                throw error;
            }
            // calling oldJSHook throws ERR_REQUIRE_ESM, so run _compile manually
            // TODO: investigate if we can remove readFileSync
            const content = (0, _nodefs.readFileSync)(oldFilename, 'utf8');
            const { code } = transformSync(content, swcOptions);
            mod._compile(code, oldFilename);
        }
    };
    for (const ext of extensions){
        const oldHook = ("TURBOPACK ident replacement", __turbopack_require_real__).extensions[ext] ?? oldJSHook;
        ("TURBOPACK ident replacement", __turbopack_require_real__).extensions[ext] = function(mod, oldFilename) {
            const _compile = mod._compile;
            mod._compile = function(code, filename) {
                const swc = transformSync(code, swcOptions);
                return _compile.call(this, swc.code, filename);
            };
            return oldHook(mod, oldFilename);
        };
    }
}
function deregisterHook() {
    ("TURBOPACK ident replacement", __turbopack_require_real__).extensions['.js'] = oldJSHook;
    extensions.forEach((ext)=>delete ("TURBOPACK ident replacement", __turbopack_require_real__).extensions[ext]);
}
function requireFromString(code, filename) {
    const paths = _nodemodule.default._nodeModulePaths((0, _nodepath.dirname)(filename));
    const m = new _nodemodule.default(filename, module.parent);
    m.paths = paths;
    m._compile(code, filename);
    return m.exports;
} //# sourceMappingURL=require-hook.js.map
}}),
"[project]/node_modules/next/dist/build/next-config-ts/transpile-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "transpileConfig", {
    enumerable: true,
    get: function() {
        return transpileConfig;
    }
});
const _nodepath = __turbopack_require__("[externals]/node:path [external] (node:path, cjs)");
const _promises = __turbopack_require__("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
const _requirehook = __turbopack_require__("[project]/node_modules/next/dist/build/next-config-ts/require-hook.js [app-rsc] (ecmascript)");
const _loadjsconfig = __turbopack_require__("[project]/node_modules/next/dist/build/load-jsconfig.js [app-rsc] (ecmascript)");
function resolveSWCOptions(cwd, compilerOptions) {
    const resolvedBaseUrl = (0, _nodepath.join)(cwd, compilerOptions.baseUrl ?? '.');
    return {
        jsc: {
            target: 'es5',
            parser: {
                syntax: 'typescript'
            },
            paths: compilerOptions.paths,
            baseUrl: resolvedBaseUrl
        },
        module: {
            type: 'commonjs'
        },
        isModule: 'unknown'
    };
}
async function lazilyGetTSConfig(cwd) {
    let tsConfig;
    try {
        tsConfig = (0, _loadjsconfig.parseJsonFile)((0, _nodepath.join)(cwd, 'tsconfig.json'));
    } catch (error) {
        // ignore if tsconfig.json does not exist
        if (error.code !== 'ENOENT') {
            throw error;
        }
        tsConfig = {
            compilerOptions: {}
        };
    }
    return tsConfig;
}
async function transpileConfig({ nextConfigPath, cwd }) {
    let hasRequire = false;
    try {
        const { compilerOptions } = await lazilyGetTSConfig(cwd);
        const swcOptions = resolveSWCOptions(cwd, compilerOptions);
        const nextConfigString = await (0, _promises.readFile)(nextConfigPath, 'utf8');
        // lazy require swc since it loads React before even setting NODE_ENV
        // resulting loading Development React on Production
        const { transform } = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
        const { code } = await transform(nextConfigString, swcOptions);
        // register require hook only if require exists
        if (code.includes('require(')) {
            (0, _requirehook.registerHook)(swcOptions);
            hasRequire = true;
        }
        // filename & extension don't matter here
        return (0, _requirehook.requireFromString)(code, (0, _nodepath.join)(cwd, 'next.config.compiled.js'));
    } catch (error) {
        throw error;
    } finally{
        if (hasRequire) {
            (0, _requirehook.deregisterHook)();
        }
    }
} //# sourceMappingURL=transpile-config.js.map
}}),
"[project]/node_modules/next/dist/build/output/store.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    formatTrigger: null,
    store: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatTrigger: function() {
        return formatTrigger;
    },
    store: function() {
        return store;
    }
});
const _unistore = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/unistore/unistore.js [app-rsc] (ecmascript)"));
const _stripansi = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/strip-ansi/index.js [app-rsc] (ecmascript)"));
const _trace = __turbopack_require__("[project]/node_modules/next/dist/trace/index.js [app-rsc] (ecmascript)");
const _swc = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MAX_LOG_SKIP_DURATION = 500 // 500ms
;
function formatTrigger(trigger) {
    // Format dynamic sitemap routes to simpler file path
    // e.g., /sitemap.xml[] -> /sitemap.xml
    if (trigger.includes('[__metadata_id__]')) {
        trigger = trigger.replace('/[__metadata_id__]', '/[id]');
    }
    if (trigger.length > 1 && trigger.endsWith('/')) {
        trigger = trigger.slice(0, -1);
    }
    return trigger;
}
const store = (0, _unistore.default)({
    appUrl: null,
    bindAddr: null,
    bootstrap: true,
    logging: true
});
let lastStore = {
    appUrl: null,
    bindAddr: null,
    bootstrap: true,
    logging: true
};
function hasStoreChanged(nextStore) {
    if ([
        ...new Set([
            ...Object.keys(lastStore),
            ...Object.keys(nextStore)
        ])
    ].every((key)=>Object.is(lastStore[key], nextStore[key]))) {
        return false;
    }
    lastStore = nextStore;
    return true;
}
let startTime = 0;
let trigger = '' // default, use empty string for trigger
;
let triggerUrl = undefined;
let loadingLogTimer = null;
let traceSpan = null;
let logging = true;
store.subscribe((state)=>{
    // Update persisted logging state
    if ('logging' in state) {
        logging = state.logging;
    }
    // If logging is disabled, do not log
    if (!logging) {
        return;
    }
    if (!hasStoreChanged(state)) {
        return;
    }
    if (state.bootstrap) {
        return;
    }
    if (state.loading) {
        if (state.trigger) {
            trigger = formatTrigger(state.trigger);
            triggerUrl = state.url;
            if (trigger !== 'initial') {
                traceSpan = (0, _trace.trace)('compile-path', undefined, {
                    trigger: trigger
                });
                if (!loadingLogTimer) {
                    // Only log compiling if compiled is not finished in 3 seconds
                    loadingLogTimer = setTimeout(()=>{
                        if (triggerUrl && triggerUrl !== trigger && process.env.NEXT_TRIGGER_URL) {
                            _log.wait(`Compiling ${trigger} (${triggerUrl}) ...`);
                        } else {
                            _log.wait(`Compiling ${trigger} ...`);
                        }
                    }, MAX_LOG_SKIP_DURATION);
                }
            }
        }
        if (startTime === 0) {
            startTime = Date.now();
        }
        return;
    }
    if (state.errors) {
        // Log compilation errors
        _log.error(state.errors[0]);
        const cleanError = (0, _stripansi.default)(state.errors[0]);
        if (cleanError.indexOf('SyntaxError') > -1) {
            const matches = cleanError.match(/\[.*\]=/);
            if (matches) {
                for (const match of matches){
                    const prop = (match.split(']').shift() || '').slice(1);
                    console.log(`AMP bind syntax [${prop}]='' is not supported in JSX, use 'data-amp-bind-${prop}' instead. https://nextjs.org/docs/messages/amp-bind-jsx-alt`);
                }
                return;
            }
        }
        startTime = 0;
        // Ensure traces are flushed after each compile in development mode
        (0, _trace.flushAllTraces)();
        (0, _swc.teardownTraceSubscriber)();
        (0, _swc.teardownHeapProfiler)();
        return;
    }
    let timeMessage = '';
    if (startTime) {
        const time = Date.now() - startTime;
        startTime = 0;
        timeMessage = ' ' + (time > 2000 ? `in ${Math.round(time / 100) / 10}s` : `in ${time}ms`);
    }
    let modulesMessage = '';
    if (state.totalModulesCount) {
        modulesMessage = ` (${state.totalModulesCount} modules)`;
    }
    if (state.warnings) {
        _log.warn(state.warnings.join('\n\n'));
        // Ensure traces are flushed after each compile in development mode
        (0, _trace.flushAllTraces)();
        (0, _swc.teardownTraceSubscriber)();
        (0, _swc.teardownHeapProfiler)();
        return;
    }
    if (state.typeChecking) {
        _log.info(`bundled ${trigger}${timeMessage}${modulesMessage}, type checking...`);
        return;
    }
    if (trigger === 'initial') {
        trigger = '';
    } else {
        if (loadingLogTimer) {
            clearTimeout(loadingLogTimer);
            loadingLogTimer = null;
        }
        if (traceSpan) {
            traceSpan.stop();
            traceSpan = null;
        }
        _log.event(`Compiled${trigger ? ' ' + trigger : ''}${timeMessage}${modulesMessage}`);
        trigger = '';
    }
    // Ensure traces are flushed after each compile in development mode
    (0, _trace.flushAllTraces)();
    (0, _swc.teardownTraceSubscriber)();
    (0, _swc.teardownHeapProfiler)();
}); //# sourceMappingURL=store.js.map
}}),
"[project]/node_modules/next/dist/build/output/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    ampValidation: null,
    formatAmpMessages: null,
    reportTrigger: null,
    watchCompilers: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ampValidation: function() {
        return ampValidation;
    },
    formatAmpMessages: function() {
        return formatAmpMessages;
    },
    reportTrigger: function() {
        return reportTrigger;
    },
    watchCompilers: function() {
        return watchCompilers;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _stripansi = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/strip-ansi/index.js [app-rsc] (ecmascript)"));
const _texttable = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/text-table/index.js [app-rsc] (ecmascript)"));
const _unistore = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/unistore/unistore.js [app-rsc] (ecmascript)"));
const _formatwebpackmessages = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/format-webpack-messages.js [app-rsc] (ecmascript)"));
const _store = __turbopack_require__("[project]/node_modules/next/dist/build/output/store.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function formatAmpMessages(amp) {
    let output = (0, _picocolors.bold)('Amp Validation') + '\n\n';
    let messages = [];
    const chalkError = (0, _picocolors.red)('error');
    function ampError(page, error) {
        messages.push([
            page,
            chalkError,
            error.message,
            error.specUrl || ''
        ]);
    }
    const chalkWarn = (0, _picocolors.yellow)('warn');
    function ampWarn(page, warn) {
        messages.push([
            page,
            chalkWarn,
            warn.message,
            warn.specUrl || ''
        ]);
    }
    for(const page in amp){
        let { errors, warnings } = amp[page];
        const devOnlyFilter = (err)=>err.code !== 'DEV_MODE_ONLY';
        errors = errors.filter(devOnlyFilter);
        warnings = warnings.filter(devOnlyFilter);
        if (!(errors.length || warnings.length)) {
            continue;
        }
        if (errors.length) {
            ampError(page, errors[0]);
            for(let index = 1; index < errors.length; ++index){
                ampError('', errors[index]);
            }
        }
        if (warnings.length) {
            ampWarn(errors.length ? '' : page, warnings[0]);
            for(let index = 1; index < warnings.length; ++index){
                ampWarn('', warnings[index]);
            }
        }
        messages.push([
            '',
            '',
            '',
            ''
        ]);
    }
    if (!messages.length) {
        return '';
    }
    output += (0, _texttable.default)(messages, {
        align: [
            'l',
            'l',
            'l',
            'l'
        ],
        stringLength (str) {
            return (0, _stripansi.default)(str).length;
        }
    });
    return output;
}
const buildStore = (0, _unistore.default)({
    // @ts-expect-error initial value
    client: {},
    // @ts-expect-error initial value
    server: {},
    // @ts-expect-error initial value
    edgeServer: {}
});
let buildWasDone = false;
let clientWasLoading = true;
let serverWasLoading = true;
let edgeServerWasLoading = false;
buildStore.subscribe((state)=>{
    const { amp, client, server, edgeServer, trigger, url } = state;
    const { appUrl } = _store.store.getState();
    if (client.loading || server.loading || (edgeServer == null ? void 0 : edgeServer.loading)) {
        _store.store.setState({
            bootstrap: false,
            appUrl: appUrl,
            // If it takes more than 3 seconds to compile, mark it as loading status
            loading: true,
            trigger,
            url
        }, true);
        clientWasLoading = !buildWasDone && clientWasLoading || client.loading;
        serverWasLoading = !buildWasDone && serverWasLoading || server.loading;
        edgeServerWasLoading = !buildWasDone && edgeServerWasLoading || edgeServer.loading;
        buildWasDone = false;
        return;
    }
    buildWasDone = true;
    let partialState = {
        bootstrap: false,
        appUrl: appUrl,
        loading: false,
        typeChecking: false,
        totalModulesCount: (clientWasLoading ? client.totalModulesCount : 0) + (serverWasLoading ? server.totalModulesCount : 0) + (edgeServerWasLoading ? (edgeServer == null ? void 0 : edgeServer.totalModulesCount) || 0 : 0),
        hasEdgeServer: !!edgeServer
    };
    if (client.errors && clientWasLoading) {
        // Show only client errors
        _store.store.setState({
            ...partialState,
            errors: client.errors,
            warnings: null
        }, true);
    } else if (server.errors && serverWasLoading) {
        _store.store.setState({
            ...partialState,
            errors: server.errors,
            warnings: null
        }, true);
    } else if (edgeServer.errors && edgeServerWasLoading) {
        _store.store.setState({
            ...partialState,
            errors: edgeServer.errors,
            warnings: null
        }, true);
    } else {
        // Show warnings from all of them
        const warnings = [
            ...client.warnings || [],
            ...server.warnings || [],
            ...edgeServer.warnings || []
        ].concat(formatAmpMessages(amp) || []);
        _store.store.setState({
            ...partialState,
            errors: null,
            warnings: warnings.length === 0 ? null : warnings
        }, true);
    }
});
function ampValidation(page, errors, warnings) {
    const { amp } = buildStore.getState();
    if (!(errors.length || warnings.length)) {
        buildStore.setState({
            amp: Object.keys(amp).filter((k)=>k !== page).sort() // eslint-disable-next-line no-sequences
            .reduce((a, c)=>(a[c] = amp[c], a), {})
        });
        return;
    }
    const newAmp = {
        ...amp,
        [page]: {
            errors,
            warnings
        }
    };
    buildStore.setState({
        amp: Object.keys(newAmp).sort() // eslint-disable-next-line no-sequences
        .reduce((a, c)=>(a[c] = newAmp[c], a), {})
    });
}
function watchCompilers(client, server, edgeServer) {
    buildStore.setState({
        client: {
            loading: true
        },
        server: {
            loading: true
        },
        edgeServer: {
            loading: true
        },
        trigger: 'initial',
        url: undefined
    });
    function tapCompiler(key, compiler, onEvent) {
        compiler.hooks.invalid.tap(`NextJsInvalid-${key}`, ()=>{
            onEvent({
                loading: true
            });
        });
        compiler.hooks.done.tap(`NextJsDone-${key}`, (stats)=>{
            buildStore.setState({
                amp: {}
            });
            const { errors, warnings } = (0, _formatwebpackmessages.default)(stats.toJson({
                preset: 'errors-warnings',
                moduleTrace: true
            }));
            const hasErrors = !!(errors == null ? void 0 : errors.length);
            const hasWarnings = !!(warnings == null ? void 0 : warnings.length);
            onEvent({
                loading: false,
                totalModulesCount: stats.compilation.modules.size,
                errors: hasErrors ? errors : null,
                warnings: hasWarnings ? warnings : null
            });
        });
    }
    tapCompiler(_constants.COMPILER_NAMES.client, client, (status)=>{
        if (!status.loading && !buildStore.getState().server.loading && !buildStore.getState().edgeServer.loading && status.totalModulesCount > 0) {
            buildStore.setState({
                client: status,
                trigger: undefined,
                url: undefined
            });
        } else {
            buildStore.setState({
                client: status
            });
        }
    });
    tapCompiler(_constants.COMPILER_NAMES.server, server, (status)=>{
        if (!status.loading && !buildStore.getState().client.loading && !buildStore.getState().edgeServer.loading && status.totalModulesCount > 0) {
            buildStore.setState({
                server: status,
                trigger: undefined,
                url: undefined
            });
        } else {
            buildStore.setState({
                server: status
            });
        }
    });
    tapCompiler(_constants.COMPILER_NAMES.edgeServer, edgeServer, (status)=>{
        if (!status.loading && !buildStore.getState().client.loading && !buildStore.getState().server.loading && status.totalModulesCount > 0) {
            buildStore.setState({
                edgeServer: status,
                trigger: undefined,
                url: undefined
            });
        } else {
            buildStore.setState({
                edgeServer: status
            });
        }
    });
}
function reportTrigger(trigger, url) {
    buildStore.setState({
        trigger,
        url
    });
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/normalize-catchall-routes.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "normalizeCatchAllRoutes", {
    enumerable: true,
    get: function() {
        return normalizeCatchAllRoutes;
    }
});
const _interceptionroutes = __turbopack_require__("[project]/node_modules/next/dist/server/lib/interception-routes.js [app-rsc] (ecmascript)");
const _apppathnamenormalizer = __turbopack_require__("[project]/node_modules/next/dist/server/normalizers/built/app/app-pathname-normalizer.js [app-rsc] (ecmascript)");
function normalizeCatchAllRoutes(appPaths, normalizer = new _apppathnamenormalizer.AppPathnameNormalizer()) {
    const catchAllRoutes = [
        ...new Set(Object.values(appPaths).flat().filter(isCatchAllRoute) // Sorting is important because we want to match the most specific path.
        .sort((a, b)=>b.split('/').length - a.split('/').length))
    ];
    // interception routes should only be matched by a single entrypoint
    // we don't want to push a catch-all route to an interception route
    // because it would mean the interception would be handled by the wrong page component
    const filteredAppPaths = Object.keys(appPaths).filter((route)=>!(0, _interceptionroutes.isInterceptionRouteAppPath)(route));
    for (const appPath of filteredAppPaths){
        for (const catchAllRoute of catchAllRoutes){
            const normalizedCatchAllRoute = normalizer.normalize(catchAllRoute);
            const normalizedCatchAllRouteBasePath = normalizedCatchAllRoute.slice(0, normalizedCatchAllRoute.search(catchAllRouteRegex));
            if (appPath.startsWith(normalizedCatchAllRouteBasePath) && // check if there's not already a slot value that could match the catch-all
            !appPaths[appPath].some((path)=>hasMatchedSlots(path, catchAllRoute))) {
                // optional catch-all routes are not currently supported, but leaving this logic in place
                // for when they are eventually supported.
                if (isOptionalCatchAll(catchAllRoute)) {
                    // optional catch-all routes should match both the root segment and any segment after it
                    // for example, `/[[...slug]]` should match `/` and `/foo` and `/foo/bar`
                    appPaths[appPath].push(catchAllRoute);
                } else if (isCatchAll(catchAllRoute)) {
                    // regular catch-all (single bracket) should only match segments after it
                    // for example, `/[...slug]` should match `/foo` and `/foo/bar` but not `/`
                    if (normalizedCatchAllRouteBasePath !== appPath) {
                        appPaths[appPath].push(catchAllRoute);
                    }
                }
            }
        }
    }
}
function hasMatchedSlots(path1, path2) {
    const slots1 = path1.split('/').filter(isMatchableSlot);
    const slots2 = path2.split('/').filter(isMatchableSlot);
    // if the catch-all route does not have the same number of slots as the app path, it can't match
    if (slots1.length !== slots2.length) return false;
    // compare the slots in both paths. For there to be a match, each slot must be the same
    for(let i = 0; i < slots1.length; i++){
        if (slots1[i] !== slots2[i]) return false;
    }
    return true;
}
/**
 * Returns true for slots that should be considered when checking for match compatibility.
 * Excludes children slots because these are similar to having a segment-level `page`
 * which would cause a slot length mismatch when comparing it to a catch-all route.
 */ function isMatchableSlot(segment) {
    return segment.startsWith('@') && segment !== '@children';
}
const catchAllRouteRegex = /\[?\[\.\.\./;
function isCatchAllRoute(pathname) {
    // Optional catch-all slots are not currently supported, and as such they are not considered when checking for match compatability.
    return !isOptionalCatchAll(pathname) && isCatchAll(pathname);
}
function isOptionalCatchAll(pathname) {
    return pathname.includes('[[...');
}
function isCatchAll(pathname) {
    return pathname.includes('[...');
} //# sourceMappingURL=normalize-catchall-routes.js.map
}}),
"[project]/node_modules/next/dist/build/analysis/extract-const-value.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    NoSuchDeclarationError: null,
    UnsupportedValueError: null,
    extractExportedConstValue: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NoSuchDeclarationError: function() {
        return NoSuchDeclarationError;
    },
    UnsupportedValueError: function() {
        return UnsupportedValueError;
    },
    extractExportedConstValue: function() {
        return extractExportedConstValue;
    }
});
class NoSuchDeclarationError extends Error {
}
function isExportDeclaration(node) {
    return node.type === 'ExportDeclaration';
}
function isVariableDeclaration(node) {
    return node.type === 'VariableDeclaration';
}
function isIdentifier(node) {
    return node.type === 'Identifier';
}
function isBooleanLiteral(node) {
    return node.type === 'BooleanLiteral';
}
function isNullLiteral(node) {
    return node.type === 'NullLiteral';
}
function isStringLiteral(node) {
    return node.type === 'StringLiteral';
}
function isNumericLiteral(node) {
    return node.type === 'NumericLiteral';
}
function isArrayExpression(node) {
    return node.type === 'ArrayExpression';
}
function isObjectExpression(node) {
    return node.type === 'ObjectExpression';
}
function isKeyValueProperty(node) {
    return node.type === 'KeyValueProperty';
}
function isRegExpLiteral(node) {
    return node.type === 'RegExpLiteral';
}
function isTemplateLiteral(node) {
    return node.type === 'TemplateLiteral';
}
function isTsSatisfiesExpression(node) {
    return node.type === 'TsSatisfiesExpression';
}
class UnsupportedValueError extends Error {
    constructor(message, paths){
        super(message);
        // Generating "path" that looks like "config.runtime[0].value"
        let codePath;
        if (paths) {
            codePath = '';
            for (const path of paths){
                if (path[0] === '[') {
                    // "array" + "[0]"
                    codePath += path;
                } else {
                    if (codePath === '') {
                        codePath = path;
                    } else {
                        // "object" + ".key"
                        codePath += `.${path}`;
                    }
                }
            }
        }
        this.path = codePath;
    }
}
function extractValue(node, path) {
    if (isNullLiteral(node)) {
        return null;
    } else if (isBooleanLiteral(node)) {
        // e.g. true / false
        return node.value;
    } else if (isStringLiteral(node)) {
        // e.g. "abc"
        return node.value;
    } else if (isNumericLiteral(node)) {
        // e.g. 123
        return node.value;
    } else if (isRegExpLiteral(node)) {
        // e.g. /abc/i
        return new RegExp(node.pattern, node.flags);
    } else if (isIdentifier(node)) {
        switch(node.value){
            case 'undefined':
                return undefined;
            default:
                throw new UnsupportedValueError(`Unknown identifier "${node.value}"`, path);
        }
    } else if (isArrayExpression(node)) {
        // e.g. [1, 2, 3]
        const arr = [];
        for(let i = 0, len = node.elements.length; i < len; i++){
            const elem = node.elements[i];
            if (elem) {
                if (elem.spread) {
                    // e.g. [ ...a ]
                    throw new UnsupportedValueError('Unsupported spread operator in the Array Expression', path);
                }
                arr.push(extractValue(elem.expression, path && [
                    ...path,
                    `[${i}]`
                ]));
            } else {
                // e.g. [1, , 2]
                //         ^^
                arr.push(undefined);
            }
        }
        return arr;
    } else if (isObjectExpression(node)) {
        // e.g. { a: 1, b: 2 }
        const obj = {};
        for (const prop of node.properties){
            if (!isKeyValueProperty(prop)) {
                // e.g. { ...a }
                throw new UnsupportedValueError('Unsupported spread operator in the Object Expression', path);
            }
            let key;
            if (isIdentifier(prop.key)) {
                // e.g. { a: 1, b: 2 }
                key = prop.key.value;
            } else if (isStringLiteral(prop.key)) {
                // e.g. { "a": 1, "b": 2 }
                key = prop.key.value;
            } else {
                throw new UnsupportedValueError(`Unsupported key type "${prop.key.type}" in the Object Expression`, path);
            }
            obj[key] = extractValue(prop.value, path && [
                ...path,
                key
            ]);
        }
        return obj;
    } else if (isTemplateLiteral(node)) {
        // e.g. `abc`
        if (node.expressions.length !== 0) {
            // TODO: should we add support for `${'e'}d${'g'}'e'`?
            throw new UnsupportedValueError('Unsupported template literal with expressions', path);
        }
        // When TemplateLiteral has 0 expressions, the length of quasis is always 1.
        // Because when parsing TemplateLiteral, the parser yields the first quasi,
        // then the first expression, then the next quasi, then the next expression, etc.,
        // until the last quasi.
        // Thus if there is no expression, the parser ends at the frst and also last quasis
        //
        // A "cooked" interpretation where backslashes have special meaning, while a
        // "raw" interpretation where backslashes do not have special meaning
        // https://exploringjs.com/impatient-js/ch_template-literals.html#template-strings-cooked-vs-raw
        const [{ cooked, raw }] = node.quasis;
        return cooked ?? raw;
    } else if (isTsSatisfiesExpression(node)) {
        return extractValue(node.expression);
    } else {
        throw new UnsupportedValueError(`Unsupported node type "${node.type}"`, path);
    }
}
function extractExportedConstValue(module1, exportedName) {
    for (const moduleItem of module1.body){
        if (!isExportDeclaration(moduleItem)) {
            continue;
        }
        const declaration = moduleItem.declaration;
        if (!isVariableDeclaration(declaration)) {
            continue;
        }
        if (declaration.kind !== 'const') {
            continue;
        }
        for (const decl of declaration.declarations){
            if (isIdentifier(decl.id) && decl.id.value === exportedName && decl.init) {
                return extractValue(decl.init, [
                    exportedName
                ]);
            }
        }
    }
    throw new NoSuchDeclarationError();
} //# sourceMappingURL=extract-const-value.js.map
}}),
"[project]/node_modules/next/dist/build/analysis/parse-module.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "parseModule", {
    enumerable: true,
    get: function() {
        return parseModule;
    }
});
const _lrucache = __turbopack_require__("[project]/node_modules/next/dist/server/lib/lru-cache.js [app-rsc] (ecmascript)");
const _withpromisecache = __turbopack_require__("[project]/node_modules/next/dist/lib/with-promise-cache.js [app-rsc] (ecmascript)");
const _crypto = __turbopack_require__("[externals]/crypto [external] (crypto, cjs)");
const _swc = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
const parseModule = (0, _withpromisecache.withPromiseCache)(new _lrucache.LRUCache(500), async (filename, content)=>(0, _swc.parse)(content, {
        isModule: 'unknown',
        filename
    }).catch(()=>null), (_, content)=>(0, _crypto.createHash)('sha1').update(content).digest('hex')); //# sourceMappingURL=parse-module.js.map
}}),
"[project]/node_modules/next/dist/build/segment-config/pages/pages-segment-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    PagesSegmentConfigSchemaKeys: null,
    parsePagesSegmentConfig: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PagesSegmentConfigSchemaKeys: function() {
        return PagesSegmentConfigSchemaKeys;
    },
    parsePagesSegmentConfig: function() {
        return parsePagesSegmentConfig;
    }
});
const _zod = __turbopack_require__("[project]/node_modules/next/dist/compiled/zod/index.js [app-rsc] (ecmascript)");
const _zod1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/zod.js [app-rsc] (ecmascript)");
/**
 * The schema for the page segment config.
 */ const PagesSegmentConfigSchema = _zod.z.object({
    /**
   * The runtime to use for the page.
   */ runtime: _zod.z.enum([
        'edge',
        'experimental-edge',
        'nodejs'
    ]).optional(),
    /**
   * The maximum duration for the page render.
   */ maxDuration: _zod.z.number().optional(),
    /**
   * The exported config object for the page.
   */ config: _zod.z.object({
        /**
       * Enables AMP for the page.
       */ amp: _zod.z.union([
            _zod.z.boolean(),
            _zod.z.literal('hybrid')
        ]).optional(),
        /**
       * The runtime to use for the page.
       */ runtime: _zod.z.enum([
            'edge',
            'experimental-edge',
            'nodejs'
        ]).optional(),
        /**
       * The maximum duration for the page render.
       */ maxDuration: _zod.z.number().optional()
    }).optional()
});
function parsePagesSegmentConfig(data, route) {
    const parsed = PagesSegmentConfigSchema.safeParse(data, {});
    if (!parsed.success) {
        throw (0, _zod1.formatZodError)(`Invalid segment configuration options detected for "${route}". Read more at https://nextjs.org/docs/messages/invalid-page-config`, parsed.error);
    }
    return parsed.data;
}
const PagesSegmentConfigSchemaKeys = PagesSegmentConfigSchema.keyof().options; //# sourceMappingURL=pages-segment-config.js.map
}}),
"[project]/node_modules/next/dist/build/segment-config/middleware/middleware-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    MiddlewareConfigInputSchema: null,
    MiddlewareConfigInputSchemaKeys: null,
    SourceSchema: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MiddlewareConfigInputSchema: function() {
        return MiddlewareConfigInputSchema;
    },
    MiddlewareConfigInputSchemaKeys: function() {
        return MiddlewareConfigInputSchemaKeys;
    },
    SourceSchema: function() {
        return SourceSchema;
    }
});
const _picomatch = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/picomatch/index.js [app-rsc] (ecmascript)"));
const _zod = __turbopack_require__("[project]/node_modules/next/dist/compiled/zod/index.js [app-rsc] (ecmascript)");
const _trytoparsepath = __turbopack_require__("[project]/node_modules/next/dist/lib/try-to-parse-path.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const RouteHasSchema = _zod.z.discriminatedUnion('type', [
    _zod.z.object({
        type: _zod.z.enum([
            'header',
            'query',
            'cookie'
        ]),
        key: _zod.z.string({
            required_error: 'key is required when type is header, query or cookie'
        }),
        value: _zod.z.string({
            invalid_type_error: 'value must be a string'
        }).optional()
    }).strict(),
    _zod.z.object({
        type: _zod.z.literal('host'),
        value: _zod.z.string({
            required_error: 'host must have a value'
        })
    }).strict()
]);
const SourceSchema = _zod.z.string({
    required_error: 'source is required'
}).max(4096, 'exceeds max built length of 4096 for route').superRefine((val, ctx)=>{
    if (!val.startsWith('/')) {
        return ctx.addIssue({
            code: _zod.z.ZodIssueCode.custom,
            message: `source must start with /`
        });
    }
    const { error, regexStr } = (0, _trytoparsepath.tryToParsePath)(val);
    if (error || !regexStr) {
        ctx.addIssue({
            code: _zod.z.ZodIssueCode.custom,
            message: `Invalid source '${val}': ${error.message}`
        });
    }
});
const MiddlewareMatcherInputSchema = _zod.z.object({
    locale: _zod.z.union([
        _zod.z.literal(false),
        _zod.z.undefined()
    ]).optional(),
    has: _zod.z.array(RouteHasSchema).optional(),
    missing: _zod.z.array(RouteHasSchema).optional(),
    source: SourceSchema
}).strict();
const MiddlewareConfigMatcherInputSchema = _zod.z.union([
    SourceSchema,
    _zod.z.array(_zod.z.union([
        SourceSchema,
        MiddlewareMatcherInputSchema
    ], {
        invalid_type_error: 'must be an array of strings or middleware matchers'
    }))
]);
const GlobSchema = _zod.z.string().superRefine((val, ctx)=>{
    try {
        (0, _picomatch.default)(val);
    } catch (err) {
        ctx.addIssue({
            code: _zod.z.ZodIssueCode.custom,
            message: `Invalid glob pattern '${val}': ${err.message}`
        });
    }
});
const MiddlewareConfigInputSchema = _zod.z.object({
    /**
   * The matcher for the middleware.
   */ matcher: MiddlewareConfigMatcherInputSchema.optional(),
    /**
   * The regions that the middleware should run in.
   */ regions: _zod.z.union([
        _zod.z.string(),
        _zod.z.array(_zod.z.string())
    ]).optional(),
    /**
   * A glob, or an array of globs, ignoring dynamic code evaluation for specific
   * files. The globs are relative to your application root folder.
   */ unstable_allowDynamic: _zod.z.union([
        GlobSchema,
        _zod.z.array(GlobSchema)
    ]).optional()
});
const MiddlewareConfigInputSchemaKeys = MiddlewareConfigInputSchema.keyof().options; //# sourceMappingURL=middleware-config.js.map
}}),
"[project]/node_modules/next/dist/build/analysis/get-page-static-info.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getAppPageStaticInfo: null,
    getMiddlewareMatchers: null,
    getPageStaticInfo: null,
    getPagesPageStaticInfo: null,
    getRSCModuleInformation: null,
    hadUnsupportedValue: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getAppPageStaticInfo: function() {
        return getAppPageStaticInfo;
    },
    getMiddlewareMatchers: function() {
        return getMiddlewareMatchers;
    },
    getPageStaticInfo: function() {
        return getPageStaticInfo;
    },
    getPagesPageStaticInfo: function() {
        return getPagesPageStaticInfo;
    },
    getRSCModuleInformation: function() {
        return getRSCModuleInformation;
    },
    hadUnsupportedValue: function() {
        return hadUnsupportedValue;
    }
});
const _fs = __turbopack_require__("[externals]/fs [external] (fs, cjs)");
const _lrucache = __turbopack_require__("[project]/node_modules/next/dist/server/lib/lru-cache.js [app-rsc] (ecmascript)");
const _extractconstvalue = __turbopack_require__("[project]/node_modules/next/dist/build/analysis/extract-const-value.js [app-rsc] (ecmascript)");
const _parsemodule = __turbopack_require__("[project]/node_modules/next/dist/build/analysis/parse-module.js [app-rsc] (ecmascript)");
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _trytoparsepath = __turbopack_require__("[project]/node_modules/next/dist/lib/try-to-parse-path.js [app-rsc] (ecmascript)");
const _isapiroute = __turbopack_require__("[project]/node_modules/next/dist/lib/is-api-route.js [app-rsc] (ecmascript)");
const _isedgeruntime = __turbopack_require__("[project]/node_modules/next/dist/lib/is-edge-runtime.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _pagetypes = __turbopack_require__("[project]/node_modules/next/dist/lib/page-types.js [app-rsc] (ecmascript)");
const _appsegmentconfig = __turbopack_require__("[project]/node_modules/next/dist/build/segment-config/app/app-segment-config.js [app-rsc] (ecmascript)");
const _zod = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/zod.js [app-rsc] (ecmascript)");
const _pagessegmentconfig = __turbopack_require__("[project]/node_modules/next/dist/build/segment-config/pages/pages-segment-config.js [app-rsc] (ecmascript)");
const _middlewareconfig = __turbopack_require__("[project]/node_modules/next/dist/build/segment-config/middleware/middleware-config.js [app-rsc] (ecmascript)");
const _apppaths = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/app-paths.js [app-rsc] (ecmascript)");
const _normalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-page-path.js [app-rsc] (ecmascript)");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const PARSE_PATTERN = /(?<!(_jsx|jsx-))runtime|preferredRegion|getStaticProps|getServerSideProps|generateStaticParams|export const|generateImageMetadata|generateSitemaps/;
const CLIENT_MODULE_LABEL = /\/\* __next_internal_client_entry_do_not_use__ ([^ ]*) (cjs|auto) \*\//;
const ACTION_MODULE_LABEL = /\/\* __next_internal_action_entry_do_not_use__ (\{[^}]+\}) \*\//;
const CLIENT_DIRECTIVE = 'use client';
const SERVER_ACTION_DIRECTIVE = 'use server';
function getRSCModuleInformation(source, isReactServerLayer) {
    const actionsJson = source.match(ACTION_MODULE_LABEL);
    const parsedActionsMeta = actionsJson ? JSON.parse(actionsJson[1]) : undefined;
    const actions = parsedActionsMeta ? Object.values(parsedActionsMeta) : undefined;
    const clientInfoMatch = source.match(CLIENT_MODULE_LABEL);
    const isClientRef = !!clientInfoMatch;
    if (!isReactServerLayer) {
        return {
            type: _constants1.RSC_MODULE_TYPES.client,
            actions,
            actionIds: parsedActionsMeta,
            isClientRef
        };
    }
    const clientRefsString = clientInfoMatch == null ? void 0 : clientInfoMatch[1];
    const clientRefs = clientRefsString ? clientRefsString.split(',') : [];
    const clientEntryType = clientInfoMatch == null ? void 0 : clientInfoMatch[2];
    const type = clientInfoMatch ? _constants1.RSC_MODULE_TYPES.client : _constants1.RSC_MODULE_TYPES.server;
    return {
        type,
        actions,
        actionIds: parsedActionsMeta,
        clientRefs,
        clientEntryType,
        isClientRef
    };
}
/**
 * Receives a parsed AST from SWC and checks if it belongs to a module that
 * requires a runtime to be specified. Those are:
 *   - Modules with `export function getStaticProps | getServerSideProps`
 *   - Modules with `export { getStaticProps | getServerSideProps } <from ...>`
 *   - Modules with `export const runtime = ...`
 */ function checkExports(ast, expectedExports, page) {
    const exportsSet = new Set([
        'getStaticProps',
        'getServerSideProps',
        'generateImageMetadata',
        'generateSitemaps',
        'generateStaticParams'
    ]);
    if (!Array.isArray(ast == null ? void 0 : ast.body)) {
        return {};
    }
    try {
        let getStaticProps = false;
        let getServerSideProps = false;
        let generateImageMetadata = false;
        let generateSitemaps = false;
        let generateStaticParams = false;
        let exports1 = new Set();
        let directives = new Set();
        let hasLeadingNonDirectiveNode = false;
        for (const node of ast.body){
            var _node_declaration, _node_declaration1, _node_declaration_identifier, _node_declaration2;
            // There should be no non-string literals nodes before directives
            if (node.type === 'ExpressionStatement' && node.expression.type === 'StringLiteral') {
                if (!hasLeadingNonDirectiveNode) {
                    const directive = node.expression.value;
                    if (CLIENT_DIRECTIVE === directive) {
                        directives.add('client');
                    }
                    if (SERVER_ACTION_DIRECTIVE === directive) {
                        directives.add('server');
                    }
                }
            } else {
                hasLeadingNonDirectiveNode = true;
            }
            if (node.type === 'ExportDeclaration' && ((_node_declaration = node.declaration) == null ? void 0 : _node_declaration.type) === 'VariableDeclaration') {
                var _node_declaration3;
                for (const declaration of (_node_declaration3 = node.declaration) == null ? void 0 : _node_declaration3.declarations){
                    if (expectedExports.includes(declaration.id.value)) {
                        exports1.add(declaration.id.value);
                    }
                }
            }
            if (node.type === 'ExportDeclaration' && ((_node_declaration1 = node.declaration) == null ? void 0 : _node_declaration1.type) === 'FunctionDeclaration' && exportsSet.has((_node_declaration_identifier = node.declaration.identifier) == null ? void 0 : _node_declaration_identifier.value)) {
                const id = node.declaration.identifier.value;
                getServerSideProps = id === 'getServerSideProps';
                getStaticProps = id === 'getStaticProps';
                generateImageMetadata = id === 'generateImageMetadata';
                generateSitemaps = id === 'generateSitemaps';
                generateStaticParams = id === 'generateStaticParams';
            }
            if (node.type === 'ExportDeclaration' && ((_node_declaration2 = node.declaration) == null ? void 0 : _node_declaration2.type) === 'VariableDeclaration') {
                var _node_declaration_declarations_, _node_declaration4;
                const id = (_node_declaration4 = node.declaration) == null ? void 0 : (_node_declaration_declarations_ = _node_declaration4.declarations[0]) == null ? void 0 : _node_declaration_declarations_.id.value;
                if (exportsSet.has(id)) {
                    getServerSideProps = id === 'getServerSideProps';
                    getStaticProps = id === 'getStaticProps';
                    generateImageMetadata = id === 'generateImageMetadata';
                    generateSitemaps = id === 'generateSitemaps';
                    generateStaticParams = id === 'generateStaticParams';
                }
            }
            if (node.type === 'ExportNamedDeclaration') {
                for (const specifier of node.specifiers){
                    var _specifier_orig;
                    if (specifier.type === 'ExportSpecifier' && ((_specifier_orig = specifier.orig) == null ? void 0 : _specifier_orig.type) === 'Identifier') {
                        const value = specifier.orig.value;
                        if (!getServerSideProps && value === 'getServerSideProps') {
                            getServerSideProps = true;
                        }
                        if (!getStaticProps && value === 'getStaticProps') {
                            getStaticProps = true;
                        }
                        if (!generateImageMetadata && value === 'generateImageMetadata') {
                            generateImageMetadata = true;
                        }
                        if (!generateSitemaps && value === 'generateSitemaps') {
                            generateSitemaps = true;
                        }
                        if (!generateStaticParams && value === 'generateStaticParams') {
                            generateStaticParams = true;
                        }
                        if (expectedExports.includes(value) && !exports1.has(value)) {
                            // An export was found that was actually a re-export, and not a
                            // literal value. We should warn here.
                            _log.warn(`Next.js can't recognize the exported \`${value}\` field in "${page}", it may be re-exported from another file. The default config will be used instead.`);
                        }
                    }
                }
            }
        }
        return {
            getStaticProps,
            getServerSideProps,
            generateImageMetadata,
            generateSitemaps,
            generateStaticParams,
            directives,
            exports: exports1
        };
    } catch  {}
    return {};
}
async function tryToReadFile(filePath, shouldThrow) {
    try {
        return await _fs.promises.readFile(filePath, {
            encoding: 'utf8'
        });
    } catch (error) {
        if (shouldThrow) {
            error.message = `Next.js ERROR: Failed to read file ${filePath}:\n${error.message}`;
            throw error;
        }
    }
}
function getMiddlewareMatchers(matcherOrMatchers, nextConfig) {
    const matchers = Array.isArray(matcherOrMatchers) ? matcherOrMatchers : [
        matcherOrMatchers
    ];
    const { i18n } = nextConfig;
    return matchers.map((matcher)=>{
        matcher = typeof matcher === 'string' ? {
            source: matcher
        } : matcher;
        const originalSource = matcher.source;
        let { source, ...rest } = matcher;
        const isRoot = source === '/';
        if ((i18n == null ? void 0 : i18n.locales) && matcher.locale !== false) {
            source = `/:nextInternalLocale((?!_next/)[^/.]{1,})${isRoot ? '' : source}`;
        }
        source = `/:nextData(_next/data/[^/]{1,})?${source}${isRoot ? `(${nextConfig.i18n ? '|\\.json|' : ''}/?index|/?index\\.json)?` : '{(\\.json)}?'}`;
        if (nextConfig.basePath) {
            source = `${nextConfig.basePath}${source}`;
        }
        // Validate that the source is still.
        const result = _middlewareconfig.SourceSchema.safeParse(source);
        if (!result.success) {
            (0, _zod.reportZodError)('Failed to parse middleware source', result.error);
            // We need to exit here because middleware being built occurs before we
            // finish setting up the server. Exiting here is the only way to ensure
            // that we don't hang.
            process.exit(1);
        }
        return {
            ...rest,
            // We know that parsed.regexStr is not undefined because we already
            // checked that the source is valid.
            regexp: (0, _trytoparsepath.tryToParsePath)(result.data).regexStr,
            originalSource: originalSource || source
        };
    });
}
function parseMiddlewareConfig(page, rawConfig, nextConfig) {
    // If there's no config to parse, then return nothing.
    if (typeof rawConfig !== 'object' || !rawConfig) return {};
    const input = _middlewareconfig.MiddlewareConfigInputSchema.safeParse(rawConfig);
    if (!input.success) {
        (0, _zod.reportZodError)(`${page} contains invalid middleware config`, input.error);
        // We need to exit here because middleware being built occurs before we
        // finish setting up the server. Exiting here is the only way to ensure
        // that we don't hang.
        process.exit(1);
    }
    const config = {};
    if (input.data.matcher) {
        config.matchers = getMiddlewareMatchers(input.data.matcher, nextConfig);
    }
    if (input.data.unstable_allowDynamic) {
        config.unstable_allowDynamic = Array.isArray(input.data.unstable_allowDynamic) ? input.data.unstable_allowDynamic : [
            input.data.unstable_allowDynamic
        ];
    }
    if (input.data.regions) {
        config.regions = input.data.regions;
    }
    return config;
}
const apiRouteWarnings = new _lrucache.LRUCache(250);
function warnAboutExperimentalEdge(apiRoute) {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if (apiRouteWarnings.has(apiRoute)) {
        return;
    }
    _log.warn(apiRoute ? `${apiRoute} provided runtime 'experimental-edge'. It can be updated to 'edge' instead.` : `You are using an experimental edge runtime, the API might change.`);
    apiRouteWarnings.set(apiRoute, 1);
}
let hadUnsupportedValue = false;
const warnedUnsupportedValueMap = new _lrucache.LRUCache(250, ()=>1);
function warnAboutUnsupportedValue(pageFilePath, page, error) {
    hadUnsupportedValue = true;
    const isProductionBuild = ("TURBOPACK compile-time value", "development") === 'production';
    if (// duplicated due to webpack build worker having fresh
    // module scope for each compiler
    process.env.NEXT_COMPILER_NAME !== 'server' || isProductionBuild && warnedUnsupportedValueMap.has(pageFilePath)) {
        return;
    }
    warnedUnsupportedValueMap.set(pageFilePath, true);
    const message = `Next.js can't recognize the exported \`config\` field in ` + (page ? `route "${page}"` : `"${pageFilePath}"`) + ':\n' + error.message + (error.path ? ` at "${error.path}"` : '') + '.\n' + 'Read More - https://nextjs.org/docs/messages/invalid-page-config';
    // for a build we use `Log.error` instead of throwing
    // so that all errors can be logged before exiting the process
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    } else {
        throw new Error(message);
    }
}
async function getAppPageStaticInfo({ pageFilePath, nextConfig, isDev, page }) {
    const content = await tryToReadFile(pageFilePath, !isDev);
    if (!content || !PARSE_PATTERN.test(content)) {
        return {
            type: _pagetypes.PAGE_TYPES.APP,
            config: undefined,
            runtime: undefined,
            preferredRegion: undefined,
            maxDuration: undefined
        };
    }
    const ast = await (0, _parsemodule.parseModule)(pageFilePath, content);
    const { generateStaticParams, generateImageMetadata, generateSitemaps, exports: exports1, directives } = checkExports(ast, _appsegmentconfig.AppSegmentConfigSchemaKeys, page);
    const { type: rsc } = getRSCModuleInformation(content, true);
    const exportedConfig = {};
    if (exports1) {
        for (const property of exports1){
            try {
                exportedConfig[property] = (0, _extractconstvalue.extractExportedConstValue)(ast, property);
            } catch (e) {
                if (e instanceof _extractconstvalue.UnsupportedValueError) {
                    warnAboutUnsupportedValue(pageFilePath, page, e);
                }
            }
        }
    }
    try {
        exportedConfig.config = (0, _extractconstvalue.extractExportedConstValue)(ast, 'config');
    } catch (e) {
        if (e instanceof _extractconstvalue.UnsupportedValueError) {
            warnAboutUnsupportedValue(pageFilePath, page, e);
        }
    // `export config` doesn't exist, or other unknown error thrown by swc, silence them
    }
    const route = (0, _apppaths.normalizeAppPath)(page);
    const config = (0, _appsegmentconfig.parseAppSegmentConfig)(exportedConfig, route);
    // Prevent edge runtime and generateStaticParams in the same file.
    if ((0, _isedgeruntime.isEdgeRuntime)(config.runtime) && generateStaticParams) {
        throw new Error(`Page "${page}" cannot use both \`export const runtime = 'edge'\` and export \`generateStaticParams\`.`);
    }
    // Prevent use client and generateStaticParams in the same file.
    if ((directives == null ? void 0 : directives.has('client')) && generateStaticParams) {
        throw new Error(`Page "${page}" cannot use both "use client" and export function "generateStaticParams()".`);
    }
    return {
        type: _pagetypes.PAGE_TYPES.APP,
        rsc,
        generateImageMetadata,
        generateSitemaps,
        generateStaticParams,
        config,
        middleware: parseMiddlewareConfig(page, exportedConfig.config, nextConfig),
        runtime: config.runtime,
        preferredRegion: config.preferredRegion,
        maxDuration: config.maxDuration
    };
}
async function getPagesPageStaticInfo({ pageFilePath, nextConfig, isDev, page }) {
    var _config_config, _config_config1, _config_config2, _config_config3;
    const content = await tryToReadFile(pageFilePath, !isDev);
    if (!content || !PARSE_PATTERN.test(content)) {
        return {
            type: _pagetypes.PAGE_TYPES.PAGES,
            config: undefined,
            runtime: undefined,
            preferredRegion: undefined,
            maxDuration: undefined
        };
    }
    const ast = await (0, _parsemodule.parseModule)(pageFilePath, content);
    const { getServerSideProps, getStaticProps, exports: exports1 } = checkExports(ast, _pagessegmentconfig.PagesSegmentConfigSchemaKeys, page);
    const { type: rsc } = getRSCModuleInformation(content, true);
    const exportedConfig = {};
    if (exports1) {
        for (const property of exports1){
            try {
                exportedConfig[property] = (0, _extractconstvalue.extractExportedConstValue)(ast, property);
            } catch (e) {
                if (e instanceof _extractconstvalue.UnsupportedValueError) {
                    warnAboutUnsupportedValue(pageFilePath, page, e);
                }
            }
        }
    }
    try {
        exportedConfig.config = (0, _extractconstvalue.extractExportedConstValue)(ast, 'config');
    } catch (e) {
        if (e instanceof _extractconstvalue.UnsupportedValueError) {
            warnAboutUnsupportedValue(pageFilePath, page, e);
        }
    // `export config` doesn't exist, or other unknown error thrown by swc, silence them
    }
    // Validate the config.
    const route = (0, _normalizepagepath.normalizePagePath)(page);
    const config = (0, _pagessegmentconfig.parsePagesSegmentConfig)(exportedConfig, route);
    const isAnAPIRoute = (0, _isapiroute.isAPIRoute)(route);
    const resolvedRuntime = (0, _isedgeruntime.isEdgeRuntime)(config.runtime ?? ((_config_config = config.config) == null ? void 0 : _config_config.runtime)) || getServerSideProps || getStaticProps ? config.runtime ?? ((_config_config1 = config.config) == null ? void 0 : _config_config1.runtime) : undefined;
    if (resolvedRuntime === _constants.SERVER_RUNTIME.experimentalEdge) {
        warnAboutExperimentalEdge(isAnAPIRoute ? page : null);
    }
    if (resolvedRuntime === _constants.SERVER_RUNTIME.edge && page && !isAnAPIRoute) {
        const message = `Page ${page} provided runtime 'edge', the edge runtime for rendering is currently experimental. Use runtime 'experimental-edge' instead.`;
        if (isDev) {
            _log.error(message);
        } else {
            throw new Error(message);
        }
    }
    return {
        type: _pagetypes.PAGE_TYPES.PAGES,
        getStaticProps,
        getServerSideProps,
        rsc,
        config,
        middleware: parseMiddlewareConfig(page, exportedConfig.config, nextConfig),
        runtime: resolvedRuntime,
        preferredRegion: (_config_config2 = config.config) == null ? void 0 : _config_config2.regions,
        maxDuration: config.maxDuration ?? ((_config_config3 = config.config) == null ? void 0 : _config_config3.maxDuration)
    };
}
async function getPageStaticInfo(params) {
    if (params.pageType === _pagetypes.PAGE_TYPES.APP) {
        return getAppPageStaticInfo(params);
    }
    return getPagesPageStaticInfo(params);
} //# sourceMappingURL=get-page-static-info.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getModuleBuildInfo", {
    enumerable: true,
    get: function() {
        return getModuleBuildInfo;
    }
});
function getModuleBuildInfo(webpackModule) {
    return webpackModule.buildInfo;
} //# sourceMappingURL=get-module-build-info.js.map
}}),
"[project]/node_modules/next/dist/build/load-entrypoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "loadEntrypoint", {
    enumerable: true,
    get: function() {
        return loadEntrypoint;
    }
});
const _promises = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/fs/promises [external] (fs/promises, cjs)"));
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// NOTE: this should be updated if this loader file is moved.
const PACKAGE_ROOT = _path.default.normalize(_path.default.join(__dirname, '../../..'));
const TEMPLATE_FOLDER = _path.default.join(__dirname, 'templates');
const TEMPLATES_ESM_FOLDER = _path.default.normalize(_path.default.join(__dirname, '../../dist/esm/build/templates'));
async function loadEntrypoint(entrypoint, replacements, injections, imports, importMaps) {
    const filepath = _path.default.resolve(_path.default.join(TEMPLATES_ESM_FOLDER, `${entrypoint}.js`));
    let file = await _promises.default.readFile(filepath, 'utf8');
    const importMapItems = {};
    for (const key of Object.keys(importMaps || {})){
        importMapItems[key] = {};
        for (const [innerKey, importPath] of Object.entries((importMaps == null ? void 0 : importMaps[key]) || {})){
            file = `import ${key}_${innerKey} from "${importPath}"\n${file}`;
            importMapItems[key][innerKey] = `${key}_${innerKey}`;
        }
    }
    file = file.replace(new RegExp(`cacheHandlers = {}`), `cacheHandlers = {\n${Object.entries(importMapItems['cacheHandlers'] || {}).map(([key, value])=>{
        return `${key}: ${value}`;
    }).join(',')}\n}`);
    // Update the relative imports to be absolute. This will update any relative
    // imports to be relative to the root of the `next` package.
    let count = 0;
    file = file.replaceAll(/from '(\..*)'|import '(\..*)'/g, function(_, fromRequest, importRequest) {
        count++;
        const relative = _path.default.relative(PACKAGE_ROOT, _path.default.resolve(TEMPLATE_FOLDER, fromRequest ?? importRequest)) // Ensure that we use linux style path separators for node.
        .replace(/\\/g, '/');
        // Verify that the relative import is relative to the `next` package. This
        // will catch cases where the constants at the top of the file were not
        // updated after the file was moved.
        if (!relative.startsWith('next/')) {
            throw new Error(`Invariant: Expected relative import to start with "next/", found "${relative}"`);
        }
        return fromRequest ? `from ${JSON.stringify(relative)}` : `import ${JSON.stringify(relative)}`;
    });
    // Verify that at least one import was replaced. It's the case today where
    // every template file has at least one import to update, so this ensures that
    // we don't accidentally remove the import replacement code or use the wrong
    // template file.
    if (count === 0) {
        throw new Error('Invariant: Expected to replace at least one import');
    }
    const replaced = new Set();
    // Replace all the template variables with the actual values. If a template
    // variable is missing, throw an error.
    file = file.replaceAll(new RegExp(`${Object.keys(replacements).map((k)=>`'${k}'`).join('|')}`, 'g'), (match)=>{
        const key = JSON.parse(match.replace(/'/g, `"`));
        if (!(key in replacements)) {
            throw new Error(`Invariant: Unexpected template variable ${key}`);
        }
        replaced.add(key);
        return JSON.stringify(replacements[key]);
    });
    // Check to see if there's any remaining template variables.
    let matches = file.match(/VAR_[A-Z_]+/g);
    if (matches) {
        throw new Error(`Invariant: Expected to replace all template variables, found ${matches.join(', ')}`);
    }
    // Check to see if any template variable was provided but not used.
    if (replaced.size !== Object.keys(replacements).length) {
        // Find the difference between the provided replacements and the replaced
        // template variables. This will let us notify the user of any template
        // variables that were not used but were provided.
        const difference = Object.keys(replacements).filter((key)=>!replaced.has(key));
        throw new Error(`Invariant: Expected to replace all template variables, missing ${difference.join(', ')} in template`);
    }
    // Replace the injections.
    const injected = new Set();
    if (injections) {
        // Track all the injections to ensure that we're not missing any.
        file = file.replaceAll(new RegExp(`// INJECT:(${Object.keys(injections).join('|')})`, 'g'), (_, key)=>{
            if (!(key in injections)) {
                throw new Error(`Invariant: Unexpected injection ${key}`);
            }
            injected.add(key);
            return `const ${key} = ${injections[key]}`;
        });
    }
    // Check to see if there's any remaining injections.
    matches = file.match(/\/\/ INJECT:[A-Za-z0-9_]+/g);
    if (matches) {
        throw new Error(`Invariant: Expected to inject all injections, found ${matches.join(', ')}`);
    }
    // Check to see if any injection was provided but not used.
    if (injected.size !== Object.keys(injections ?? {}).length) {
        // Find the difference between the provided injections and the injected
        // injections. This will let us notify the user of any injections that were
        // not used but were provided.
        const difference = Object.keys(injections ?? {}).filter((key)=>!injected.has(key));
        throw new Error(`Invariant: Expected to inject all injections, missing ${difference.join(', ')} in template`);
    }
    // Replace the optional imports.
    const importsAdded = new Set();
    if (imports) {
        // Track all the imports to ensure that we're not missing any.
        file = file.replaceAll(new RegExp(`// OPTIONAL_IMPORT:(\\* as )?(${Object.keys(imports).join('|')})`, 'g'), (_, asNamespace = '', key)=>{
            if (!(key in imports)) {
                throw new Error(`Invariant: Unexpected optional import ${key}`);
            }
            importsAdded.add(key);
            if (imports[key]) {
                return `import ${asNamespace}${key} from ${JSON.stringify(imports[key])}`;
            } else {
                return `const ${key} = null`;
            }
        });
    }
    // Check to see if there's any remaining imports.
    matches = file.match(/\/\/ OPTIONAL_IMPORT:(\* as )?[A-Za-z0-9_]+/g);
    if (matches) {
        throw new Error(`Invariant: Expected to inject all imports, found ${matches.join(', ')}`);
    }
    // Check to see if any import was provided but not used.
    if (importsAdded.size !== Object.keys(imports ?? {}).length) {
        // Find the difference between the provided imports and the injected
        // imports. This will let us notify the user of any imports that were
        // not used but were provided.
        const difference = Object.keys(imports ?? {}).filter((key)=>!importsAdded.has(key));
        throw new Error(`Invariant: Expected to inject all imports, missing ${difference.join(', ')} in template`);
    }
    return file;
} //# sourceMappingURL=load-entrypoint.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/next-middleware-loader.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    decodeMatchers: null,
    default: null,
    encodeMatchers: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    decodeMatchers: function() {
        return decodeMatchers;
    },
    default: function() {
        return middlewareLoader;
    },
    encodeMatchers: function() {
        return encodeMatchers;
    }
});
const _getmodulebuildinfo = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _loadentrypoint = __turbopack_require__("[project]/node_modules/next/dist/build/load-entrypoint.js [app-rsc] (ecmascript)");
function encodeMatchers(matchers) {
    return Buffer.from(JSON.stringify(matchers)).toString('base64');
}
function decodeMatchers(encodedMatchers) {
    return JSON.parse(Buffer.from(encodedMatchers, 'base64').toString());
}
async function middlewareLoader() {
    const { absolutePagePath, page, rootDir, matchers: encodedMatchers, preferredRegion, middlewareConfig: middlewareConfigBase64 } = this.getOptions();
    const matchers = encodedMatchers ? decodeMatchers(encodedMatchers) : undefined;
    const pagePath = this.utils.contextify(this.context || this.rootContext, absolutePagePath);
    const middlewareConfig = JSON.parse(Buffer.from(middlewareConfigBase64, 'base64').toString());
    const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(this._module);
    buildInfo.nextEdgeMiddleware = {
        matchers,
        page: page.replace(new RegExp(`/${_constants.MIDDLEWARE_LOCATION_REGEXP}$`), '') || '/'
    };
    buildInfo.rootDir = rootDir;
    buildInfo.route = {
        page,
        absolutePagePath,
        preferredRegion,
        middlewareConfig
    };
    return await (0, _loadentrypoint.loadEntrypoint)('middleware', {
        VAR_USERLAND: pagePath,
        VAR_DEFINITION_PAGE: page
    });
} //# sourceMappingURL=next-middleware-loader.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    decodeFromBase64: null,
    encodeToBase64: null,
    getActionsFromBuildInfo: null,
    getLoaderModuleNamedExports: null,
    isCSSMod: null,
    isClientComponentEntryModule: null,
    regexCSS: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    decodeFromBase64: function() {
        return decodeFromBase64;
    },
    encodeToBase64: function() {
        return encodeToBase64;
    },
    getActionsFromBuildInfo: function() {
        return getActionsFromBuildInfo;
    },
    getLoaderModuleNamedExports: function() {
        return getLoaderModuleNamedExports;
    },
    isCSSMod: function() {
        return isCSSMod;
    },
    isClientComponentEntryModule: function() {
        return isClientComponentEntryModule;
    },
    regexCSS: function() {
        return regexCSS;
    }
});
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const imageExtensions = [
    'jpg',
    'jpeg',
    'png',
    'webp',
    'avif',
    'ico',
    'svg'
];
const imageRegex = new RegExp(`\\.(${imageExtensions.join('|')})$`);
// Determine if the whole module is client action, 'use server' in nested closure in the client module
function isActionClientLayerModule(mod) {
    const rscInfo = mod.buildInfo.rsc;
    return !!((rscInfo == null ? void 0 : rscInfo.actions) && (rscInfo == null ? void 0 : rscInfo.type) === _constants.RSC_MODULE_TYPES.client);
}
function isClientComponentEntryModule(mod) {
    const rscInfo = mod.buildInfo.rsc;
    const hasClientDirective = rscInfo == null ? void 0 : rscInfo.isClientRef;
    const isActionLayerEntry = isActionClientLayerModule(mod);
    return hasClientDirective || isActionLayerEntry || imageRegex.test(mod.resource);
}
const regexCSS = /\.(css|scss|sass)(\?.*)?$/;
function isCSSMod(mod) {
    var _mod_loaders;
    return !!(mod.type === 'css/mini-extract' || mod.resource && regexCSS.test(mod.resource) || ((_mod_loaders = mod.loaders) == null ? void 0 : _mod_loaders.some(({ loader })=>loader.includes('next-style-loader/index.js') || loader.includes('mini-css-extract-plugin/loader.js') || loader.includes('@vanilla-extract/webpack-plugin/loader/'))));
}
function getActionsFromBuildInfo(mod) {
    var _mod_buildInfo_rsc, _mod_buildInfo;
    return (_mod_buildInfo = mod.buildInfo) == null ? void 0 : (_mod_buildInfo_rsc = _mod_buildInfo.rsc) == null ? void 0 : _mod_buildInfo_rsc.actionIds;
}
function encodeToBase64(obj) {
    return Buffer.from(JSON.stringify(obj)).toString('base64');
}
function decodeFromBase64(str) {
    return JSON.parse(Buffer.from(str, 'base64').toString('utf8'));
}
async function getLoaderModuleNamedExports(resourcePath, context) {
    var _mod_dependencies;
    const mod = await new Promise((res, rej)=>{
        context.loadModule(resourcePath, (err, _source, _sourceMap, module1)=>{
            if (err) {
                return rej(err);
            }
            res(module1);
        });
    });
    const exportNames = ((_mod_dependencies = mod.dependencies) == null ? void 0 : _mod_dependencies.filter((dep)=>{
        return [
            'HarmonyExportImportedSpecifierDependency',
            'HarmonyExportSpecifierDependency'
        ].includes(dep.constructor.name) && 'name' in dep && dep.name !== 'default';
    }).map((dep)=>{
        return dep.name;
    })) || [];
    return exportNames;
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    getRouteLoaderEntry: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    getRouteLoaderEntry: function() {
        return getRouteLoaderEntry;
    }
});
const _querystring = __turbopack_require__("[externals]/querystring [external] (querystring, cjs)");
const _getmodulebuildinfo = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)");
const _routekind = __turbopack_require__("[project]/node_modules/next/dist/server/route-kind.js [app-rsc] (ecmascript)");
const _normalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-page-path.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/utils.js [app-rsc] (ecmascript)");
const _utils1 = __turbopack_require__("[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)");
const _loadentrypoint = __turbopack_require__("[project]/node_modules/next/dist/build/load-entrypoint.js [app-rsc] (ecmascript)");
function getRouteLoaderEntry(options) {
    switch(options.kind){
        case _routekind.RouteKind.PAGES:
            {
                const query = {
                    kind: options.kind,
                    page: options.page,
                    preferredRegion: options.preferredRegion,
                    absolutePagePath: options.absolutePagePath,
                    // These are the path references to the internal components that may be
                    // overridden by userland components.
                    absoluteAppPath: options.pages['/_app'],
                    absoluteDocumentPath: options.pages['/_document'],
                    middlewareConfigBase64: (0, _utils.encodeToBase64)(options.middlewareConfig)
                };
                return `next-route-loader?${(0, _querystring.stringify)(query)}!`;
            }
        case _routekind.RouteKind.PAGES_API:
            {
                const query = {
                    kind: options.kind,
                    page: options.page,
                    preferredRegion: options.preferredRegion,
                    absolutePagePath: options.absolutePagePath,
                    middlewareConfigBase64: (0, _utils.encodeToBase64)(options.middlewareConfig)
                };
                return `next-route-loader?${(0, _querystring.stringify)(query)}!`;
            }
        default:
            {
                throw new Error('Invariant: Unexpected route kind');
            }
    }
}
const loadPages = async ({ page, absolutePagePath, absoluteDocumentPath, absoluteAppPath, preferredRegion, middlewareConfigBase64 }, buildInfo)=>{
    const middlewareConfig = (0, _utils.decodeFromBase64)(middlewareConfigBase64);
    // Attach build info to the module.
    buildInfo.route = {
        page,
        absolutePagePath,
        preferredRegion,
        middlewareConfig
    };
    let file = await (0, _loadentrypoint.loadEntrypoint)('pages', {
        VAR_USERLAND: absolutePagePath,
        VAR_MODULE_DOCUMENT: absoluteDocumentPath,
        VAR_MODULE_APP: absoluteAppPath,
        VAR_DEFINITION_PAGE: (0, _normalizepagepath.normalizePagePath)(page),
        VAR_DEFINITION_PATHNAME: page
    });
    if ((0, _utils1.isInstrumentationHookFile)(page)) {
        // When we're building the instrumentation page (only when the
        // instrumentation file conflicts with a page also labeled
        // /instrumentation) hoist the `register` method.
        file += '\nexport const register = hoist(userland, "register")';
    }
    return file;
};
const loadPagesAPI = async ({ page, absolutePagePath, preferredRegion, middlewareConfigBase64 }, buildInfo)=>{
    const middlewareConfig = (0, _utils.decodeFromBase64)(middlewareConfigBase64);
    // Attach build info to the module.
    buildInfo.route = {
        page,
        absolutePagePath,
        preferredRegion,
        middlewareConfig
    };
    return await (0, _loadentrypoint.loadEntrypoint)('pages-api', {
        VAR_USERLAND: absolutePagePath,
        VAR_DEFINITION_PAGE: (0, _normalizepagepath.normalizePagePath)(page),
        VAR_DEFINITION_PATHNAME: page
    });
};
/**
 * Handles the `next-route-loader` options.
 * @returns the loader definition function
 */ const loader = async function() {
    if (!this._module) {
        throw new Error('Invariant: expected this to reference a module');
    }
    const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(this._module);
    const opts = this.getOptions();
    switch(opts.kind){
        case _routekind.RouteKind.PAGES:
            {
                return await loadPages(opts, buildInfo);
            }
        case _routekind.RouteKind.PAGES_API:
            {
                return await loadPagesAPI(opts, buildInfo);
            }
        default:
            {
                throw new Error('Invariant: Unexpected route kind');
            }
    }
};
const _default = loader; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/deployment-id.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getDeploymentIdQueryOrEmptyString", {
    enumerable: true,
    get: function() {
        return getDeploymentIdQueryOrEmptyString;
    }
});
function getDeploymentIdQueryOrEmptyString() {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    return '';
} //# sourceMappingURL=deployment-id.js.map
}}),
"[project]/node_modules/next/dist/build/entries.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    createEntrypoints: null,
    createPagesMapping: null,
    finalizeEntrypoint: null,
    getAppEntry: null,
    getClientEntry: null,
    getEdgeServerEntry: null,
    getInstrumentationEntry: null,
    getPageFilePath: null,
    getPageFromPath: null,
    getStaticInfoIncludingLayouts: null,
    runDependingOnPageType: null,
    sortByPageExts: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createEntrypoints: function() {
        return createEntrypoints;
    },
    createPagesMapping: function() {
        return createPagesMapping;
    },
    finalizeEntrypoint: function() {
        return finalizeEntrypoint;
    },
    getAppEntry: function() {
        return getAppEntry;
    },
    getClientEntry: function() {
        return getClientEntry;
    },
    getEdgeServerEntry: function() {
        return getEdgeServerEntry;
    },
    getInstrumentationEntry: function() {
        return getInstrumentationEntry;
    },
    getPageFilePath: function() {
        return getPageFilePath;
    },
    getPageFromPath: function() {
        return getPageFromPath;
    },
    getStaticInfoIncludingLayouts: function() {
        return getStaticInfoIncludingLayouts;
    },
    runDependingOnPageType: function() {
        return runDependingOnPageType;
    },
    sortByPageExts: function() {
        return sortByPageExts;
    }
});
const _path = __turbopack_require__("[externals]/path [external] (path, cjs)");
const _querystring = __turbopack_require__("[externals]/querystring [external] (querystring, cjs)");
const _fs = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/fs [external] (fs, cjs)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _isapiroute = __turbopack_require__("[project]/node_modules/next/dist/lib/is-api-route.js [app-rsc] (ecmascript)");
const _isedgeruntime = __turbopack_require__("[project]/node_modules/next/dist/lib/is-edge-runtime.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)");
const _getpagestaticinfo = __turbopack_require__("[project]/node_modules/next/dist/build/analysis/get-page-static-info.js [app-rsc] (ecmascript)");
const _normalizepathsep = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-path-sep.js [app-rsc] (ecmascript)");
const _normalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-page-path.js [app-rsc] (ecmascript)");
const _apppaths = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/app-paths.js [app-rsc] (ecmascript)");
const _nextmiddlewareloader = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/next-middleware-loader.js [app-rsc] (ecmascript)");
const _isapprouteroute = __turbopack_require__("[project]/node_modules/next/dist/lib/is-app-route-route.js [app-rsc] (ecmascript)");
const _getmetadataroute = __turbopack_require__("[project]/node_modules/next/dist/lib/metadata/get-metadata-route.js [app-rsc] (ecmascript)");
const _nextrouteloader = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js [app-rsc] (ecmascript)");
const _isinternalcomponent = __turbopack_require__("[project]/node_modules/next/dist/lib/is-internal-component.js [app-rsc] (ecmascript)");
const _ismetadataroute = __turbopack_require__("[project]/node_modules/next/dist/lib/metadata/is-metadata-route.js [app-rsc] (ecmascript)");
const _routekind = __turbopack_require__("[project]/node_modules/next/dist/server/route-kind.js [app-rsc] (ecmascript)");
const _utils1 = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/utils.js [app-rsc] (ecmascript)");
const _normalizecatchallroutes = __turbopack_require__("[project]/node_modules/next/dist/build/normalize-catchall-routes.js [app-rsc] (ecmascript)");
const _pagetypes = __turbopack_require__("[project]/node_modules/next/dist/lib/page-types.js [app-rsc] (ecmascript)");
const _isapppageroute = __turbopack_require__("[project]/node_modules/next/dist/lib/is-app-page-route.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function sortByPageExts(pageExtensions) {
    return (a, b)=>{
        // prioritize entries according to pageExtensions order
        // for consistency as fs order can differ across systems
        // NOTE: this is reversed so preferred comes last and
        // overrides prior
        const aExt = (0, _path.extname)(a);
        const bExt = (0, _path.extname)(b);
        const aNoExt = a.substring(0, a.length - aExt.length);
        const bNoExt = a.substring(0, b.length - bExt.length);
        if (aNoExt !== bNoExt) return 0;
        // find extension index (skip '.' as pageExtensions doesn't have it)
        const aExtIndex = pageExtensions.indexOf(aExt.substring(1));
        const bExtIndex = pageExtensions.indexOf(bExt.substring(1));
        return bExtIndex - aExtIndex;
    };
}
async function getStaticInfoIncludingLayouts({ isInsideAppDir, pageExtensions, pageFilePath, appDir, config: nextConfig, isDev, page }) {
    // TODO: sync types for pages: PAGE_TYPES, ROUTER_TYPE, 'app' | 'pages', etc.
    const pageType = isInsideAppDir ? _pagetypes.PAGE_TYPES.APP : _pagetypes.PAGE_TYPES.PAGES;
    const pageStaticInfo = await (0, _getpagestaticinfo.getPageStaticInfo)({
        nextConfig,
        pageFilePath,
        isDev,
        page,
        pageType
    });
    if (pageStaticInfo.type === _pagetypes.PAGE_TYPES.PAGES || !appDir) {
        return pageStaticInfo;
    }
    const segments = [
        pageStaticInfo
    ];
    // inherit from layout files only if it's a page route
    if ((0, _isapppageroute.isAppPageRoute)(page)) {
        const layoutFiles = [];
        const potentialLayoutFiles = pageExtensions.map((ext)=>'layout.' + ext);
        let dir = (0, _path.dirname)(pageFilePath);
        // Uses startsWith to not include directories further up.
        while(dir.startsWith(appDir)){
            for (const potentialLayoutFile of potentialLayoutFiles){
                const layoutFile = (0, _path.join)(dir, potentialLayoutFile);
                if (!_fs.default.existsSync(layoutFile)) {
                    continue;
                }
                layoutFiles.push(layoutFile);
            }
            // Walk up the directory tree
            dir = (0, _path.join)(dir, '..');
        }
        for (const layoutFile of layoutFiles){
            const layoutStaticInfo = await (0, _getpagestaticinfo.getAppPageStaticInfo)({
                nextConfig,
                pageFilePath: layoutFile,
                isDev,
                page,
                pageType: isInsideAppDir ? _pagetypes.PAGE_TYPES.APP : _pagetypes.PAGE_TYPES.PAGES
            });
            segments.unshift(layoutStaticInfo);
        }
    }
    const config = (0, _utils.reduceAppConfig)(segments);
    return {
        ...pageStaticInfo,
        config,
        runtime: config.runtime,
        preferredRegion: config.preferredRegion,
        maxDuration: config.maxDuration
    };
}
function getPageFromPath(pagePath, pageExtensions) {
    let page = (0, _normalizepathsep.normalizePathSep)(pagePath.replace(new RegExp(`\\.+(${pageExtensions.join('|')})$`), ''));
    page = page.replace(/\/index$/, '');
    return page === '' ? '/' : page;
}
function getPageFilePath({ absolutePagePath, pagesDir, appDir, rootDir }) {
    if (absolutePagePath.startsWith(_constants.PAGES_DIR_ALIAS) && pagesDir) {
        return absolutePagePath.replace(_constants.PAGES_DIR_ALIAS, pagesDir);
    }
    if (absolutePagePath.startsWith(_constants.APP_DIR_ALIAS) && appDir) {
        return absolutePagePath.replace(_constants.APP_DIR_ALIAS, appDir);
    }
    if (absolutePagePath.startsWith(_constants.ROOT_DIR_ALIAS)) {
        return absolutePagePath.replace(_constants.ROOT_DIR_ALIAS, rootDir);
    }
    return (()=>{
        const e = new Error("Cannot find module as expression is too dynamic");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })();
}
async function createPagesMapping({ isDev, pageExtensions, pagePaths, pagesType, pagesDir, appDir }) {
    const isAppRoute = pagesType === 'app';
    const pages = {};
    const promises = pagePaths.map(async (pagePath)=>{
        // Do not process .d.ts files as routes
        if (pagePath.endsWith('.d.ts') && pageExtensions.includes('ts')) {
            return;
        }
        let pageKey = getPageFromPath(pagePath, pageExtensions);
        if (isAppRoute) {
            pageKey = pageKey.replace(/%5F/g, '_');
            if (pageKey === '/not-found') {
                pageKey = _constants1.UNDERSCORE_NOT_FOUND_ROUTE_ENTRY;
            }
        }
        const normalizedPath = (0, _normalizepathsep.normalizePathSep)((0, _path.join)(pagesType === 'pages' ? _constants.PAGES_DIR_ALIAS : pagesType === 'app' ? _constants.APP_DIR_ALIAS : _constants.ROOT_DIR_ALIAS, pagePath));
        let route = pagesType === 'app' ? (0, _getmetadataroute.normalizeMetadataRoute)(pageKey) : pageKey;
        if (pagesType === 'app' && (0, _ismetadataroute.isMetadataRouteFile)(pagePath, pageExtensions, true)) {
            const filePath = (0, _path.join)(appDir, pagePath);
            const staticInfo = await (0, _getpagestaticinfo.getPageStaticInfo)({
                nextConfig: {},
                pageFilePath: filePath,
                isDev,
                page: pageKey,
                pageType: pagesType
            });
            route = (0, _getmetadataroute.normalizeMetadataPageToRoute)(route, !!(staticInfo.generateImageMetadata || staticInfo.generateSitemaps));
        }
        pages[route] = normalizedPath;
    });
    await Promise.all(promises);
    switch(pagesType){
        case _pagetypes.PAGE_TYPES.ROOT:
            {
                return pages;
            }
        case _pagetypes.PAGE_TYPES.APP:
            {
                const hasAppPages = Object.keys(pages).some((page)=>page.endsWith('/page'));
                return {
                    // If there's any app pages existed, add a default not-found page.
                    // If there's any custom not-found page existed, it will override the default one.
                    ...hasAppPages && {
                        [_constants1.UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]: 'next/dist/client/components/not-found-error'
                    },
                    ...pages
                };
            }
        case _pagetypes.PAGE_TYPES.PAGES:
            {
                if (isDev) {
                    delete pages['/_app'];
                    delete pages['/_error'];
                    delete pages['/_document'];
                }
                // In development we always alias these to allow Webpack to fallback to
                // the correct source file so that HMR can work properly when a file is
                // added or removed.
                const root = isDev && pagesDir ? _constants.PAGES_DIR_ALIAS : 'next/dist/pages';
                return {
                    '/_app': `${root}/_app`,
                    '/_error': `${root}/_error`,
                    '/_document': `${root}/_document`,
                    ...pages
                };
            }
        default:
            {
                return {};
            }
    }
}
function getEdgeServerEntry(opts) {
    var _opts_config_experimental_sri;
    if (opts.pagesType === 'app' && (0, _isapprouteroute.isAppRouteRoute)(opts.page) && opts.appDirLoader) {
        const loaderParams = {
            absolutePagePath: opts.absolutePagePath,
            page: opts.page,
            appDirLoader: Buffer.from(opts.appDirLoader || '').toString('base64'),
            nextConfig: Buffer.from(JSON.stringify(opts.config)).toString('base64'),
            preferredRegion: opts.preferredRegion,
            middlewareConfig: Buffer.from(JSON.stringify(opts.middlewareConfig || {})).toString('base64')
        };
        return {
            import: `next-edge-app-route-loader?${(0, _querystring.stringify)(loaderParams)}!`,
            layer: _constants.WEBPACK_LAYERS.reactServerComponents
        };
    }
    if ((0, _utils.isMiddlewareFile)(opts.page)) {
        var _opts_middleware;
        const loaderParams = {
            absolutePagePath: opts.absolutePagePath,
            page: opts.page,
            rootDir: opts.rootDir,
            matchers: ((_opts_middleware = opts.middleware) == null ? void 0 : _opts_middleware.matchers) ? (0, _nextmiddlewareloader.encodeMatchers)(opts.middleware.matchers) : '',
            preferredRegion: opts.preferredRegion,
            middlewareConfig: Buffer.from(JSON.stringify(opts.middlewareConfig || {})).toString('base64')
        };
        return `next-middleware-loader?${(0, _querystring.stringify)(loaderParams)}!`;
    }
    if ((0, _isapiroute.isAPIRoute)(opts.page)) {
        const loaderParams = {
            absolutePagePath: opts.absolutePagePath,
            page: opts.page,
            rootDir: opts.rootDir,
            preferredRegion: opts.preferredRegion,
            middlewareConfig: Buffer.from(JSON.stringify(opts.middlewareConfig || {})).toString('base64')
        };
        return `next-edge-function-loader?${(0, _querystring.stringify)(loaderParams)}!`;
    }
    const loaderParams = {
        absolute500Path: opts.pages['/500'] || '',
        absoluteAppPath: opts.pages['/_app'],
        absoluteDocumentPath: opts.pages['/_document'],
        absoluteErrorPath: opts.pages['/_error'],
        absolutePagePath: opts.absolutePagePath,
        dev: opts.isDev,
        isServerComponent: opts.isServerComponent,
        page: opts.page,
        stringifiedConfig: Buffer.from(JSON.stringify(opts.config)).toString('base64'),
        pagesType: opts.pagesType,
        appDirLoader: Buffer.from(opts.appDirLoader || '').toString('base64'),
        sriEnabled: !opts.isDev && !!((_opts_config_experimental_sri = opts.config.experimental.sri) == null ? void 0 : _opts_config_experimental_sri.algorithm),
        cacheHandler: opts.config.cacheHandler,
        preferredRegion: opts.preferredRegion,
        middlewareConfig: Buffer.from(JSON.stringify(opts.middlewareConfig || {})).toString('base64'),
        serverActions: opts.config.experimental.serverActions,
        cacheHandlers: JSON.stringify(opts.config.experimental.cacheHandlers || {})
    };
    return {
        import: `next-edge-ssr-loader?${JSON.stringify(loaderParams)}!`,
        // The Edge bundle includes the server in its entrypoint, so it has to
        // be in the SSR layer — we later convert the page request to the RSC layer
        // via a webpack rule.
        layer: opts.appDirLoader ? _constants.WEBPACK_LAYERS.serverSideRendering : undefined
    };
}
function getInstrumentationEntry(opts) {
    // the '../' is needed to make sure the file is not chunked
    const filename = `${opts.isEdgeServer ? 'edge-' : opts.isDev ? '' : '../'}${_constants.INSTRUMENTATION_HOOK_FILENAME}.js`;
    return {
        import: opts.absolutePagePath,
        filename,
        layer: _constants.WEBPACK_LAYERS.instrument
    };
}
function getAppEntry(opts) {
    return {
        import: `next-app-loader?${(0, _querystring.stringify)(opts)}!`,
        layer: _constants.WEBPACK_LAYERS.reactServerComponents
    };
}
function getClientEntry(opts) {
    const loaderOptions = {
        absolutePagePath: opts.absolutePagePath,
        page: opts.page
    };
    const pageLoader = `next-client-pages-loader?${(0, _querystring.stringify)(loaderOptions)}!`;
    // Make sure next/router is a dependency of _app or else chunk splitting
    // might cause the router to not be able to load causing hydration
    // to fail
    return opts.page === '/_app' ? [
        pageLoader,
        "[project]/node_modules/next/dist/client/router.js [app-rsc] (ecmascript)"
    ] : pageLoader;
}
function runDependingOnPageType(params) {
    if (params.pageType === _pagetypes.PAGE_TYPES.ROOT && (0, _utils.isInstrumentationHookFile)(params.page)) {
        params.onServer();
        params.onEdgeServer();
        return;
    }
    if ((0, _utils.isMiddlewareFile)(params.page)) {
        params.onEdgeServer();
        return;
    }
    if ((0, _isapiroute.isAPIRoute)(params.page)) {
        if ((0, _isedgeruntime.isEdgeRuntime)(params.pageRuntime)) {
            params.onEdgeServer();
            return;
        }
        params.onServer();
        return;
    }
    if (params.page === '/_document') {
        params.onServer();
        return;
    }
    if (params.page === '/_app' || params.page === '/_error' || params.page === '/404' || params.page === '/500') {
        params.onClient();
        params.onServer();
        return;
    }
    if ((0, _isedgeruntime.isEdgeRuntime)(params.pageRuntime)) {
        params.onClient();
        params.onEdgeServer();
        return;
    }
    params.onClient();
    params.onServer();
    return;
}
async function createEntrypoints(params) {
    const { config, pages, pagesDir, isDev, rootDir, rootPaths, appDir, appPaths, pageExtensions } = params;
    const edgeServer = {};
    const server = {};
    const client = {};
    let middlewareMatchers = undefined;
    let appPathsPerRoute = {};
    if (appDir && appPaths) {
        for(const pathname in appPaths){
            const normalizedPath = (0, _apppaths.normalizeAppPath)(pathname);
            const actualPath = appPaths[pathname];
            if (!appPathsPerRoute[normalizedPath]) {
                appPathsPerRoute[normalizedPath] = [];
            }
            appPathsPerRoute[normalizedPath].push(getPageFromPath(actualPath, pageExtensions).replace(_constants.APP_DIR_ALIAS, ''));
        }
        // TODO: find a better place to do this
        (0, _normalizecatchallroutes.normalizeCatchAllRoutes)(appPathsPerRoute);
        // Make sure to sort parallel routes to make the result deterministic.
        appPathsPerRoute = Object.fromEntries(Object.entries(appPathsPerRoute).map(([k, v])=>[
                k,
                v.sort()
            ]));
    }
    const getEntryHandler = (mappings, pagesType)=>async (page)=>{
            const bundleFile = (0, _normalizepagepath.normalizePagePath)(page);
            const clientBundlePath = _path.posix.join(pagesType, bundleFile);
            const serverBundlePath = pagesType === _pagetypes.PAGE_TYPES.PAGES ? _path.posix.join('pages', bundleFile) : pagesType === _pagetypes.PAGE_TYPES.APP ? _path.posix.join('app', bundleFile) : bundleFile.slice(1);
            const absolutePagePath = mappings[page];
            // Handle paths that have aliases
            const pageFilePath = getPageFilePath({
                absolutePagePath,
                pagesDir,
                appDir,
                rootDir
            });
            const isInsideAppDir = !!appDir && (absolutePagePath.startsWith(_constants.APP_DIR_ALIAS) || absolutePagePath.startsWith(appDir));
            const staticInfo = await getStaticInfoIncludingLayouts({
                isInsideAppDir,
                pageExtensions,
                pageFilePath,
                appDir,
                config,
                isDev,
                page
            });
            // TODO(timneutkens): remove this
            const isServerComponent = isInsideAppDir && staticInfo.rsc !== _constants1.RSC_MODULE_TYPES.client;
            if ((0, _utils.isMiddlewareFile)(page)) {
                var _staticInfo_middleware;
                middlewareMatchers = ((_staticInfo_middleware = staticInfo.middleware) == null ? void 0 : _staticInfo_middleware.matchers) ?? [
                    {
                        regexp: '.*',
                        originalSource: '/:path*'
                    }
                ];
            }
            const isInstrumentation = (0, _utils.isInstrumentationHookFile)(page) && pagesType === _pagetypes.PAGE_TYPES.ROOT;
            runDependingOnPageType({
                page,
                pageRuntime: staticInfo.runtime,
                pageType: pagesType,
                onClient: ()=>{
                    if (isServerComponent || isInsideAppDir) {
                    // We skip the initial entries for server component pages and let the
                    // server compiler inject them instead.
                    } else {
                        client[clientBundlePath] = getClientEntry({
                            absolutePagePath,
                            page
                        });
                    }
                },
                onServer: ()=>{
                    if (pagesType === 'app' && appDir) {
                        const matchedAppPaths = appPathsPerRoute[(0, _apppaths.normalizeAppPath)(page)];
                        server[serverBundlePath] = getAppEntry({
                            page,
                            name: serverBundlePath,
                            pagePath: absolutePagePath,
                            appDir,
                            appPaths: matchedAppPaths,
                            pageExtensions,
                            basePath: config.basePath,
                            assetPrefix: config.assetPrefix,
                            nextConfigOutput: config.output,
                            nextConfigExperimentalUseEarlyImport: config.experimental.useEarlyImport ? true : undefined,
                            preferredRegion: staticInfo.preferredRegion,
                            middlewareConfig: (0, _utils1.encodeToBase64)(staticInfo.middleware || {})
                        });
                    } else if (isInstrumentation) {
                        server[serverBundlePath.replace('src/', '')] = getInstrumentationEntry({
                            absolutePagePath,
                            isEdgeServer: false,
                            isDev: false
                        });
                    } else if ((0, _isapiroute.isAPIRoute)(page)) {
                        server[serverBundlePath] = [
                            (0, _nextrouteloader.getRouteLoaderEntry)({
                                kind: _routekind.RouteKind.PAGES_API,
                                page,
                                absolutePagePath,
                                preferredRegion: staticInfo.preferredRegion,
                                middlewareConfig: staticInfo.middleware || {}
                            })
                        ];
                    } else if (!(0, _utils.isMiddlewareFile)(page) && !(0, _isinternalcomponent.isInternalComponent)(absolutePagePath) && !(0, _isinternalcomponent.isNonRoutePagesPage)(page)) {
                        server[serverBundlePath] = [
                            (0, _nextrouteloader.getRouteLoaderEntry)({
                                kind: _routekind.RouteKind.PAGES,
                                page,
                                pages,
                                absolutePagePath,
                                preferredRegion: staticInfo.preferredRegion,
                                middlewareConfig: staticInfo.middleware ?? {}
                            })
                        ];
                    } else {
                        server[serverBundlePath] = [
                            absolutePagePath
                        ];
                    }
                },
                onEdgeServer: ()=>{
                    let appDirLoader = '';
                    if (isInstrumentation) {
                        edgeServer[serverBundlePath.replace('src/', '')] = getInstrumentationEntry({
                            absolutePagePath,
                            isEdgeServer: true,
                            isDev: false
                        });
                    } else {
                        if (pagesType === 'app') {
                            const matchedAppPaths = appPathsPerRoute[(0, _apppaths.normalizeAppPath)(page)];
                            appDirLoader = getAppEntry({
                                name: serverBundlePath,
                                page,
                                pagePath: absolutePagePath,
                                appDir: appDir,
                                appPaths: matchedAppPaths,
                                pageExtensions,
                                basePath: config.basePath,
                                assetPrefix: config.assetPrefix,
                                nextConfigOutput: config.output,
                                // This isn't used with edge as it needs to be set on the entry module, which will be the `edgeServerEntry` instead.
                                // Still passing it here for consistency.
                                preferredRegion: staticInfo.preferredRegion,
                                middlewareConfig: Buffer.from(JSON.stringify(staticInfo.middleware || {})).toString('base64')
                            }).import;
                        }
                        edgeServer[serverBundlePath] = getEdgeServerEntry({
                            ...params,
                            rootDir,
                            absolutePagePath: absolutePagePath,
                            bundlePath: clientBundlePath,
                            isDev: false,
                            isServerComponent,
                            page,
                            middleware: staticInfo == null ? void 0 : staticInfo.middleware,
                            pagesType,
                            appDirLoader,
                            preferredRegion: staticInfo.preferredRegion,
                            middlewareConfig: staticInfo.middleware
                        });
                    }
                }
            });
        };
    const promises = [];
    if (appPaths) {
        const entryHandler = getEntryHandler(appPaths, _pagetypes.PAGE_TYPES.APP);
        promises.push(Promise.all(Object.keys(appPaths).map(entryHandler)));
    }
    if (rootPaths) {
        promises.push(Promise.all(Object.keys(rootPaths).map(getEntryHandler(rootPaths, _pagetypes.PAGE_TYPES.ROOT))));
    }
    promises.push(Promise.all(Object.keys(pages).map(getEntryHandler(pages, _pagetypes.PAGE_TYPES.PAGES))));
    await Promise.all(promises);
    // Optimization: If there's only one instrumentation hook in edge compiler, which means there's no edge server entry.
    // We remove the edge instrumentation entry from edge compiler as it can be pure server side.
    if (edgeServer.instrumentation && Object.keys(edgeServer).length === 1) {
        delete edgeServer.instrumentation;
    }
    return {
        client,
        server,
        edgeServer,
        middlewareMatchers
    };
}
function finalizeEntrypoint({ name, compilerType, value, isServerComponent, hasAppDir }) {
    const entry = typeof value !== 'object' || Array.isArray(value) ? {
        import: value
    } : value;
    const isApi = name.startsWith('pages/api/');
    const isInstrumentation = (0, _utils.isInstrumentationHookFilename)(name);
    switch(compilerType){
        case _constants1.COMPILER_NAMES.server:
            {
                const layer = isApi ? _constants.WEBPACK_LAYERS.api : isInstrumentation ? _constants.WEBPACK_LAYERS.instrument : isServerComponent ? _constants.WEBPACK_LAYERS.reactServerComponents : undefined;
                return {
                    publicPath: isApi ? '' : undefined,
                    runtime: isApi ? 'webpack-api-runtime' : 'webpack-runtime',
                    layer,
                    ...entry
                };
            }
        case _constants1.COMPILER_NAMES.edgeServer:
            {
                return {
                    layer: isApi ? _constants.WEBPACK_LAYERS.api : (0, _utils.isMiddlewareFilename)(name) || isInstrumentation ? _constants.WEBPACK_LAYERS.middleware : undefined,
                    library: {
                        name: [
                            '_ENTRIES',
                            `middleware_[name]`
                        ],
                        type: 'assign'
                    },
                    runtime: _constants1.EDGE_RUNTIME_WEBPACK,
                    asyncChunks: false,
                    ...entry
                };
            }
        case _constants1.COMPILER_NAMES.client:
            {
                const isAppLayer = hasAppDir && (name === _constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP || name === _constants1.APP_CLIENT_INTERNALS || name.startsWith('app/'));
                if (name !== _constants1.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS && name !== _constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN && name !== _constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP && name !== _constants1.CLIENT_STATIC_FILES_RUNTIME_AMP && name !== _constants1.CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH) {
                    if (isAppLayer) {
                        return {
                            dependOn: _constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP,
                            layer: _constants.WEBPACK_LAYERS.appPagesBrowser,
                            ...entry
                        };
                    }
                    return {
                        dependOn: name.startsWith('pages/') && name !== 'pages/_app' ? 'pages/_app' : _constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN,
                        ...entry
                    };
                }
                if (isAppLayer) {
                    return {
                        layer: _constants.WEBPACK_LAYERS.appPagesBrowser,
                        ...entry
                    };
                }
                return entry;
            }
        default:
            {
                // Should never happen.
                throw new Error('Invalid compiler type');
            }
    }
} //# sourceMappingURL=entries.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/devtools-ignore-list-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// Source: https://github.com/mondaychen/devtools-ignore-webpack-plugin/blob/e35ce41d9606a92a455ef247f509a1c2ccab5778/src/index.ts
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * This plugin adds a field to source maps that identifies which sources are
 * vendored or runtime-injected (aka third-party) sources. These are consumed by
 * Chrome DevTools to automatically ignore-list sources.
 */ "default", {
    enumerable: true,
    get: function() {
        return DevToolsIgnorePlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
// Following the naming conventions from
// https://tc39.es/source-map/#source-map-format
const IGNORE_LIST = 'ignoreList';
const PLUGIN_NAME = 'devtools-ignore-plugin';
function defaultShouldIgnorePath(path) {
    return path.includes('/node_modules/') || path.includes('/webpack/');
}
function defaultIsSourceMapAsset(name) {
    return name.endsWith('.map');
}
class DevToolsIgnorePlugin {
    constructor(options = {}){
        this.options = {
            shouldIgnorePath: options.shouldIgnorePath ?? defaultShouldIgnorePath,
            isSourceMapAsset: options.isSourceMapAsset ?? defaultIsSourceMapAsset
        };
    }
    apply(compiler) {
        const { RawSource } = compiler.webpack.sources;
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.processAssets.tap({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_DEV_TOOLING,
                additionalAssets: true
            }, (assets)=>{
                for (const [name, asset] of Object.entries(assets)){
                    // Instead of using `asset.map()` to fetch the source maps from
                    // SourceMapSource assets, process them directly as a RawSource.
                    // This is because `.map()` is slow and can take several seconds.
                    if (!this.options.isSourceMapAsset(name)) {
                        continue;
                    }
                    const mapContent = asset.source().toString();
                    if (!mapContent) {
                        continue;
                    }
                    const sourcemap = JSON.parse(mapContent);
                    const ignoreList = [];
                    for (const [index, path] of sourcemap.sources.entries()){
                        if (this.options.shouldIgnorePath(path)) {
                            ignoreList.push(index);
                        }
                    }
                    sourcemap[IGNORE_LIST] = ignoreList;
                    compilation.updateAsset(name, new RawSource(JSON.stringify(sourcemap)));
                }
            });
        });
    }
} //# sourceMappingURL=devtools-ignore-list-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/eval-source-map-dev-tool-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra

  Forked to add support for `ignoreList`.
  Keep in sync with packages/next/webpack-plugins/eval-source-map-dev-tool-plugin.js
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, // https://github.com/webpack/webpack/blob/e237b580e2bda705c5ab39973f786f7c5a7026bc/lib/EvalSourceMapDevToolPlugin.js#L37
"default", {
    enumerable: true,
    get: function() {
        return EvalSourceMapDevToolPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const cache = new WeakMap();
const devtoolWarningMessage = `/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
`;
class EvalSourceMapDevToolPlugin {
    /**
   * @param {SourceMapDevToolPluginOptions|string} inputOptions Options object
   */ constructor(inputOptions){
        let options;
        if (typeof inputOptions === 'string') {
            options = {
                append: inputOptions
            };
        } else {
            options = inputOptions;
        }
        this.sourceMapComment = options.append && typeof options.append !== 'function' ? options.append : '//# sourceURL=[module]\n//# sourceMappingURL=[url]';
        this.moduleFilenameTemplate = options.moduleFilenameTemplate || 'webpack://[namespace]/[resource-path]?[hash]';
        this.namespace = options.namespace || '';
        this.options = options;
        // fork
        this.shouldIgnorePath = options.shouldIgnorePath ?? (()=>false);
    }
    /**
   * Apply the plugin
   * @param compiler the compiler instance
   */ apply(compiler) {
        const options = this.options;
        compiler.hooks.compilation.tap('NextJSEvalSourceMapDevToolPlugin', (compilation)=>{
            const { JavascriptModulesPlugin } = compiler.webpack.javascript;
            const { RawSource, ConcatSource } = compiler.webpack.sources;
            const devtoolWarning = new RawSource(devtoolWarningMessage);
            const hooks = JavascriptModulesPlugin.getCompilationHooks(compilation);
            new _webpack.SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
            const matchModule = _webpack.ModuleFilenameHelpers.matchObject.bind(_webpack.ModuleFilenameHelpers, options);
            hooks.renderModuleContent.tap('NextJSEvalSourceMapDevToolPlugin', (source, m, { chunk, runtimeTemplate, chunkGraph })=>{
                const cachedSource = cache.get(source);
                if (cachedSource !== undefined) {
                    return cachedSource;
                }
                const result = (r)=>{
                    cache.set(source, r);
                    return r;
                };
                if (m instanceof _webpack.NormalModule) {
                    const module = m;
                    if (!matchModule(module.resource)) {
                        return result(source);
                    }
                } else if (m instanceof _webpack.ConcatenatedModule) {
                    const concatModule = m;
                    if (concatModule.rootModule instanceof _webpack.NormalModule) {
                        const module = concatModule.rootModule;
                        if (!matchModule(module.resource)) {
                            return result(source);
                        }
                    } else {
                        return result(source);
                    }
                } else {
                    return result(source);
                }
                const namespace = compilation.getPath(this.namespace, {
                    chunk
                });
                let sourceMap;
                let content;
                if (source.sourceAndMap) {
                    const sourceAndMap = source.sourceAndMap(options);
                    sourceMap = sourceAndMap.map;
                    content = sourceAndMap.source;
                } else {
                    sourceMap = source.map(options);
                    content = source.source();
                }
                if (!sourceMap) {
                    return result(source);
                }
                // Clone (flat) the sourcemap to ensure that the mutations below do not persist.
                sourceMap = {
                    ...sourceMap
                };
                const context = compiler.options.context;
                const root = compiler.root;
                const modules = sourceMap.sources.map((sourceMapSource)=>{
                    if (!sourceMapSource.startsWith('webpack://')) return sourceMapSource;
                    sourceMapSource = (0, _webpack.makePathsAbsolute)(context, sourceMapSource.slice(10), root);
                    const module = compilation.findModule(sourceMapSource);
                    return module || sourceMapSource;
                });
                let moduleFilenames = modules.map((module)=>_webpack.ModuleFilenameHelpers.createFilename(module, {
                        moduleFilenameTemplate: this.moduleFilenameTemplate,
                        namespace
                    }, {
                        requestShortener: runtimeTemplate.requestShortener,
                        chunkGraph,
                        hashFunction: compilation.outputOptions.hashFunction
                    }));
                moduleFilenames = _webpack.ModuleFilenameHelpers.replaceDuplicates(moduleFilenames, (filename, _i, n)=>{
                    for(let j = 0; j < n; j++)filename += '*';
                    return filename;
                });
                sourceMap.sources = moduleFilenames;
                sourceMap.ignoreList = [];
                for(let index = 0; index < moduleFilenames.length; index++){
                    if (this.shouldIgnorePath(moduleFilenames[index])) {
                        sourceMap.ignoreList.push(index);
                    }
                }
                if (options.noSources) {
                    sourceMap.sourcesContent = undefined;
                }
                sourceMap.sourceRoot = options.sourceRoot || '';
                const moduleId = /** @type {ModuleId} */ chunkGraph.getModuleId(m);
                if (moduleId) {
                    sourceMap.file = typeof moduleId === 'number' ? `${moduleId}.js` : moduleId;
                }
                const footer = `${this.sourceMapComment.replace(/\[url\]/g, `data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(sourceMap), 'utf8').toString('base64')}`)}\n//# sourceURL=webpack-internal:///${moduleId}\n` // workaround for chrome bug
                ;
                return result(new RawSource(`eval(${compilation.outputOptions.trustedTypes ? `${_webpack.RuntimeGlobals.createScript}(${JSON.stringify(content + footer)})` : JSON.stringify(content + footer)});`));
            });
            hooks.inlineInRuntimeBailout.tap('EvalDevToolModulePlugin', ()=>'the eval-source-map devtool is used.');
            hooks.render.tap('EvalSourceMapDevToolPlugin', (source)=>new ConcatSource(devtoolWarning, source));
            hooks.chunkHash.tap('EvalSourceMapDevToolPlugin', (_chunk, hash)=>{
                hash.update('EvalSourceMapDevToolPlugin');
                hash.update('2');
            });
            if (compilation.outputOptions.trustedTypes) {
                compilation.hooks.additionalModuleRuntimeRequirements.tap('EvalSourceMapDevToolPlugin', (_module, set, _context)=>{
                    set.add(_webpack.RuntimeGlobals.createScript);
                });
            }
        });
    }
} //# sourceMappingURL=eval-source-map-dev-tool-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/base.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "base", {
    enumerable: true,
    get: function() {
        return base;
    }
});
const _lodashcurry = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/lodash.curry/index.js [app-rsc] (ecmascript)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _devtoolsignorelistplugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/devtools-ignore-list-plugin.js [app-rsc] (ecmascript)"));
const _evalsourcemapdevtoolplugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/eval-source-map-dev-tool-plugin.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function shouldIgnorePath(modulePath) {
    return modulePath.includes('node_modules') || // Only relevant for when Next.js is symlinked e.g. in the Next.js monorepo
    modulePath.includes('next/dist');
}
const base = (0, _lodashcurry.default)(function base(ctx, config) {
    config.mode = ctx.isDevelopment ? 'development' : 'production';
    config.name = ctx.isServer ? ctx.isEdgeRuntime ? _constants.COMPILER_NAMES.edgeServer : _constants.COMPILER_NAMES.server : _constants.COMPILER_NAMES.client;
    config.target = !ctx.targetWeb ? 'node18.17' // Same version defined in packages/next/package.json#engines
     : ctx.isEdgeRuntime ? [
        'web',
        'es6'
    ] : [
        'web',
        'es6'
    ];
    // https://webpack.js.org/configuration/devtool/#development
    if (ctx.isDevelopment) {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        } else {
            // `eval-source-map` provides full-fidelity source maps for the
            // original source, including columns and original variable names.
            // This is desirable so the in-browser debugger can correctly pause
            // and show scoped variables with their original names.
            config.devtool = 'eval-source-map';
        }
    } else {
        if (ctx.isEdgeRuntime || ctx.isServer && ctx.serverSourceMaps || // Enable browser sourcemaps:
        ctx.productionBrowserSourceMaps && ctx.isClient) {
            config.devtool = 'source-map';
            config.plugins ??= [];
            config.plugins.push(new _devtoolsignorelistplugin.default({
                // TODO: eval-source-map has different module paths than source-map.
                // We're currently not actually ignore listing anything.
                shouldIgnorePath
            }));
        } else {
            config.devtool = false;
        }
    }
    if (!config.module) {
        config.module = {
            rules: []
        };
    }
    config.plugins ??= [];
    if (config.devtool === 'source-map') {
        config.plugins.push(new _devtoolsignorelistplugin.default({
            shouldIgnorePath
        }));
    } else if (config.devtool === 'eval-source-map') {
        var _config_output;
        // We're using a fork of `eval-source-map`
        config.devtool = false;
        config.plugins.push(new _evalsourcemapdevtoolplugin.default({
            moduleFilenameTemplate: (_config_output = config.output) == null ? void 0 : _config_output.devtoolModuleFilenameTemplate,
            shouldIgnorePath
        }));
    }
    // TODO: add codemod for "Should not import the named export" with JSON files
    // config.module.strictExportPresence = !isWebpack5
    return config;
}); //# sourceMappingURL=base.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/value-processor.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
The MIT License (MIT)

Copyright (c) 2016 Ben Holloway

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _loaderutils2 = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/loader-utils2/index.js [app-rsc] (ecmascript)"));
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function valueProcessor(filename, options) {
    const URL_STATEMENT_REGEX = /(url\s*\()\s*(?:(['"])((?:(?!\2).)*)(\2)|([^'"](?:(?!\)).)*[^'"]))\s*(\))/g;
    const directory = _path.default.dirname(filename);
    const join = options.join(filename, options);
    /**
   * Process the given CSS declaration value.
   *
   */ return function transformValue(/** A declaration value that may or may not contain a url() statement */ value, /** An absolute path that may be the correct base or an Iterator thereof */ candidate) {
        // allow multiple url() values in the declaration
        //  split by url statements and process the content
        //  additional capture groups are needed to match quotations correctly
        //  escaped quotations are not considered
        return value.split(URL_STATEMENT_REGEX).map((token, i, arr)=>{
            // we can get groups as undefined under certain match circumstances
            const initialised = token || '';
            // the content of the url() statement is either in group 3 or group 5
            const mod = i % 7;
            if (mod === 3 || mod === 5) {
                // detect quoted url and unescape backslashes
                const before = arr[i - 1], after = arr[i + 1], isQuoted = before === after && (before === "'" || before === '"'), unescaped = isQuoted ? initialised.replace(/\\{2}/g, '\\') : initialised;
                // split into uri and query/hash and then find the absolute path to the uri
                const split = unescaped.split(/([?#])/g), uri = split[0], absolute = testIsRelative(uri) && join(uri, candidate) || // eslint-disable-next-line @typescript-eslint/no-use-before-define
                testIsAbsolute(uri) && join(uri), query = options.keepQuery ? split.slice(1).join('') : '';
                // use the absolute path in absolute mode or else relative path (or default to initialised)
                // #6 - backslashes are not legal in URI
                if (!absolute) {
                    return initialised;
                } else if (options.absolute) {
                    return absolute.replace(/\\/g, '/') + query;
                } else {
                    return _loaderutils2.default.urlToRequest(_path.default.relative(directory, absolute).replace(/\\/g, '/') + query);
                }
            } else {
                return initialised;
            }
        }).join('');
    };
    "TURBOPACK unreachable";
    /**
   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that
   * dogma so we add path.isAbsolute() check to allow them.
   *
   * We also eliminate module relative (~) paths.
   *
   * Returns true for relative uri
   */ function testIsRelative(/** A uri string possibly empty or undefined */ uri) {
        return !!uri && _loaderutils2.default.isUrlRequest(uri, false) && !_path.default.isAbsolute(uri) && uri.indexOf('~') !== 0;
    }
    /**
   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that
   * dogma so we add path.isAbsolute() check to allow them.
   *
   * Returns true for absolute uri
   */ function testIsAbsolute(/** A uri string possibly empty or undefined */ uri) {
        return !!uri && typeof options.root === 'string' && _loaderutils2.default.isUrlRequest(uri, options.root) && (/^\//.test(uri) || _path.default.isAbsolute(uri));
    }
}
const _default = valueProcessor; //# sourceMappingURL=value-processor.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/join-function.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// TODO: Remove use of `any` type. Fix no-use-before-define violations.
/* eslint-disable @typescript-eslint/no-use-before-define */ /*
The MIT License (MIT)

Copyright (c) 2016 Ben Holloway

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "defaultJoin", {
    enumerable: true,
    get: function() {
        return defaultJoin;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _fs = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/fs [external] (fs, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const compose = (f, g)=>(...args)=>f(g(...args));
const simpleJoin = compose(_path.default.normalize, _path.default.join);
const defaultJoin = createJoinForPredicate(function predicate(_, uri, base, i, next) {
    const absolute = simpleJoin(base, uri);
    return _fs.default.existsSync(absolute) ? absolute : next(i === 0 ? absolute : null);
}, 'defaultJoin');
function* createIterator(arr) {
    for (const i of arr){
        yield i;
    }
}
/**
 * Define a join function by a predicate that tests possible base paths from an iterator.
 *
 * The `predicate` is of the form:
 *
 * ```
 * function(filename, uri, base, i, next):string|null
 * ```
 *
 * Given the uri and base it should either return:
 * - an absolute path success
 * - a call to `next(null)` as failure
 * - a call to `next(absolute)` where absolute is placeholder and the iterator continues
 *
 * The value given to `next(...)` is only used if success does not eventually occur.
 *
 * The `file` value is typically unused but useful if you would like to differentiate behaviour.
 *
 * You can write a much simpler function than this if you have specific requirements.
 *
 */ function createJoinForPredicate(/** predicate A function that tests values */ predicate, /** Optional name for the resulting join function */ name) {
    /**
   * A factory for a join function with logging.
   */ function join(/** The current file being processed */ filename, /** An options hash */ options) {
        const log = createDebugLogger(options.debug);
        /**
     * Join function proper.
     *
     * For absolute uri only `uri` will be provided. In this case we substitute any `root` given in options.
     *
     * Returns Just the uri where base is empty or the uri appended to the base
     */ return function joinProper(/** A uri path, relative or absolute */ uri, /** Optional absolute base path or iterator thereof */ baseOrIteratorOrAbsent) {
            const iterator = typeof baseOrIteratorOrAbsent === 'undefined' && createIterator([
                options.root
            ]) || typeof baseOrIteratorOrAbsent === 'string' && createIterator([
                baseOrIteratorOrAbsent
            ]) || baseOrIteratorOrAbsent;
            const result = runIterator([]);
            log(createJoinMsg, [
                filename,
                uri,
                result,
                result.isFound
            ]);
            return typeof result.absolute === 'string' ? result.absolute : uri;
            "TURBOPACK unreachable";
            function runIterator(accumulator) {
                const nextItem = iterator.next();
                var base = !nextItem.done && nextItem.value;
                if (typeof base === 'string') {
                    const element = predicate(filename, uri, base, accumulator.length, next);
                    if (typeof element === 'string' && _path.default.isAbsolute(element)) {
                        return Object.assign(accumulator.concat(base), {
                            isFound: true,
                            absolute: element
                        });
                    } else if (Array.isArray(element)) {
                        return element;
                    } else {
                        throw new Error('predicate must return an absolute path or the result of calling next()');
                    }
                } else {
                    return accumulator;
                }
                function next(fallback) {
                    return runIterator(Object.assign(accumulator.concat(base), typeof fallback === 'string' && {
                        absolute: fallback
                    }));
                }
            }
        };
    }
    function toString() {
        return '[Function: ' + name + ']';
    }
    return Object.assign(join, name && {
        valueOf: toString,
        toString: toString
    });
}
/**
 * Format a debug message.
 * Return Formatted message
 */ function createJoinMsg(/** The file being processed by webpack */ file, /**  A uri path, relative or absolute */ uri, /** Absolute base paths up to and including the found one */ bases, /** Indicates the last base was correct */ isFound) {
    return [
        'resolve-url-loader: ' + pathToString(file) + ': ' + uri,
        //
        ...bases.map(pathToString).filter(Boolean),
        ...isFound ? [
            'FOUND'
        ] : [
            'NOT FOUND'
        ]
    ].join('\n  ');
    "TURBOPACK unreachable";
    /**
   * If given path is within `process.cwd()` then show relative posix path, otherwise show absolute posix path.
   *
   * Returns A relative or absolute path
   */ function pathToString(/** An absolute path */ absolute) {
        if (!absolute) {
            return null;
        } else {
            const relative = _path.default.relative(process.cwd(), absolute).split(_path.default.sep);
            return (relative[0] === '..' ? absolute.split(_path.default.sep) : [
                '.'
            ].concat(relative).filter(Boolean)).join('/');
        }
    }
}
exports.createJoinMsg = createJoinMsg;
/**
 * A factory for a log function predicated on the given debug parameter.
 *
 * The logging function created accepts a function that formats a message and parameters that the function utilises.
 * Presuming the message function may be expensive we only call it if logging is enabled.
 *
 * The log messages are de-duplicated based on the parameters, so it is assumed they are simple types that stringify
 * well.
 *
 * Returns A logging function possibly degenerate
 */ function createDebugLogger(/** A boolean or debug function */ debug) {
    const log = !!debug && (typeof debug === 'function' ? debug : console.log);
    const cache = {};
    return log ? actuallyLog : noop;
    "TURBOPACK unreachable";
    function noop() {}
    function actuallyLog(msgFn, params) {
        const key = JSON.stringify(params);
        if (!cache[key]) {
            cache[key] = true;
            log(msgFn.apply(null, params));
        }
    }
}
exports.createDebugLogger = createDebugLogger; //# sourceMappingURL=join-function.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/file-protocol.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
The MIT License (MIT)

Copyright (c) 2016 Ben Holloway

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/ /**
 * Prepend file:// protocol to source path string or source-map sources.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    prepend: null,
    remove: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    prepend: function() {
        return prepend;
    },
    remove: function() {
        return remove;
    }
});
function prepend(candidate) {
    if (typeof candidate === 'string') {
        return 'file://' + candidate;
    } else if (candidate && typeof candidate === 'object' && Array.isArray(candidate.sources)) {
        return Object.assign({}, candidate, {
            sources: candidate.sources.map(prepend)
        });
    } else {
        throw new Error('expected string|object');
    }
}
function remove(candidate) {
    if (typeof candidate === 'string') {
        return candidate.replace(/^file:\/{2}/, '');
    } else if (candidate && typeof candidate === 'object' && Array.isArray(candidate.sources)) {
        return Object.assign({}, candidate, {
            sources: candidate.sources.map(remove)
        });
    } else {
        throw new Error('expected string|object');
    }
} //# sourceMappingURL=file-protocol.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/postcss.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
The MIT License (MIT)

Copyright (c) 2016 Ben Holloway

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return process;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _fileprotocol = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/file-protocol.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const ORPHAN_CR_REGEX = /\r(?!\n)(.|\n)?/g;
function process(postcss, sourceFile, sourceContent, params) {
    // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)
    postcssPlugin.postcss = true;
    // prepend file protocol to all sources to avoid problems with source map
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return postcss([
        postcssPlugin
    ]).process(sourceContent, {
        from: (0, _fileprotocol.prepend)(sourceFile),
        map: params.outputSourceMap && {
            prev: !!params.inputSourceMap && (0, _fileprotocol.prepend)(params.inputSourceMap),
            inline: false,
            annotation: false,
            sourcesContent: true
        }
    }).then((result)=>({
            content: result.css,
            map: params.outputSourceMap ? (0, _fileprotocol.remove)(result.map.toJSON()) : null
        }));
    "TURBOPACK unreachable";
    /**
   * Plugin for postcss that follows SASS transpilation.
   */ function postcssPlugin() {
        return {
            postcssPlugin: 'postcss-resolve-url',
            Once: function(root) {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                root.walkDecls(eachDeclaration);
            }
        };
        "TURBOPACK unreachable";
        /**
     * Process a declaration from the syntax tree.
     * @param declaration
     */ function eachDeclaration(declaration) {
            const isValid = declaration.value && declaration.value.indexOf('url') >= 0;
            if (isValid) {
                // reverse the original source-map to find the original source file before transpilation
                const startPosApparent = declaration.source.start, startPosOriginal = params.sourceMapConsumer && params.sourceMapConsumer.originalPositionFor(startPosApparent);
                // we require a valid directory for the specified file
                const directory = startPosOriginal && startPosOriginal.source && (0, _fileprotocol.remove)(_path.default.dirname(startPosOriginal.source));
                if (directory) {
                    declaration.value = params.transformDeclaration(declaration.value, directory);
                } else if (params.sourceMapConsumer) {
                    throw new Error('source-map information is not available at url() declaration ' + (ORPHAN_CR_REGEX.test(sourceContent) ? '(found orphan CR, try removeCR option)' : '(no orphan CR found)'));
                }
            }
        }
    }
} //# sourceMappingURL=postcss.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
The MIT License (MIT)

Copyright (c) 2016 Ben Holloway

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * A webpack loader that resolves absolute url() paths relative to their original source file.
 * Requires source-maps to do any meaningful work.
 */ "default", {
    enumerable: true,
    get: function() {
        return resolveUrlLoader;
    }
});
const _sourcemap = __turbopack_require__("[project]/node_modules/next/dist/compiled/source-map/source-map.js [app-rsc] (ecmascript)");
const _valueprocessor = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/value-processor.js [app-rsc] (ecmascript)"));
const _joinfunction = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/join-function.js [app-rsc] (ecmascript)");
const _postcss = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/lib/postcss.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function resolveUrlLoader(/** Css content */ content, /** The source-map */ sourceMap) {
    const options = Object.assign({
        sourceMap: this.sourceMap,
        silent: false,
        absolute: false,
        keepQuery: false,
        root: false,
        debug: false,
        join: _joinfunction.defaultJoin
    }, this.getOptions());
    let sourceMapConsumer;
    if (sourceMap) {
        sourceMapConsumer = new _sourcemap.SourceMapConsumer(sourceMap);
    }
    const callback = this.async();
    const { postcss } = options.postcss ? await options.postcss() : {
        postcss: __turbopack_require__("[project]/node_modules/next/node_modules/postcss/lib/postcss.js [app-rsc] (ecmascript)")
    };
    (0, _postcss.default)(postcss, this.resourcePath, content, {
        outputSourceMap: Boolean(options.sourceMap),
        transformDeclaration: (0, _valueprocessor.default)(this.resourcePath, options),
        inputSourceMap: sourceMap,
        sourceMapConsumer: sourceMapConsumer
    }) // eslint-disable-next-line @typescript-eslint/no-use-before-define
    .catch(onFailure) // eslint-disable-next-line @typescript-eslint/no-use-before-define
    .then(onSuccess);
    function onFailure(error) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        callback(encodeError('CSS error', error));
    }
    function onSuccess(reworked) {
        if (reworked) {
            // complete with source-map
            //  source-map sources are relative to the file being processed
            if (options.sourceMap) {
                callback(null, reworked.content, reworked.map);
            } else {
                callback(null, reworked.content);
            }
        }
    }
    function encodeError(label, exception) {
        return new Error([
            'resolve-url-loader',
            ': ',
            [
                label
            ].concat(typeof exception === 'string' && exception || exception instanceof Error && [
                exception.message,
                exception.stack.split('\n', 2)[1].trim()
            ] || []).filter(Boolean).join('\n  ')
        ].join(''));
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * For server-side CSS imports, we need to ignore the actual module content but
 * still trigger the hot-reloading diff mechanism. So here we put the content
 * inside a comment.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _crypto = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/crypto [external] (crypto, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const NextServerCSSLoader = function(content) {
    this.cacheable && this.cacheable();
    const options = this.getOptions();
    let isCSSModule = options.cssModules;
    // Only add the checksum during development.
    if ("TURBOPACK compile-time truthy", 1) {
        // This check is only for backwards compatibility.
        // TODO: Remove this in the next major version (next 14)
        if (isCSSModule === undefined) {
            this.emitWarning(new Error("No 'cssModules' option was found for the next-flight-css-loader plugin."));
            isCSSModule = this.resourcePath.match(/\.module\.(css|sass|scss)$/) !== null;
        }
        const checksum = _crypto.default.createHash('sha1').update(typeof content === 'string' ? Buffer.from(content) : content).digest().toString('hex').substring(0, 12);
        if (isCSSModule) {
            return `\
${content}
module.exports.__checksum = ${JSON.stringify(checksum)}
`;
        }
        // Server CSS imports are always available for HMR, so we attach
        // `module.hot.accept()` to the generated module.
        const hmrCode = 'if (module.hot) { module.hot.accept() }';
        return `\
export default ${JSON.stringify(checksum)}
${hmrCode}
`;
    }
    "TURBOPACK unreachable";
};
const _default = NextServerCSSLoader; //# sourceMappingURL=next-flight-css-loader.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/mini-css-extract-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// @ts-ignore: TODO: remove when webpack 5 is stable
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return NextMiniCssExtractPlugin;
    }
});
const _minicssextractplugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/mini-css-extract-plugin/cjs.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class NextMiniCssExtractPlugin extends _minicssextractplugin.default {
    constructor(...args){
        super(...args), this.__next_css_remove = true;
    }
} //# sourceMappingURL=mini-css-extract-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/helpers.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    loader: null,
    plugin: null,
    unshiftLoader: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    loader: function() {
        return loader;
    },
    plugin: function() {
        return plugin;
    },
    unshiftLoader: function() {
        return unshiftLoader;
    }
});
const _lodashcurry = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/lodash.curry/index.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const loader = (0, _lodashcurry.default)(function loader(rule, config) {
    var _config_module_rules;
    if (!config.module) {
        config.module = {
            rules: []
        };
    }
    if (rule.oneOf) {
        var _config_module_rules1;
        const existing = (_config_module_rules1 = config.module.rules) == null ? void 0 : _config_module_rules1.find((arrayRule)=>arrayRule && typeof arrayRule === 'object' && arrayRule.oneOf);
        if (existing && typeof existing === 'object') {
            existing.oneOf.push(...rule.oneOf);
            return config;
        }
    }
    (_config_module_rules = config.module.rules) == null ? void 0 : _config_module_rules.push(rule);
    return config;
});
const unshiftLoader = (0, _lodashcurry.default)(function unshiftLoader(rule, config) {
    var _config_module_rules;
    if (!config.module) {
        config.module = {
            rules: []
        };
    }
    if (rule.oneOf) {
        var _config_module_rules1;
        const existing = (_config_module_rules1 = config.module.rules) == null ? void 0 : _config_module_rules1.find((arrayRule)=>arrayRule && typeof arrayRule === 'object' && arrayRule.oneOf);
        if (existing && typeof existing === 'object') {
            var _existing_oneOf;
            (_existing_oneOf = existing.oneOf) == null ? void 0 : _existing_oneOf.unshift(...rule.oneOf);
            return config;
        }
    }
    (_config_module_rules = config.module.rules) == null ? void 0 : _config_module_rules.unshift(rule);
    return config;
});
const plugin = (0, _lodashcurry.default)(function plugin(p, config) {
    if (!config.plugins) {
        config.plugins = [];
    }
    config.plugins.push(p);
    return config;
}); //# sourceMappingURL=helpers.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "pipe", {
    enumerable: true,
    get: function() {
        return pipe;
    }
});
const pipe = (...fns)=>(param)=>fns.reduce(async (result, next)=>next(await result), param); //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/client.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getClientStyleLoader", {
    enumerable: true,
    get: function() {
        return getClientStyleLoader;
    }
});
function getClientStyleLoader({ hasAppDir, isAppDir, isDevelopment, assetPrefix }) {
    const shouldEnableApp = typeof isAppDir === 'boolean' ? isAppDir : hasAppDir;
    // Keep next-style-loader for development mode in `pages/`
    if (isDevelopment && !shouldEnableApp) {
        return {
            loader: 'next-style-loader',
            options: {
                insert: function(element) {
                    // By default, style-loader injects CSS into the bottom
                    // of <head>. This causes ordering problems between dev
                    // and prod. To fix this, we render a <noscript> tag as
                    // an anchor for the styles to be placed before. These
                    // styles will be applied _before_ <style jsx global>.
                    // These elements should always exist. If they do not,
                    // this code should fail.
                    var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                    var parentNode = anchorElement.parentNode // Normally <head>
                    ;
                    // Each style tag should be placed right before our
                    // anchor. By inserting before and not after, we do not
                    // need to track the last inserted element.
                    parentNode.insertBefore(element, anchorElement);
                }
            }
        };
    }
    const MiniCssExtractPlugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/mini-css-extract-plugin.js [app-rsc] (ecmascript)").default;
    return {
        loader: MiniCssExtractPlugin.loader,
        options: {
            publicPath: `${assetPrefix}/_next/`,
            esModule: false
        }
    };
} //# sourceMappingURL=client.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/file-resolve.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "cssFileResolve", {
    enumerable: true,
    get: function() {
        return cssFileResolve;
    }
});
function cssFileResolve(url, _resourcePath, urlImports) {
    if (url.startsWith('/')) {
        return false;
    }
    if (!urlImports && /^[a-z][a-z0-9+.-]*:/i.test(url)) {
        return false;
    }
    return true;
} //# sourceMappingURL=file-resolve.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/CssSyntaxError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return CssSyntaxError;
    }
});
class CssSyntaxError extends Error {
    constructor(error){
        super(error);
        const { reason, line, column } = error;
        this.name = 'CssSyntaxError';
        // Based on https://github.com/postcss/postcss/blob/master/lib/css-syntax-error.es6#L132
        // We don't need `plugin` and `file` properties.
        this.message = `${this.name}\n\n`;
        if (typeof line !== 'undefined') {
            this.message += `(${line}:${column}) `;
        }
        this.message += reason;
        const code = error.showSourceCode();
        if (code) {
            this.message += `\n\n${code}\n`;
        }
        // We don't need stack https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md#31-dont-show-js-stack-for-csssyntaxerror
        this.stack = false;
    }
} //# sourceMappingURL=CssSyntaxError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/Warning.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * **PostCSS Plugin Warning**
 *
 * Loader wrapper for postcss plugin warnings (`root.messages`)
 *
 * @class Warning
 * @extends Error
 *
 * @param {Object} warning PostCSS Warning
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return Warning;
    }
});
class Warning extends Error {
    constructor(warning){
        super(warning);
        const { text, line, column, plugin } = warning;
        this.name = 'Warning';
        this.message = `${this.name}\n\n`;
        if (typeof line !== 'undefined') {
            this.message += `(${line}:${column}) `;
        }
        this.message += plugin ? `${plugin}: ` : '';
        this.message += text;
        this.stack = false;
    }
} //# sourceMappingURL=Warning.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/stringify-request.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "stringifyRequest", {
    enumerable: true,
    get: function() {
        return stringifyRequest;
    }
});
function stringifyRequest(loaderContext, request) {
    return JSON.stringify(loaderContext.utils.contextify(loaderContext.context || loaderContext.rootContext, request));
} //# sourceMappingURL=stringify-request.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/camelcase.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const preserveCamelCase = (string, locale)=>{
    let isLastCharLower = false;
    let isLastCharUpper = false;
    let isLastLastCharUpper = false;
    for(let i = 0; i < string.length; i++){
        const character = string[i];
        if (isLastCharLower && /[\p{Lu}]/u.test(character)) {
            string = string.slice(0, i) + '-' + string.slice(i);
            isLastCharLower = false;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = true;
            i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[\p{Ll}]/u.test(character)) {
            string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = false;
            isLastCharLower = true;
        } else {
            isLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;
        }
    }
    return string;
};
const preserveConsecutiveUppercase = (input)=>{
    return input.replace(/^[\p{Lu}](?![\p{Lu}])/gu, (m1)=>m1.toLowerCase());
};
const postProcess = (input, options)=>{
    return input.replace(/[_.\- ]+([\p{Alpha}\p{N}_]|$)/gu, (_, p1)=>p1.toLocaleUpperCase(options.locale)).replace(/\d+([\p{Alpha}\p{N}_]|$)/gu, (m)=>m.toLocaleUpperCase(options.locale));
};
const camelCase = (input, options)=>{
    if (!(typeof input === 'string' || Array.isArray(input))) {
        throw new TypeError('Expected the input to be `string | string[]`');
    }
    options = {
        pascalCase: false,
        preserveConsecutiveUppercase: false,
        ...options
    };
    if (Array.isArray(input)) {
        input = input.map((x)=>x.trim()).filter((x)=>x.length).join('-');
    } else {
        input = input.trim();
    }
    if (input.length === 0) {
        return '';
    }
    if (input.length === 1) {
        return options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);
    }
    const hasUpperCase = input !== input.toLocaleLowerCase(options.locale);
    if (hasUpperCase) {
        input = preserveCamelCase(input, options.locale);
    }
    input = input.replace(/^[_.\- ]+/, '');
    if (options.preserveConsecutiveUppercase) {
        input = preserveConsecutiveUppercase(input);
    } else {
        input = input.toLocaleLowerCase();
    }
    if (options.pascalCase) {
        input = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);
    }
    return postProcess(input, options);
};
const _default = camelCase; //# sourceMappingURL=camelcase.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    dashesCamelCase: null,
    getExportCode: null,
    getFilter: null,
    getImportCode: null,
    getModuleCode: null,
    getModulesPlugins: null,
    getPreRequester: null,
    isDataUrl: null,
    isUrlRequestable: null,
    normalizeSourceMap: null,
    normalizeSourceMapForRuntime: null,
    normalizeUrl: null,
    requestify: null,
    resolveRequests: null,
    shouldUseIcssPlugin: null,
    shouldUseImportPlugin: null,
    shouldUseModulesPlugins: null,
    shouldUseURLPlugin: null,
    sort: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    dashesCamelCase: function() {
        return dashesCamelCase;
    },
    getExportCode: function() {
        return getExportCode;
    },
    getFilter: function() {
        return getFilter;
    },
    getImportCode: function() {
        return getImportCode;
    },
    getModuleCode: function() {
        return getModuleCode;
    },
    getModulesPlugins: function() {
        return getModulesPlugins;
    },
    getPreRequester: function() {
        return getPreRequester;
    },
    isDataUrl: function() {
        return isDataUrl;
    },
    isUrlRequestable: function() {
        return isUrlRequestable;
    },
    normalizeSourceMap: function() {
        return normalizeSourceMap;
    },
    // For lightningcss-loader
    normalizeSourceMapForRuntime: function() {
        return normalizeSourceMapForRuntime;
    },
    normalizeUrl: function() {
        return normalizeUrl;
    },
    requestify: function() {
        return requestify;
    },
    resolveRequests: function() {
        return resolveRequests;
    },
    shouldUseIcssPlugin: function() {
        return shouldUseIcssPlugin;
    },
    shouldUseImportPlugin: function() {
        return shouldUseImportPlugin;
    },
    shouldUseModulesPlugins: function() {
        return shouldUseModulesPlugins;
    },
    shouldUseURLPlugin: function() {
        return shouldUseURLPlugin;
    },
    sort: function() {
        return sort;
    }
});
const _url = __turbopack_require__("[externals]/url [external] (url, cjs)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _loaderutils3 = __turbopack_require__("[project]/node_modules/next/dist/compiled/loader-utils3/index.js [app-rsc] (ecmascript)");
const _postcssmodulesvalues = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-modules-values/index.js [app-rsc] (ecmascript)"));
const _postcssmoduleslocalbydefault = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-modules-local-by-default/index.js [app-rsc] (ecmascript)"));
const _postcssmodulesextractimports = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-modules-extract-imports/index.js [app-rsc] (ecmascript)"));
const _postcssmodulesscope = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-modules-scope/index.js [app-rsc] (ecmascript)"));
const _camelcase = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/camelcase.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const whitespace = '[\\x20\\t\\r\\n\\f]';
const unescapeRegExp = new RegExp(`\\\\([\\da-f]{1,6}${whitespace}?|(${whitespace})|.)`, 'ig');
const matchNativeWin32Path = /^[A-Z]:[/\\]|^\\\\/i;
function unescape(str) {
    return str.replace(unescapeRegExp, (_, escaped, escapedWhitespace)=>{
        const high = `0x${escaped}` - 0x10000;
        /* eslint-disable line-comment-position */ // NaN means non-codepoint
        // Workaround erroneous numeric interpretation of +"0x"
        // eslint-disable-next-line no-self-compare
        return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);
    /* eslint-enable line-comment-position */ });
}
function normalizePath(file) {
    return _path.default.sep === '\\' ? file.replace(/\\/g, '/') : file;
}
function fixedEncodeURIComponent(str) {
    return str.replace(/[!'()*]/g, (c)=>`%${c.charCodeAt(0).toString(16)}`);
}
function normalizeUrl(url, isStringValue) {
    let normalizedUrl = url;
    if (isStringValue && /\\(\n|\r\n|\r|\f)/.test(normalizedUrl)) {
        normalizedUrl = normalizedUrl.replace(/\\(\n|\r\n|\r|\f)/g, '');
    }
    if (matchNativeWin32Path.test(url)) {
        try {
            normalizedUrl = decodeURIComponent(normalizedUrl);
        } catch (error) {
        // Ignores invalid and broken URLs and try to resolve them as is
        }
        return normalizedUrl;
    }
    normalizedUrl = unescape(normalizedUrl);
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (isDataUrl(url)) {
        return fixedEncodeURIComponent(normalizedUrl);
    }
    try {
        normalizedUrl = decodeURI(normalizedUrl);
    } catch (error) {
    // Ignores invalid and broken URLs and try to resolve them as is
    }
    return normalizedUrl;
}
function requestify(url, rootContext) {
    if (/^file:/i.test(url)) {
        return (0, _url.fileURLToPath)(url);
    }
    if (/^[a-z][a-z0-9+.-]*:/i.test(url)) {
        return url;
    }
    return url.charAt(0) === '/' ? (0, _loaderutils3.urlToRequest)(url, rootContext) : (0, _loaderutils3.urlToRequest)(url);
}
function getFilter(filter, resourcePath) {
    return (...args)=>{
        if (typeof filter === 'function') {
            return filter(...args, resourcePath);
        }
        return true;
    };
}
function shouldUseImportPlugin(options) {
    if (options.modules.exportOnlyLocals) {
        return false;
    }
    if (typeof options.import === 'boolean') {
        return options.import;
    }
    return true;
}
function shouldUseURLPlugin(options) {
    if (options.modules.exportOnlyLocals) {
        return false;
    }
    if (typeof options.url === 'boolean') {
        return options.url;
    }
    return true;
}
function shouldUseModulesPlugins(options) {
    return options.modules.compileType === 'module';
}
function shouldUseIcssPlugin(options) {
    return options.icss === true || Boolean(options.modules);
}
function getModulesPlugins(options, loaderContext, meta) {
    const { mode, getLocalIdent, localIdentName, localIdentContext, localIdentHashPrefix, localIdentRegExp } = options.modules;
    let plugins = [];
    try {
        plugins = [
            _postcssmodulesvalues.default,
            (0, _postcssmoduleslocalbydefault.default)({
                mode
            }),
            (0, _postcssmodulesextractimports.default)(),
            (0, _postcssmodulesscope.default)({
                generateScopedName (exportName) {
                    return getLocalIdent(loaderContext, localIdentName, exportName, {
                        context: localIdentContext,
                        hashPrefix: localIdentHashPrefix,
                        regExp: localIdentRegExp
                    }, meta);
                },
                exportGlobals: options.modules.exportGlobals
            })
        ];
    } catch (error) {
        loaderContext.emitError(error);
    }
    return plugins;
}
const IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\]|^\\\\/i;
const ABSOLUTE_SCHEME = /^[a-z0-9+\-.]+:/i;
function getURLType(source) {
    if (source[0] === '/') {
        if (source[1] === '/') {
            return 'scheme-relative';
        }
        return 'path-absolute';
    }
    if (IS_NATIVE_WIN32_PATH.test(source)) {
        return 'path-absolute';
    }
    return ABSOLUTE_SCHEME.test(source) ? 'absolute' : 'path-relative';
}
function normalizeSourceMap(map, resourcePath) {
    let newMap = map;
    // Some loader emit source map as string
    // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.
    if (typeof newMap === 'string') {
        newMap = JSON.parse(newMap);
    }
    delete newMap.file;
    const { sourceRoot } = newMap;
    delete newMap.sourceRoot;
    if (newMap.sources) {
        // Source maps should use forward slash because it is URLs (https://github.com/mozilla/source-map/issues/91)
        // We should normalize path because previous loaders like `sass-loader` using backslash when generate source map
        newMap.sources = newMap.sources.map((source)=>{
            // Non-standard syntax from `postcss`
            if (source.startsWith('<')) {
                return source;
            }
            const sourceType = getURLType(source);
            // Do no touch `scheme-relative` and `absolute` URLs
            if (sourceType === 'path-relative' || sourceType === 'path-absolute') {
                const absoluteSource = sourceType === 'path-relative' && sourceRoot ? _path.default.resolve(sourceRoot, normalizePath(source)) : normalizePath(source);
                return _path.default.relative(_path.default.dirname(resourcePath), absoluteSource);
            }
            return source;
        });
    }
    return newMap;
}
function getPreRequester({ loaders, loaderIndex }) {
    const cache = Object.create(null);
    return (number)=>{
        if (cache[number]) {
            return cache[number];
        }
        if (number === false) {
            cache[number] = '';
        } else {
            const loadersRequest = loaders.slice(loaderIndex, loaderIndex + 1 + (typeof number !== 'number' ? 0 : number)).map((x)=>x.request).join('!');
            cache[number] = `-!${loadersRequest}!`;
        }
        return cache[number];
    };
}
function getImportCode(imports, options) {
    let code = '';
    for (const item of imports){
        const { importName, url, icss } = item;
        if (options.esModule) {
            if (icss && options.modules.namedExport) {
                code += `import ${options.modules.exportOnlyLocals ? '' : `${importName}, `}* as ${importName}_NAMED___ from ${url};\n`;
            } else {
                code += `import ${importName} from ${url};\n`;
            }
        } else {
            code += `var ${importName} = require(${url});\n`;
        }
    }
    return code ? `// Imports\n${code}` : '';
}
function normalizeSourceMapForRuntime(map, loaderContext) {
    const resultMap = map ? map.toJSON() : null;
    if (resultMap) {
        delete resultMap.file;
        resultMap.sourceRoot = '';
        resultMap.sources = resultMap.sources.map((source)=>{
            // Non-standard syntax from `postcss`
            if (source.startsWith('<')) {
                return source;
            }
            const sourceType = getURLType(source);
            if (sourceType !== 'path-relative') {
                return source;
            }
            const resourceDirname = _path.default.dirname(loaderContext.resourcePath);
            const absoluteSource = _path.default.resolve(resourceDirname, source);
            const contextifyPath = normalizePath(_path.default.relative(loaderContext.rootContext, absoluteSource));
            return `webpack://${contextifyPath}`;
        });
    }
    return JSON.stringify(resultMap);
}
function getModuleCode(result, api, replacements, options, loaderContext) {
    if (options.modules.exportOnlyLocals === true) {
        return '';
    }
    const sourceMapValue = options.sourceMap ? `,${normalizeSourceMapForRuntime(result.map, loaderContext)}` : '';
    let code = JSON.stringify(result.css);
    let beforeCode = `var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(${options.sourceMap});\n`;
    for (const item of api){
        const { url, media, dedupe } = item;
        beforeCode += url ? `___CSS_LOADER_EXPORT___.push([module.id, ${JSON.stringify(`@import url(${url});`)}${media ? `, ${JSON.stringify(media)}` : ''}]);\n` : `___CSS_LOADER_EXPORT___.i(${item.importName}${media ? `, ${JSON.stringify(media)}` : dedupe ? ', ""' : ''}${dedupe ? ', true' : ''});\n`;
    }
    for (const item of replacements){
        const { replacementName, importName, localName } = item;
        if (localName) {
            code = code.replace(new RegExp(replacementName, 'g'), ()=>options.modules.namedExport ? `" + ${importName}_NAMED___[${JSON.stringify((0, _camelcase.default)(localName))}] + "` : `" + ${importName}.locals[${JSON.stringify(localName)}] + "`);
        } else {
            const { hash, needQuotes } = item;
            const getUrlOptions = [
                ...hash ? [
                    `hash: ${JSON.stringify(hash)}`
                ] : [],
                ...needQuotes ? 'needQuotes: true' : []
            ];
            const preparedOptions = getUrlOptions.length > 0 ? `, { ${getUrlOptions.join(', ')} }` : '';
            beforeCode += `var ${replacementName} = ___CSS_LOADER_GET_URL_IMPORT___(${importName}${preparedOptions});\n`;
            code = code.replace(new RegExp(replacementName, 'g'), ()=>`" + ${replacementName} + "`);
        }
    }
    return `${beforeCode}// Module\n___CSS_LOADER_EXPORT___.push([module.id, ${code}, ""${sourceMapValue}]);\n`;
}
function dashesCamelCase(str) {
    return str.replace(/-+(\w)/g, (_match, firstLetter)=>firstLetter.toUpperCase());
}
function getExportCode(exports1, replacements, options) {
    let code = '// Exports\n';
    let localsCode = '';
    const addExportToLocalsCode = (name, value)=>{
        if (options.modules.namedExport) {
            localsCode += `export const ${(0, _camelcase.default)(name)} = ${JSON.stringify(value)};\n`;
        } else {
            if (localsCode) {
                localsCode += `,\n`;
            }
            localsCode += `\t${JSON.stringify(name)}: ${JSON.stringify(value)}`;
        }
    };
    for (const { name, value } of exports1){
        switch(options.modules.exportLocalsConvention){
            case 'camelCase':
                {
                    addExportToLocalsCode(name, value);
                    const modifiedName = (0, _camelcase.default)(name);
                    if (modifiedName !== name) {
                        addExportToLocalsCode(modifiedName, value);
                    }
                    break;
                }
            case 'camelCaseOnly':
                {
                    addExportToLocalsCode((0, _camelcase.default)(name), value);
                    break;
                }
            case 'dashes':
                {
                    addExportToLocalsCode(name, value);
                    const modifiedName = dashesCamelCase(name);
                    if (modifiedName !== name) {
                        addExportToLocalsCode(modifiedName, value);
                    }
                    break;
                }
            case 'dashesOnly':
                {
                    addExportToLocalsCode(dashesCamelCase(name), value);
                    break;
                }
            case 'asIs':
            default:
                addExportToLocalsCode(name, value);
                break;
        }
    }
    for (const item of replacements){
        const { replacementName, localName } = item;
        if (localName) {
            const { importName } = item;
            localsCode = localsCode.replace(new RegExp(replacementName, 'g'), ()=>{
                if (options.modules.namedExport) {
                    return `" + ${importName}_NAMED___[${JSON.stringify((0, _camelcase.default)(localName))}] + "`;
                } else if (options.modules.exportOnlyLocals) {
                    return `" + ${importName}[${JSON.stringify(localName)}] + "`;
                }
                return `" + ${importName}.locals[${JSON.stringify(localName)}] + "`;
            });
        } else {
            localsCode = localsCode.replace(new RegExp(replacementName, 'g'), ()=>`" + ${replacementName} + "`);
        }
    }
    if (options.modules.exportOnlyLocals) {
        code += options.modules.namedExport ? localsCode : `${options.esModule ? 'export default' : 'module.exports ='} {\n${localsCode}\n};\n`;
        return code;
    }
    if (localsCode) {
        code += options.modules.namedExport ? localsCode : `___CSS_LOADER_EXPORT___.locals = {\n${localsCode}\n};\n`;
    }
    code += `${options.esModule ? 'export default' : 'module.exports ='} ___CSS_LOADER_EXPORT___;\n`;
    return code;
}
async function resolveRequests(resolve, context, possibleRequests) {
    return resolve(context, possibleRequests[0]).then((result)=>{
        return result;
    }).catch((error)=>{
        const [, ...tailPossibleRequests] = possibleRequests;
        if (tailPossibleRequests.length === 0) {
            throw error;
        }
        return resolveRequests(resolve, context, tailPossibleRequests);
    });
}
function isUrlRequestable(url) {
    // Protocol-relative URLs
    if (/^\/\//.test(url)) {
        return false;
    }
    // `file:` protocol
    if (/^file:/i.test(url)) {
        return true;
    }
    // Absolute URLs
    if (/^[a-z][a-z0-9+.-]*:/i.test(url)) {
        return true;
    }
    // `#` URLs
    if (/^#/.test(url)) {
        return false;
    }
    return true;
}
function sort(a, b) {
    return a.index - b.index;
}
function isDataUrl(url) {
    if (/^data:/i.test(url)) {
        return true;
    }
    return false;
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/postcss-import-parser.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _postcssvalueparser = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-value-parser/index.js [app-rsc] (ecmascript)"));
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function parseNode(atRule, key) {
    // Convert only top-level @import
    if (atRule.parent.type !== 'root') {
        return;
    }
    if (atRule.raws && atRule.raws.afterName && atRule.raws.afterName.trim().length > 0) {
        const lastCommentIndex = atRule.raws.afterName.lastIndexOf('/*');
        const matched = atRule.raws.afterName.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);
        if (matched && matched[2] === 'true') {
            return;
        }
    }
    const prevNode = atRule.prev();
    if (prevNode && prevNode.type === 'comment') {
        const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);
        if (matched && matched[2] === 'true') {
            return;
        }
    }
    // Nodes do not exists - `@import url('http://') :root {}`
    if (atRule.nodes) {
        const error = new Error("It looks like you didn't end your @import statement correctly. Child nodes are attached to it.");
        error.node = atRule;
        throw error;
    }
    const { nodes: paramsNodes } = (0, _postcssvalueparser.default)(atRule[key]);
    // No nodes - `@import ;`
    // Invalid type - `@import foo-bar;`
    if (paramsNodes.length === 0 || paramsNodes[0].type !== 'string' && paramsNodes[0].type !== 'function') {
        const error = new Error(`Unable to find uri in "${atRule.toString()}"`);
        error.node = atRule;
        throw error;
    }
    let isStringValue;
    let url;
    if (paramsNodes[0].type === 'string') {
        isStringValue = true;
        url = paramsNodes[0].value;
    } else {
        // Invalid function - `@import nourl(test.css);`
        if (paramsNodes[0].value.toLowerCase() !== 'url') {
            const error = new Error(`Unable to find uri in "${atRule.toString()}"`);
            error.node = atRule;
            throw error;
        }
        isStringValue = paramsNodes[0].nodes.length !== 0 && paramsNodes[0].nodes[0].type === 'string';
        url = isStringValue ? paramsNodes[0].nodes[0].value : _postcssvalueparser.default.stringify(paramsNodes[0].nodes);
    }
    url = (0, _utils.normalizeUrl)(url, isStringValue);
    const isRequestable = (0, _utils.isUrlRequestable)(url);
    let prefix;
    if (isRequestable) {
        const queryParts = url.split('!');
        if (queryParts.length > 1) {
            url = queryParts.pop();
            prefix = queryParts.join('!');
        }
    }
    // Empty url - `@import "";` or `@import url();`
    if (url.trim().length === 0) {
        const error = new Error(`Unable to find uri in "${atRule.toString()}"`);
        error.node = atRule;
        throw error;
    }
    const mediaNodes = paramsNodes.slice(1);
    let media;
    if (mediaNodes.length > 0) {
        media = _postcssvalueparser.default.stringify(mediaNodes).trim().toLowerCase();
    }
    // eslint-disable-next-line consistent-return
    return {
        atRule,
        prefix,
        url,
        media,
        isRequestable
    };
}
const plugin = (options = {})=>{
    return {
        postcssPlugin: 'postcss-import-parser',
        prepare (result) {
            const parsedAtRules = [];
            return {
                AtRule: {
                    import (atRule) {
                        let parsedAtRule;
                        try {
                            // @ts-expect-error TODO: there is no third argument?
                            parsedAtRule = parseNode(atRule, 'params', result);
                        } catch (error) {
                            result.warn(error.message, {
                                node: error.node
                            });
                        }
                        if (!parsedAtRule) {
                            return;
                        }
                        parsedAtRules.push(parsedAtRule);
                    }
                },
                async OnceExit () {
                    if (parsedAtRules.length === 0) {
                        return;
                    }
                    const resolvedAtRules = await Promise.all(parsedAtRules.map(async (parsedAtRule)=>{
                        const { atRule, isRequestable, prefix, url, media } = parsedAtRule;
                        if (options.filter) {
                            const needKeep = await options.filter(url, media);
                            if (!needKeep) {
                                return;
                            }
                        }
                        if (isRequestable) {
                            const request = (0, _utils.requestify)(url, options.rootContext);
                            const { resolver, context } = options;
                            const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [
                                ...new Set([
                                    request,
                                    url
                                ])
                            ]);
                            if (!resolvedUrl) {
                                return;
                            }
                            if (resolvedUrl === options.resourcePath) {
                                atRule.remove();
                                return;
                            }
                            atRule.remove();
                            // eslint-disable-next-line consistent-return
                            return {
                                url: resolvedUrl,
                                media,
                                prefix,
                                isRequestable
                            };
                        }
                        atRule.remove();
                        // eslint-disable-next-line consistent-return
                        return {
                            url,
                            media,
                            prefix,
                            isRequestable
                        };
                    }));
                    const urlToNameMap = new Map();
                    for(let index = 0; index <= resolvedAtRules.length - 1; index++){
                        const resolvedAtRule = resolvedAtRules[index];
                        if (!resolvedAtRule) {
                            continue;
                        }
                        const { url, isRequestable, media } = resolvedAtRule;
                        if (!isRequestable) {
                            options.api.push({
                                url,
                                media,
                                index
                            });
                            continue;
                        }
                        const { prefix } = resolvedAtRule;
                        const newUrl = prefix ? `${prefix}!${url}` : url;
                        let importName = urlToNameMap.get(newUrl);
                        if (!importName) {
                            importName = `___CSS_LOADER_AT_RULE_IMPORT_${urlToNameMap.size}___`;
                            urlToNameMap.set(newUrl, importName);
                            options.imports.push({
                                type: 'rule_import',
                                importName,
                                url: options.urlHandler(newUrl),
                                index
                            });
                        }
                        options.api.push({
                            importName,
                            media,
                            index
                        });
                    }
                }
            };
        }
    };
};
plugin.postcss = true;
const _default = plugin; //# sourceMappingURL=postcss-import-parser.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/postcss-icss-parser.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _icssutils = __turbopack_require__("[project]/node_modules/next/dist/compiled/icss-utils/index.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)");
const plugin = (options = {})=>{
    return {
        postcssPlugin: 'postcss-icss-parser',
        async OnceExit (root) {
            const importReplacements = Object.create(null);
            const { icssImports, icssExports } = (0, _icssutils.extractICSS)(root);
            const imports = new Map();
            const tasks = [];
            // eslint-disable-next-line guard-for-in
            for(const url in icssImports){
                const tokens = icssImports[url];
                if (Object.keys(tokens).length === 0) {
                    continue;
                }
                let normalizedUrl = url;
                let prefix = '';
                const queryParts = normalizedUrl.split('!');
                if (queryParts.length > 1) {
                    normalizedUrl = queryParts.pop();
                    prefix = queryParts.join('!');
                }
                const request = (0, _utils.requestify)((0, _utils.normalizeUrl)(normalizedUrl, true), options.rootContext);
                const doResolve = async ()=>{
                    const { resolver, context } = options;
                    const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [
                        ...new Set([
                            normalizedUrl,
                            request
                        ])
                    ]);
                    if (!resolvedUrl) {
                        return;
                    }
                    // eslint-disable-next-line consistent-return
                    return {
                        url: resolvedUrl,
                        prefix,
                        tokens
                    };
                };
                tasks.push(doResolve());
            }
            const results = await Promise.all(tasks);
            for(let index = 0; index <= results.length - 1; index++){
                const item = results[index];
                if (!item) {
                    continue;
                }
                const newUrl = item.prefix ? `${item.prefix}!${item.url}` : item.url;
                const importKey = newUrl;
                let importName = imports.get(importKey);
                if (!importName) {
                    importName = `___CSS_LOADER_ICSS_IMPORT_${imports.size}___`;
                    imports.set(importKey, importName);
                    options.imports.push({
                        type: 'icss_import',
                        importName,
                        url: options.urlHandler(newUrl),
                        icss: true,
                        index
                    });
                    options.api.push({
                        importName,
                        dedupe: true,
                        index
                    });
                }
                for (const [replacementIndex, token] of Object.keys(item.tokens).entries()){
                    const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;
                    const localName = item.tokens[token];
                    importReplacements[token] = replacementName;
                    options.replacements.push({
                        replacementName,
                        importName,
                        localName
                    });
                }
            }
            if (Object.keys(importReplacements).length > 0) {
                (0, _icssutils.replaceSymbols)(root, importReplacements);
            }
            for (const name of Object.keys(icssExports)){
                const value = (0, _icssutils.replaceValueSymbols)(icssExports[name], importReplacements);
                options.exports.push({
                    name,
                    value
                });
            }
        }
    };
};
plugin.postcss = true;
const _default = plugin; //# sourceMappingURL=postcss-icss-parser.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/getUrl.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
module.exports = function(url, options) {
    if (!options) {
        // eslint-disable-next-line no-param-reassign
        options = {};
    } // eslint-disable-next-line no-underscore-dangle, no-param-reassign
    url = url && url.__esModule ? url.default : url;
    if (typeof url !== 'string') {
        return url;
    } // If url is already wrapped in quotes, remove them
    if (/^['"].*['"]$/.test(url)) {
        // eslint-disable-next-line no-param-reassign
        url = url.slice(1, -1);
    }
    if (options.hash) {
        // eslint-disable-next-line no-param-reassign
        url += options.hash;
    } // Should url be wrapped?
    // See https://drafts.csswg.org/css-values-3/#urls
    if (/["'() \t\n]/.test(url) || options.needQuotes) {
        return '"'.concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), '"');
    }
    return url;
}; //# sourceMappingURL=getUrl.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/postcss-url-parser.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _postcssvalueparser = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-value-parser/index.js [app-rsc] (ecmascript)"));
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const isUrlFunc = /url/i;
const isImageSetFunc = /^(?:-webkit-)?image-set$/i;
const needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\(/i;
function getNodeFromUrlFunc(node) {
    return node.nodes && node.nodes[0];
}
function getWebpackIgnoreCommentValue(index, nodes, inBetween) {
    if (index === 0 && typeof inBetween !== 'undefined') {
        return inBetween;
    }
    let prevValueNode = nodes[index - 1];
    if (!prevValueNode) {
        // eslint-disable-next-line consistent-return
        return;
    }
    if (prevValueNode.type === 'space') {
        if (!nodes[index - 2]) {
            // eslint-disable-next-line consistent-return
            return;
        }
        prevValueNode = nodes[index - 2];
    }
    if (prevValueNode.type !== 'comment') {
        // eslint-disable-next-line consistent-return
        return;
    }
    const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);
    return matched && matched[2] === 'true';
}
function shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL) {
    if (url.length === 0) {
        result.warn(`Unable to find uri in '${declaration.toString()}'`, {
            node: declaration
        });
        return false;
    }
    if ((0, _utils.isDataUrl)(url) && isSupportDataURLInNewURL) {
        try {
            decodeURIComponent(url);
        } catch (ignoreError) {
            return false;
        }
        return true;
    }
    if (!(0, _utils.isUrlRequestable)(url)) {
        return false;
    }
    return true;
}
function parseDeclaration(declaration, key, result, isSupportDataURLInNewURL) {
    if (!needParseDeclaration.test(declaration[key])) {
        return;
    }
    const parsed = (0, _postcssvalueparser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);
    let inBetween;
    if (declaration.raws && declaration.raws.between) {
        const lastCommentIndex = declaration.raws.between.lastIndexOf('/*');
        const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);
        if (matched) {
            inBetween = matched[2] === 'true';
        }
    }
    let isIgnoreOnDeclaration = false;
    const prevNode = declaration.prev();
    if (prevNode && prevNode.type === 'comment') {
        const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);
        if (matched) {
            isIgnoreOnDeclaration = matched[2] === 'true';
        }
    }
    let needIgnore;
    const parsedURLs = [];
    parsed.walk((valueNode, index, valueNodes)=>{
        if (valueNode.type !== 'function') {
            return;
        }
        if (isUrlFunc.test(valueNode.value)) {
            needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);
            if (isIgnoreOnDeclaration && typeof needIgnore === 'undefined' || needIgnore) {
                if (needIgnore) {
                    // eslint-disable-next-line no-undefined
                    needIgnore = undefined;
                }
                return;
            }
            const { nodes } = valueNode;
            const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
            let url = isStringValue ? nodes[0].value : _postcssvalueparser.default.stringify(nodes);
            url = (0, _utils.normalizeUrl)(url, isStringValue);
            // Do not traverse inside `url`
            if (!shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL)) {
                // eslint-disable-next-line consistent-return
                return false;
            }
            const queryParts = url.split('!');
            let prefix;
            if (queryParts.length > 1) {
                url = queryParts.pop();
                prefix = queryParts.join('!');
            }
            parsedURLs.push({
                declaration,
                parsed,
                node: getNodeFromUrlFunc(valueNode),
                prefix,
                url,
                needQuotes: false
            });
            // eslint-disable-next-line consistent-return
            return false;
        } else if (isImageSetFunc.test(valueNode.value)) {
            for (const [innerIndex, nNode] of valueNode.nodes.entries()){
                const { type, value } = nNode;
                if (type === 'function' && isUrlFunc.test(value)) {
                    needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);
                    if (isIgnoreOnDeclaration && typeof needIgnore === 'undefined' || needIgnore) {
                        if (needIgnore) {
                            // eslint-disable-next-line no-undefined
                            needIgnore = undefined;
                        }
                        continue;
                    }
                    const { nodes } = nNode;
                    const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
                    let url = isStringValue ? nodes[0].value : _postcssvalueparser.default.stringify(nodes);
                    url = (0, _utils.normalizeUrl)(url, isStringValue);
                    // Do not traverse inside `url`
                    if (!shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL)) {
                        // eslint-disable-next-line consistent-return
                        return false;
                    }
                    const queryParts = url.split('!');
                    let prefix;
                    if (queryParts.length > 1) {
                        url = queryParts.pop();
                        prefix = queryParts.join('!');
                    }
                    parsedURLs.push({
                        declaration,
                        parsed,
                        node: getNodeFromUrlFunc(nNode),
                        prefix,
                        url,
                        needQuotes: false
                    });
                } else if (type === 'string') {
                    needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);
                    if (isIgnoreOnDeclaration && typeof needIgnore === 'undefined' || needIgnore) {
                        if (needIgnore) {
                            // eslint-disable-next-line no-undefined
                            needIgnore = undefined;
                        }
                        continue;
                    }
                    let url = (0, _utils.normalizeUrl)(value, true);
                    // Do not traverse inside `url`
                    if (!shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL)) {
                        // eslint-disable-next-line consistent-return
                        return false;
                    }
                    const queryParts = url.split('!');
                    let prefix;
                    if (queryParts.length > 1) {
                        url = queryParts.pop();
                        prefix = queryParts.join('!');
                    }
                    parsedURLs.push({
                        declaration,
                        parsed,
                        node: nNode,
                        prefix,
                        url,
                        needQuotes: true
                    });
                }
            }
            // Do not traverse inside `image-set`
            // eslint-disable-next-line consistent-return
            return false;
        }
    });
    // eslint-disable-next-line consistent-return
    return parsedURLs;
}
const plugin = (options = {})=>{
    return {
        postcssPlugin: 'postcss-url-parser',
        prepare (result) {
            const parsedDeclarations = [];
            return {
                Declaration (declaration) {
                    const { isSupportDataURLInNewURL } = options;
                    const parsedURL = parseDeclaration(declaration, 'value', result, isSupportDataURLInNewURL);
                    if (!parsedURL) {
                        return;
                    }
                    parsedDeclarations.push(...parsedURL);
                },
                async OnceExit () {
                    if (parsedDeclarations.length === 0) {
                        return;
                    }
                    const resolvedDeclarations = await Promise.all(parsedDeclarations.map(async (parsedDeclaration)=>{
                        const { url } = parsedDeclaration;
                        if (options.filter) {
                            const needKeep = await options.filter(url);
                            if (!needKeep) {
                                // eslint-disable-next-line consistent-return
                                return;
                            }
                        }
                        if ((0, _utils.isDataUrl)(url)) {
                            // eslint-disable-next-line consistent-return
                            return parsedDeclaration;
                        }
                        const [pathname, query, hashOrQuery] = url.split(/(\?)?#/, 3);
                        let hash = query ? '?' : '';
                        hash += hashOrQuery ? `#${hashOrQuery}` : '';
                        const { needToResolveURL, rootContext } = options;
                        const request = (0, _utils.requestify)(pathname, rootContext, needToResolveURL);
                        if (!needToResolveURL) {
                            // eslint-disable-next-line consistent-return
                            return {
                                ...parsedDeclaration,
                                url: request,
                                hash
                            };
                        }
                        const { resolver, context } = options;
                        const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [
                            ...new Set([
                                request,
                                url
                            ])
                        ]);
                        if (!resolvedUrl) {
                            // eslint-disable-next-line consistent-return
                            return;
                        }
                        // eslint-disable-next-line consistent-return
                        return {
                            ...parsedDeclaration,
                            url: resolvedUrl,
                            hash
                        };
                    }));
                    const urlToNameMap = new Map();
                    const urlToReplacementMap = new Map();
                    let hasUrlImportHelper = false;
                    for(let index = 0; index <= resolvedDeclarations.length - 1; index++){
                        const item = resolvedDeclarations[index];
                        if (!item) {
                            continue;
                        }
                        if (!hasUrlImportHelper) {
                            options.imports.push({
                                type: 'get_url_import',
                                importName: '___CSS_LOADER_GET_URL_IMPORT___',
                                url: options.urlHandler("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/getUrl.js [app-rsc] (ecmascript)"),
                                index: -1
                            });
                            hasUrlImportHelper = true;
                        }
                        const { url, prefix } = item;
                        const newUrl = prefix ? `${prefix}!${url}` : url;
                        let importName = urlToNameMap.get(newUrl);
                        if (!importName) {
                            importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;
                            urlToNameMap.set(newUrl, importName);
                            options.imports.push({
                                type: 'url',
                                importName,
                                url: options.needToResolveURL ? options.urlHandler(newUrl) : JSON.stringify(newUrl),
                                index
                            });
                        }
                        const { hash, needQuotes } = item;
                        const replacementKey = JSON.stringify({
                            newUrl,
                            hash,
                            needQuotes
                        });
                        let replacementName = urlToReplacementMap.get(replacementKey);
                        if (!replacementName) {
                            replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;
                            urlToReplacementMap.set(replacementKey, replacementName);
                            options.replacements.push({
                                replacementName,
                                importName,
                                hash,
                                needQuotes
                            });
                        }
                        // eslint-disable-next-line no-param-reassign
                        item.node.type = 'word';
                        // eslint-disable-next-line no-param-reassign
                        item.node.value = replacementName;
                        // eslint-disable-next-line no-param-reassign
                        item.declaration.value = item.parsed.toString();
                    }
                }
            };
        }
    };
};
plugin.postcss = true;
const _default = plugin; //# sourceMappingURL=postcss-url-parser.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    icssParser: null,
    importParser: null,
    urlParser: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    icssParser: function() {
        return _postcssicssparser.default;
    },
    importParser: function() {
        return _postcssimportparser.default;
    },
    urlParser: function() {
        return _postcssurlparser.default;
    }
});
const _postcssimportparser = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/postcss-import-parser.js [app-rsc] (ecmascript)"));
const _postcssicssparser = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/postcss-icss-parser.js [app-rsc] (ecmascript)"));
const _postcssurlparser = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/postcss-url-parser.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/ // css base code, injected by the css-loader
// eslint-disable-next-line func-names
"use strict";
module.exports = function(useSourceMap) {
    var list = [] // return the list of modules as css string
    ;
    list.toString = function toString() {
        return this.map(function(item) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            var content = cssWithMappingToString(item, useSourceMap);
            if (item[2]) {
                return '@media '.concat(item[2], ' {').concat(content, '}');
            }
            return content;
        }).join('');
    } // import a list of modules into the list
    ;
    // eslint-disable-next-line func-names
    // @ts-expect-error TODO: fix type
    list.i = function(modules, mediaQuery, dedupe) {
        if (typeof modules === 'string') {
            // eslint-disable-next-line no-param-reassign
            modules = [
                [
                    null,
                    modules,
                    ''
                ]
            ];
        }
        var alreadyImportedModules = {};
        if (dedupe) {
            for(var i = 0; i < this.length; i++){
                // eslint-disable-next-line prefer-destructuring
                var id = this[i][0];
                if (id != null) {
                    alreadyImportedModules[id] = true;
                }
            }
        }
        for(var _i = 0; _i < modules.length; _i++){
            var item = [].concat(modules[_i]);
            if (dedupe && alreadyImportedModules[item[0]]) {
                continue;
            }
            if (mediaQuery) {
                if (!item[2]) {
                    item[2] = mediaQuery;
                } else {
                    item[2] = ''.concat(mediaQuery, ' and ').concat(item[2]);
                }
            }
            list.push(item);
        }
    };
    return list;
};
function cssWithMappingToString(item, useSourceMap) {
    var content = item[1] || '' // eslint-disable-next-line prefer-destructuring
    ;
    var cssMapping = item[3];
    if (!cssMapping) {
        return content;
    }
    if (useSourceMap && typeof btoa === 'function') {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        var sourceMapping = toComment(cssMapping);
        var sourceURLs = cssMapping.sources.map(function(source) {
            return '/*# sourceURL='.concat(cssMapping.sourceRoot || '').concat(source, ' */');
        });
        return [
            content
        ].concat(sourceURLs).concat([
            sourceMapping
        ]).join('\n');
    }
    return [
        content
    ].join('\n');
} // Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
    var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(base64);
    return '/*# '.concat(data, ' */');
} //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return loader;
    }
});
const _CssSyntaxError = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/CssSyntaxError.js [app-rsc] (ecmascript)"));
const _Warning = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/Warning.js [app-rsc] (ecmascript)"));
const _stringifyrequest = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/stringify-request.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const moduleRegExp = /\.module\.\w+$/i;
function getModulesOptions(rawOptions, loaderContext) {
    const { resourcePath } = loaderContext;
    if (typeof rawOptions.modules === 'undefined') {
        const isModules = moduleRegExp.test(resourcePath);
        if (!isModules) {
            return false;
        }
    } else if (typeof rawOptions.modules === 'boolean' && rawOptions.modules === false) {
        return false;
    }
    let modulesOptions = {
        compileType: rawOptions.icss ? 'icss' : 'module',
        auto: true,
        mode: 'local',
        exportGlobals: false,
        localIdentName: '[hash:base64]',
        localIdentContext: loaderContext.rootContext,
        localIdentHashPrefix: '',
        // eslint-disable-next-line no-undefined
        localIdentRegExp: undefined,
        namedExport: false,
        exportLocalsConvention: 'asIs',
        exportOnlyLocals: false
    };
    if (typeof rawOptions.modules === 'boolean' || typeof rawOptions.modules === 'string') {
        modulesOptions.mode = typeof rawOptions.modules === 'string' ? rawOptions.modules : 'local';
    } else {
        if (rawOptions.modules) {
            if (typeof rawOptions.modules.auto === 'boolean') {
                const isModules = rawOptions.modules.auto && moduleRegExp.test(resourcePath);
                if (!isModules) {
                    return false;
                }
            } else if (rawOptions.modules.auto instanceof RegExp) {
                const isModules = rawOptions.modules.auto.test(resourcePath);
                if (!isModules) {
                    return false;
                }
            } else if (typeof rawOptions.modules.auto === 'function') {
                const isModule = rawOptions.modules.auto(resourcePath);
                if (!isModule) {
                    return false;
                }
            }
            if (rawOptions.modules.namedExport === true && typeof rawOptions.modules.exportLocalsConvention === 'undefined') {
                modulesOptions.exportLocalsConvention = 'camelCaseOnly';
            }
        }
        modulesOptions = {
            ...modulesOptions,
            ...rawOptions.modules || {}
        };
    }
    if (typeof modulesOptions.mode === 'function') {
        modulesOptions.mode = modulesOptions.mode(loaderContext.resourcePath);
    }
    if (modulesOptions.namedExport === true) {
        if (rawOptions.esModule === false) {
            throw new Error('The "modules.namedExport" option requires the "esModules" option to be enabled');
        }
        if (modulesOptions.exportLocalsConvention !== 'camelCaseOnly') {
            throw new Error('The "modules.namedExport" option requires the "modules.exportLocalsConvention" option to be "camelCaseOnly"');
        }
    }
    return modulesOptions;
}
function normalizeOptions(rawOptions, loaderContext) {
    if (rawOptions.icss) {
        loaderContext.emitWarning(new Error('The "icss" option is deprecated, use "modules.compileType: "icss"" instead'));
    }
    const modulesOptions = getModulesOptions(rawOptions, loaderContext);
    return {
        url: typeof rawOptions.url === 'undefined' ? true : rawOptions.url,
        import: typeof rawOptions.import === 'undefined' ? true : rawOptions.import,
        modules: modulesOptions,
        // TODO remove in the next major release
        icss: typeof rawOptions.icss === 'undefined' ? false : rawOptions.icss,
        sourceMap: typeof rawOptions.sourceMap === 'boolean' ? rawOptions.sourceMap : loaderContext.sourceMap,
        importLoaders: typeof rawOptions.importLoaders === 'string' ? parseInt(rawOptions.importLoaders, 10) : rawOptions.importLoaders,
        esModule: typeof rawOptions.esModule === 'undefined' ? true : rawOptions.esModule,
        fontLoader: rawOptions.fontLoader
    };
}
async function loader(content, map, meta) {
    const rawOptions = this.getOptions();
    const plugins = [];
    const callback = this.async();
    const loaderSpan = this.currentTraceSpan.traceChild('css-loader');
    loaderSpan.traceAsyncFn(async ()=>{
        let options;
        try {
            options = normalizeOptions(rawOptions, this);
        } catch (error) {
            throw error;
        }
        const { postcss } = await rawOptions.postcss();
        const { shouldUseModulesPlugins, shouldUseImportPlugin, shouldUseURLPlugin, shouldUseIcssPlugin, getPreRequester, getExportCode, getFilter, getImportCode, getModuleCode, getModulesPlugins, normalizeSourceMap, sort } = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)");
        const { icssParser, importParser, urlParser } = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/plugins/index.js [app-rsc] (ecmascript)");
        const replacements = [];
        // if it's a font loader next-font-loader will have exports that should be exported as is
        const exports1 = options.fontLoader ? meta.exports : [];
        if (shouldUseModulesPlugins(options)) {
            plugins.push(...getModulesPlugins(options, this, meta));
        }
        const importPluginImports = [];
        const importPluginApi = [];
        if (shouldUseImportPlugin(options)) {
            const resolver = this.getResolve({
                conditionNames: [
                    'style'
                ],
                extensions: [
                    '.css'
                ],
                mainFields: [
                    'css',
                    'style',
                    'main',
                    '...'
                ],
                mainFiles: [
                    'index',
                    '...'
                ],
                restrictions: [
                    /\.css$/i
                ]
            });
            plugins.push(importParser({
                imports: importPluginImports,
                api: importPluginApi,
                context: this.context,
                rootContext: this.rootContext,
                filter: getFilter(options.import, this.resourcePath),
                resolver,
                urlHandler: (url)=>(0, _stringifyrequest.stringifyRequest)(this, getPreRequester(this)(options.importLoaders) + url)
            }));
        }
        const urlPluginImports = [];
        if (shouldUseURLPlugin(options)) {
            const urlResolver = this.getResolve({
                conditionNames: [
                    'asset'
                ],
                mainFields: [
                    'asset'
                ],
                mainFiles: [],
                extensions: []
            });
            plugins.push(urlParser({
                imports: urlPluginImports,
                replacements,
                context: this.context,
                rootContext: this.rootContext,
                filter: getFilter(options.url, this.resourcePath),
                resolver: urlResolver,
                urlHandler: (url)=>(0, _stringifyrequest.stringifyRequest)(this, url)
            }));
        }
        const icssPluginImports = [];
        const icssPluginApi = [];
        if (shouldUseIcssPlugin(options)) {
            const icssResolver = this.getResolve({
                conditionNames: [
                    'style'
                ],
                extensions: [],
                mainFields: [
                    'css',
                    'style',
                    'main',
                    '...'
                ],
                mainFiles: [
                    'index',
                    '...'
                ]
            });
            plugins.push(icssParser({
                imports: icssPluginImports,
                api: icssPluginApi,
                replacements,
                exports: exports1,
                context: this.context,
                rootContext: this.rootContext,
                resolver: icssResolver,
                urlHandler: (url)=>(0, _stringifyrequest.stringifyRequest)(this, getPreRequester(this)(options.importLoaders) + url)
            }));
        }
        // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing
        if (meta) {
            const { ast } = meta;
            if (ast && ast.type === 'postcss') {
                // eslint-disable-next-line no-param-reassign
                content = ast.root;
                loaderSpan.setAttribute('astUsed', 'true');
            }
        }
        const { resourcePath } = this;
        let result;
        try {
            result = await postcss(plugins).process(content, {
                from: resourcePath,
                to: resourcePath,
                map: options.sourceMap ? {
                    prev: map ? normalizeSourceMap(map, resourcePath) : null,
                    inline: false,
                    annotation: false
                } : false
            });
        } catch (error) {
            if (error.file) {
                this.addDependency(error.file);
            }
            throw error.name === 'CssSyntaxError' ? new _CssSyntaxError.default(error) : error;
        }
        for (const warning of result.warnings()){
            this.emitWarning(new _Warning.default(warning));
        }
        const imports = [
            ...icssPluginImports.sort(sort),
            ...importPluginImports.sort(sort),
            ...urlPluginImports.sort(sort)
        ];
        const api = [
            ...importPluginApi.sort(sort),
            ...icssPluginApi.sort(sort)
        ];
        if (options.modules.exportOnlyLocals !== true) {
            imports.unshift({
                importName: '___CSS_LOADER_API_IMPORT___',
                url: (0, _stringifyrequest.stringifyRequest)(this, "[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js [app-rsc] (ecmascript)")
            });
        }
        const importCode = getImportCode(imports, options);
        const moduleCode = getModuleCode(result, api, replacements, options, this);
        const exportCode = getExportCode(exports1, replacements, options);
        return `${importCode}${moduleCode}${exportCode}`;
    }).then((code)=>{
        callback(null, code);
    }, (err)=>{
        callback(err);
    });
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/Error.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * **PostCSS Syntax Error**
 *
 * Loader wrapper for postcss syntax errors
 *
 * @class SyntaxError
 * @extends Error
 *
 * @param {Object} err CssSyntaxError
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return PostCSSSyntaxError;
    }
});
class PostCSSSyntaxError extends Error {
    constructor(error){
        super(error);
        const { line, column, reason, plugin, file } = error;
        this.name = 'SyntaxError';
        this.message = `${this.name}\n\n`;
        if (typeof line !== 'undefined') {
            this.message += `(${line}:${column}) `;
        }
        this.message += plugin ? `${plugin}: ` : '';
        this.message += file ? `${file} ` : '<css input> ';
        this.message += reason;
        const code = error.showSourceCode();
        if (code) {
            this.message += `\n\n${code}\n`;
        }
        this.stack = false;
    }
} //# sourceMappingURL=Error.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    normalizeSourceMap: null,
    normalizeSourceMapAfterPostcss: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    normalizeSourceMap: function() {
        return normalizeSourceMap;
    },
    normalizeSourceMapAfterPostcss: function() {
        return normalizeSourceMapAfterPostcss;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\]|^\\\\/i;
const ABSOLUTE_SCHEME = /^[a-z0-9+\-.]+:/i;
function getURLType(source) {
    if (source[0] === '/') {
        if (source[1] === '/') {
            return 'scheme-relative';
        }
        return 'path-absolute';
    }
    if (IS_NATIVE_WIN32_PATH.test(source)) {
        return 'path-absolute';
    }
    return ABSOLUTE_SCHEME.test(source) ? 'absolute' : 'path-relative';
}
function normalizeSourceMap(map, resourceContext) {
    let newMap = map;
    // Some loader emit source map as string
    // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.
    if (typeof newMap === 'string') {
        newMap = JSON.parse(newMap);
    }
    delete newMap.file;
    const { sourceRoot } = newMap;
    delete newMap.sourceRoot;
    if (newMap.sources) {
        newMap.sources = newMap.sources.map((source)=>{
            const sourceType = getURLType(source);
            // Do no touch `scheme-relative` and `absolute` URLs
            if (sourceType === 'path-relative' || sourceType === 'path-absolute') {
                const absoluteSource = sourceType === 'path-relative' && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);
                return _path.default.relative(resourceContext, absoluteSource);
            }
            return source;
        });
    }
    return newMap;
}
function normalizeSourceMapAfterPostcss(map, resourceContext) {
    const newMap = map;
    // result.map.file is an optional property that provides the output filename.
    // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.
    // eslint-disable-next-line no-param-reassign
    delete newMap.file;
    // eslint-disable-next-line no-param-reassign
    newMap.sourceRoot = '';
    // eslint-disable-next-line no-param-reassign
    newMap.sources = newMap.sources.map((source)=>{
        if (source.startsWith('<')) {
            return source;
        }
        const sourceType = getURLType(source);
        // Do no touch `scheme-relative`, `path-absolute` and `absolute` types
        if (sourceType === 'path-relative') {
            return _path.default.resolve(resourceContext, source);
        }
        return source;
    });
    return newMap;
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * **PostCSS Loader**
 *
 * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)
 */ "default", {
    enumerable: true,
    get: function() {
        return loader;
    }
});
const _Warning = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/Warning.js [app-rsc] (ecmascript)"));
const _Error = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/Error.js [app-rsc] (ecmascript)"));
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function loader(/** Source */ content, /** Source Map */ sourceMap, meta) {
    const loaderSpan = this.currentTraceSpan.traceChild('postcss-loader');
    const callback = this.async();
    loaderSpan.traceAsyncFn(async ()=>{
        const options = this.getOptions();
        const file = this.resourcePath;
        const useSourceMap = typeof options.sourceMap !== 'undefined' ? options.sourceMap : this.sourceMap;
        const processOptions = {
            from: file,
            to: file
        };
        if (useSourceMap) {
            processOptions.map = {
                inline: false,
                annotation: false,
                ...processOptions.map
            };
        }
        if (sourceMap && processOptions.map) {
            processOptions.map.prev = loaderSpan.traceChild('normalize-source-map').traceFn(()=>(0, _utils.normalizeSourceMap)(sourceMap, this.context));
        }
        let root;
        // Reuse PostCSS AST from other loaders
        if (meta && meta.ast && meta.ast.type === 'postcss') {
            ;
            ({ root } = meta.ast);
            loaderSpan.setAttribute('astUsed', 'true');
        }
        // Initializes postcss with plugins
        const { postcssWithPlugins } = await options.postcss();
        let result;
        try {
            result = await loaderSpan.traceChild('postcss-process').traceAsyncFn(()=>postcssWithPlugins.process(root || content, processOptions));
        } catch (error) {
            if (error.file) {
                this.addDependency(error.file);
            }
            if (error.name === 'CssSyntaxError') {
                throw new _Error.default(error);
            }
            throw error;
        }
        for (const warning of result.warnings()){
            this.emitWarning(new _Warning.default(warning));
        }
        for (const message of result.messages){
            // eslint-disable-next-line default-case
            switch(message.type){
                case 'dependency':
                    this.addDependency(message.file);
                    break;
                case 'build-dependency':
                    this.addBuildDependency(message.file);
                    break;
                case 'missing-dependency':
                    this.addMissingDependency(message.file);
                    break;
                case 'context-dependency':
                    this.addContextDependency(message.file);
                    break;
                case 'dir-dependency':
                    this.addContextDependency(message.dir);
                    break;
                case 'asset':
                    if (message.content && message.file) {
                        this.emitFile(message.file, message.content, message.sourceMap, message.info);
                    }
            }
        }
        // eslint-disable-next-line no-undefined
        let map = result.map ? result.map.toJSON() : undefined;
        if (map && useSourceMap) {
            map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);
        }
        const ast = {
            type: 'postcss',
            version: result.processor.version,
            root: result.root
        };
        return [
            result.css,
            map,
            {
                ast
            }
        ];
    }).then(([css, map, { ast }])=>{
        callback == null ? void 0 : callback(null, css, map, {
            ast
        });
    }, (err)=>{
        callback == null ? void 0 : callback(err);
    });
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getTargets", {
    enumerable: true,
    get: function() {
        return getTargets;
    }
});
let targetsCache = {};
/**
 * Convert a version number to a single 24-bit number
 *
 * https://github.com/lumeland/lume/blob/4cc75599006df423a14befc06d3ed8493c645b09/plugins/lightningcss.ts#L160
 */ function version(major, minor = 0, patch = 0) {
    return major << 16 | minor << 8 | patch;
}
function parseVersion(v) {
    return v.split('.').reduce((acc, val)=>{
        if (!acc) {
            return null;
        }
        const parsed = parseInt(val, 10);
        if (isNaN(parsed)) {
            return null;
        }
        acc.push(parsed);
        return acc;
    }, []);
}
function browserslistToTargets(targets) {
    return targets.reduce((acc, value)=>{
        const [name, v] = value.split(' ');
        const parsedVersion = parseVersion(v);
        if (!parsedVersion) {
            return acc;
        }
        const versionDigit = version(parsedVersion[0], parsedVersion[1], parsedVersion[2]);
        if (name === 'and_qq' || name === 'and_uc' || name === 'baidu' || name === 'bb' || name === 'kaios' || name === 'op_mini') {
            return acc;
        }
        if (acc[name] == null || versionDigit < acc[name]) {
            acc[name] = versionDigit;
        }
        return acc;
    }, {});
}
const getTargets = (opts)=>{
    const cache = targetsCache[opts.key];
    if (cache) {
        return cache;
    }
    const result = browserslistToTargets(opts.targets ?? []);
    return targetsCache[opts.key] = result;
}; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/codegen.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getExportCode: null,
    getImportCode: null,
    getModuleCode: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getExportCode: function() {
        return getExportCode;
    },
    getImportCode: function() {
        return getImportCode;
    },
    getModuleCode: function() {
        return getModuleCode;
    }
});
const _camelcase = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/camelcase.js [app-rsc] (ecmascript)"));
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getImportCode(imports, options) {
    let code = '';
    for (const item of imports){
        const { importName, url, icss } = item;
        if (options.esModule) {
            if (icss && options.modules.namedExport) {
                code += `import ${options.modules.exportOnlyLocals ? '' : `${importName}, `}* as ${importName}_NAMED___ from ${url};\n`;
            } else {
                code += `import ${importName} from ${url};\n`;
            }
        } else {
            code += `var ${importName} = require(${url});\n`;
        }
    }
    return code ? `// Imports\n${code}` : '';
}
function getModuleCode(result, api, replacements, options, loaderContext) {
    if (options.modules.exportOnlyLocals === true) {
        return '';
    }
    const sourceMapValue = options.sourceMap ? `,${(0, _utils.normalizeSourceMapForRuntime)(result.map, loaderContext)}` : '';
    let code = JSON.stringify(result.css);
    let beforeCode = `var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(${options.sourceMap});\n`;
    for (const item of api){
        const { url, media, dedupe } = item;
        beforeCode += url ? `___CSS_LOADER_EXPORT___.push([module.id, ${JSON.stringify(`@import url(${url});`)}${media ? `, ${JSON.stringify(media)}` : ''}]);\n` : `___CSS_LOADER_EXPORT___.i(${item.importName}${media ? `, ${JSON.stringify(media)}` : dedupe ? ', ""' : ''}${dedupe ? ', true' : ''});\n`;
    }
    for (const item of replacements){
        const { replacementName, importName, localName } = item;
        if (localName) {
            code = code.replace(new RegExp(replacementName, 'g'), ()=>options.modules.namedExport ? `" + ${importName}_NAMED___[${JSON.stringify((0, _camelcase.default)(localName))}] + "` : `" + ${importName}.locals[${JSON.stringify(localName)}] + "`);
        } else {
            const { hash, needQuotes } = item;
            const getUrlOptions = [
                ...hash ? [
                    `hash: ${JSON.stringify(hash)}`
                ] : [],
                ...needQuotes ? 'needQuotes: true' : []
            ];
            const preparedOptions = getUrlOptions.length > 0 ? `, { ${getUrlOptions.join(', ')} }` : '';
            beforeCode += `var ${replacementName} = ___CSS_LOADER_GET_URL_IMPORT___(${importName}${preparedOptions});\n`;
            code = code.replace(new RegExp(replacementName, 'g'), ()=>`" + ${replacementName} + "`);
        }
    }
    return `${beforeCode}// Module\n___CSS_LOADER_EXPORT___.push([module.id, ${code}, ""${sourceMapValue}]);\n`;
}
function getExportCode(exports1, replacements, options) {
    let code = '// Exports\n';
    let localsCode = '';
    const addExportToLocalsCode = (name, value)=>{
        if (options.modules.namedExport) {
            localsCode += `export const ${(0, _camelcase.default)(name)} = ${JSON.stringify(value)};\n`;
        } else {
            if (localsCode) {
                localsCode += `,\n`;
            }
            localsCode += `\t${JSON.stringify(name)}: ${JSON.stringify(value)}`;
        }
    };
    for (const { name, value } of exports1){
        switch(options.modules.exportLocalsConvention){
            case 'camelCase':
                {
                    addExportToLocalsCode(name, value);
                    const modifiedName = (0, _camelcase.default)(name);
                    if (modifiedName !== name) {
                        addExportToLocalsCode(modifiedName, value);
                    }
                    break;
                }
            case 'camelCaseOnly':
                {
                    addExportToLocalsCode((0, _camelcase.default)(name), value);
                    break;
                }
            case 'dashes':
                {
                    addExportToLocalsCode(name, value);
                    const modifiedName = (0, _utils.dashesCamelCase)(name);
                    if (modifiedName !== name) {
                        addExportToLocalsCode(modifiedName, value);
                    }
                    break;
                }
            case 'dashesOnly':
                {
                    addExportToLocalsCode((0, _utils.dashesCamelCase)(name), value);
                    break;
                }
            case 'asIs':
            default:
                addExportToLocalsCode(name, value);
                break;
        }
    }
    for (const item of replacements){
        const { replacementName, localName } = item;
        if (localName) {
            const { importName } = item;
            localsCode = localsCode.replace(new RegExp(replacementName, 'g'), ()=>{
                if (options.modules.namedExport) {
                    return `" + ${importName}_NAMED___[${JSON.stringify((0, _camelcase.default)(localName))}] + "`;
                } else if (options.modules.exportOnlyLocals) {
                    return `" + ${importName}[${JSON.stringify(localName)}] + "`;
                }
                return `" + ${importName}.locals[${JSON.stringify(localName)}] + "`;
            });
        } else {
            localsCode = localsCode.replace(new RegExp(replacementName, 'g'), ()=>`" + ${replacementName} + "`);
        }
    }
    if (options.modules.exportOnlyLocals) {
        code += options.modules.namedExport ? localsCode : `${options.esModule ? 'export default' : 'module.exports ='} {\n${localsCode}\n};\n`;
        return code;
    }
    if (localsCode) {
        code += options.modules.namedExport ? localsCode : `___CSS_LOADER_EXPORT___.locals = {\n${localsCode}\n};\n`;
    }
    code += `${options.esModule ? 'export default' : 'module.exports ='} ___CSS_LOADER_EXPORT___;\n`;
    return code;
} //# sourceMappingURL=codegen.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/interface.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ECacheKey", {
    enumerable: true,
    get: function() {
        return ECacheKey;
    }
});
var ECacheKey = /*#__PURE__*/ function(ECacheKey) {
    ECacheKey["loader"] = "loader";
    ECacheKey["minify"] = "minify";
    return ECacheKey;
}({}); //# sourceMappingURL=interface.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/loader.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    LightningCssLoader: null,
    raw: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LightningCssLoader: function() {
        return LightningCssLoader;
    },
    raw: function() {
        return raw;
    }
});
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/utils.js [app-rsc] (ecmascript)");
const _codegen = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/codegen.js [app-rsc] (ecmascript)");
const _utils1 = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/utils.js [app-rsc] (ecmascript)");
const _stringifyrequest = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/stringify-request.js [app-rsc] (ecmascript)");
const _interface = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/interface.js [app-rsc] (ecmascript)");
const encoder = new TextEncoder();
function createUrlAndImportVisitor(visitorOptions, apis, imports, replacements, replacedUrls, replacedImportUrls) {
    const importUrlToNameMap = new Map();
    let hasUrlImportHelper = false;
    const urlToNameMap = new Map();
    const urlToReplacementMap = new Map();
    let urlIndex = -1;
    let importUrlIndex = -1;
    function handleUrl(u) {
        let url = u.url;
        const needKeep = visitorOptions.urlFilter(url);
        if (!needKeep) {
            return u;
        }
        if ((0, _utils1.isDataUrl)(url)) {
            return u;
        }
        urlIndex++;
        replacedUrls.set(urlIndex, url);
        url = `__NEXT_LIGHTNINGCSS_LOADER_URL_REPLACE_${urlIndex}__`;
        const [, query, hashOrQuery] = url.split(/(\?)?#/, 3);
        const queryParts = url.split('!');
        let prefix;
        if (queryParts.length > 1) {
            url = queryParts.pop();
            prefix = queryParts.join('!');
        }
        let hash = query ? '?' : '';
        hash += hashOrQuery ? `#${hashOrQuery}` : '';
        if (!hasUrlImportHelper) {
            imports.push({
                type: 'get_url_import',
                importName: '___CSS_LOADER_GET_URL_IMPORT___',
                url: JSON.stringify("[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/getUrl.js [app-rsc] (ecmascript)"),
                index: -1
            });
            hasUrlImportHelper = true;
        }
        const newUrl = prefix ? `${prefix}!${url}` : url;
        let importName = urlToNameMap.get(newUrl);
        if (!importName) {
            importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;
            urlToNameMap.set(newUrl, importName);
            imports.push({
                type: 'url',
                importName,
                url: JSON.stringify(newUrl),
                index: urlIndex
            });
        }
        // This should be true for string-urls in image-set
        const needQuotes = false;
        const replacementKey = JSON.stringify({
            newUrl,
            hash,
            needQuotes
        });
        let replacementName = urlToReplacementMap.get(replacementKey);
        if (!replacementName) {
            replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;
            urlToReplacementMap.set(replacementKey, replacementName);
            replacements.push({
                replacementName,
                importName,
                hash,
                needQuotes
            });
        }
        return {
            loc: u.loc,
            url: replacementName
        };
    }
    return {
        Rule: {
            import (node) {
                if (visitorOptions.importFilter) {
                    const needKeep = visitorOptions.importFilter(node.value.url, node.value.media);
                    if (!needKeep) {
                        return node;
                    }
                }
                let url = node.value.url;
                importUrlIndex++;
                replacedImportUrls.set(importUrlIndex, url);
                url = `__NEXT_LIGHTNINGCSS_LOADER_IMPORT_URL_REPLACE_${importUrlIndex}__`;
                // TODO: Use identical logic as valueParser.stringify()
                const media = node.value.media.mediaQueries.length ? JSON.stringify(node.value.media.mediaQueries) : undefined;
                const isRequestable = (0, _utils1.isUrlRequestable)(url);
                let prefix;
                if (isRequestable) {
                    const queryParts = url.split('!');
                    if (queryParts.length > 1) {
                        url = queryParts.pop();
                        prefix = queryParts.join('!');
                    }
                }
                if (!isRequestable) {
                    apis.push({
                        url,
                        media
                    });
                    // Bug of lightningcss
                    return {
                        type: 'ignored',
                        value: ''
                    };
                }
                const newUrl = prefix ? `${prefix}!${url}` : url;
                let importName = importUrlToNameMap.get(newUrl);
                if (!importName) {
                    importName = `___CSS_LOADER_AT_RULE_IMPORT_${importUrlToNameMap.size}___`;
                    importUrlToNameMap.set(newUrl, importName);
                    const importUrl = visitorOptions.urlHandler(newUrl);
                    imports.push({
                        type: 'rule_import',
                        importName,
                        url: importUrl
                    });
                }
                apis.push({
                    importName,
                    media
                });
                // Bug of lightningcss
                return {
                    type: 'ignored',
                    value: ''
                };
            }
        },
        Url (node) {
            return handleUrl(node);
        }
    };
}
function createIcssVisitor({ apis, imports, replacements, replacedUrls, urlHandler }) {
    let index = -1;
    let replacementIndex = -1;
    return {
        Declaration: {
            composes (node) {
                if (node.property === 'unparsed') {
                    return;
                }
                const specifier = node.value.from;
                if ((specifier == null ? void 0 : specifier.type) !== 'file') {
                    return;
                }
                let url = specifier.value;
                if (!url) {
                    return;
                }
                index++;
                replacedUrls.set(index, url);
                url = `__NEXT_LIGHTNINGCSS_LOADER_ICSS_URL_REPLACE_${index}__`;
                const importName = `___CSS_LOADER_ICSS_IMPORT_${imports.length}___`;
                imports.push({
                    type: 'icss_import',
                    importName,
                    icss: true,
                    url: urlHandler(url),
                    index
                });
                apis.push({
                    importName,
                    dedupe: true,
                    index
                });
                const newNames = [];
                for (const localName of node.value.names){
                    replacementIndex++;
                    const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;
                    replacements.push({
                        replacementName,
                        importName,
                        localName
                    });
                    newNames.push(replacementName);
                }
                return {
                    property: 'composes',
                    value: {
                        loc: node.value.loc,
                        names: newNames,
                        from: specifier
                    }
                };
            }
        }
    };
}
const LOADER_NAME = `lightningcss-loader`;
async function LightningCssLoader(source, prevMap) {
    var _options_modules;
    const done = this.async();
    const options = this.getOptions();
    const { implementation, targets: userTargets, ...opts } = options;
    options.modules ??= {};
    if (implementation && typeof implementation.transformCss !== 'function') {
        done(new TypeError(`[${LOADER_NAME}]: options.implementation.transformCss must be an 'lightningcss' transform function. Received ${typeof implementation.transformCss}`));
        return;
    }
    if (options.postcss) {
        var _postcssWithPlugins_plugins;
        const { postcssWithPlugins } = await options.postcss();
        if ((postcssWithPlugins == null ? void 0 : (_postcssWithPlugins_plugins = postcssWithPlugins.plugins) == null ? void 0 : _postcssWithPlugins_plugins.length) > 0) {
            throw new Error(`[${LOADER_NAME}]: experimental.useLightningcss does not work with postcss plugins. Please remove 'useLightningcss: true' from your configuration.`);
        }
    }
    const exports1 = [];
    const imports = [];
    const icssImports = [];
    const apis = [];
    const replacements = [];
    if (((_options_modules = options.modules) == null ? void 0 : _options_modules.exportOnlyLocals) !== true) {
        imports.unshift({
            type: 'api_import',
            importName: '___CSS_LOADER_API_IMPORT___',
            url: (0, _stringifyrequest.stringifyRequest)(this, "[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js [app-rsc] (ecmascript)")
        });
    }
    const { loadBindings } = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
    const transform = (implementation == null ? void 0 : implementation.transformCss) ?? (await loadBindings()).css.lightning.transform;
    const replacedUrls = new Map();
    const icssReplacedUrls = new Map();
    const replacedImportUrls = new Map();
    const urlImportVisitor = createUrlAndImportVisitor({
        urlHandler: (url)=>(0, _stringifyrequest.stringifyRequest)(this, (0, _utils1.getPreRequester)(this)(options.importLoaders ?? 0) + url),
        urlFilter: (0, _utils1.getFilter)(options.url, this.resourcePath),
        importFilter: (0, _utils1.getFilter)(options.import, this.resourcePath),
        context: this.context
    }, apis, imports, replacements, replacedUrls, replacedImportUrls);
    const icssVisitor = createIcssVisitor({
        apis,
        imports: icssImports,
        replacements,
        replacedUrls: icssReplacedUrls,
        urlHandler: (url)=>(0, _stringifyrequest.stringifyRequest)(this, (0, _utils1.getPreRequester)(this)(options.importLoaders) + url)
    });
    // This works by returned visitors are not conflicting.
    // naive workaround for composeVisitors, as we do not directly depends on lightningcss's npm pkg
    // but next-swc provides bindings
    const visitor = {
        ...urlImportVisitor,
        ...icssVisitor
    };
    try {
        const { code, map, exports: moduleExports } = transform({
            ...opts,
            visitor,
            cssModules: options.modules ? {
                pattern: ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : '[name]__[hash]__[local]'
            } : undefined,
            filename: this.resourcePath,
            code: encoder.encode(source),
            sourceMap: this.sourceMap,
            targets: (0, _utils.getTargets)({
                targets: userTargets,
                key: _interface.ECacheKey.loader
            }),
            inputSourceMap: this.sourceMap && prevMap ? JSON.stringify(prevMap) : undefined,
            include: 1
        });
        let cssCodeAsString = code.toString();
        if (moduleExports) {
            for(const name in moduleExports){
                if (Object.prototype.hasOwnProperty.call(moduleExports, name)) {
                    const v = moduleExports[name];
                    let value = v.name;
                    for (const compose of v.composes){
                        value += ` ${compose.name}`;
                    }
                    exports1.push({
                        name,
                        value
                    });
                }
            }
        }
        if (replacedUrls.size !== 0) {
            const urlResolver = this.getResolve({
                conditionNames: [
                    'asset'
                ],
                mainFields: [
                    'asset'
                ],
                mainFiles: [],
                extensions: []
            });
            for (const [index, url] of replacedUrls.entries()){
                const [pathname] = url.split(/(\?)?#/, 3);
                const request = (0, _utils1.requestify)(pathname, this.rootContext);
                const resolvedUrl = await (0, _utils1.resolveRequests)(urlResolver, this.context, [
                    ...new Set([
                        request,
                        url
                    ])
                ]);
                for (const importItem of imports){
                    importItem.url = importItem.url.replace(`__NEXT_LIGHTNINGCSS_LOADER_URL_REPLACE_${index}__`, resolvedUrl ?? url);
                }
            }
        }
        if (replacedImportUrls.size !== 0) {
            const importResolver = this.getResolve({
                conditionNames: [
                    'style'
                ],
                extensions: [
                    '.css'
                ],
                mainFields: [
                    'css',
                    'style',
                    'main',
                    '...'
                ],
                mainFiles: [
                    'index',
                    '...'
                ],
                restrictions: [
                    /\.css$/i
                ]
            });
            for (const [index, url] of replacedImportUrls.entries()){
                const [pathname] = url.split(/(\?)?#/, 3);
                const request = (0, _utils1.requestify)(pathname, this.rootContext);
                const resolvedUrl = await (0, _utils1.resolveRequests)(importResolver, this.context, [
                    ...new Set([
                        request,
                        url
                    ])
                ]);
                for (const importItem of imports){
                    importItem.url = importItem.url.replace(`__NEXT_LIGHTNINGCSS_LOADER_IMPORT_URL_REPLACE_${index}__`, resolvedUrl ?? url);
                }
            }
        }
        if (icssReplacedUrls.size !== 0) {
            const icssResolver = this.getResolve({
                conditionNames: [
                    'style'
                ],
                extensions: [],
                mainFields: [
                    'css',
                    'style',
                    'main',
                    '...'
                ],
                mainFiles: [
                    'index',
                    '...'
                ]
            });
            for (const [index, url] of icssReplacedUrls.entries()){
                const [pathname] = url.split(/(\?)?#/, 3);
                const request = (0, _utils1.requestify)(pathname, this.rootContext);
                const resolvedUrl = await (0, _utils1.resolveRequests)(icssResolver, this.context, [
                    ...new Set([
                        url,
                        request
                    ])
                ]);
                for (const importItem of icssImports){
                    importItem.url = importItem.url.replace(`__NEXT_LIGHTNINGCSS_LOADER_ICSS_URL_REPLACE_${index}__`, resolvedUrl ?? url);
                }
            }
        }
        imports.push(...icssImports);
        const importCode = (0, _codegen.getImportCode)(imports, options);
        const moduleCode = (0, _codegen.getModuleCode)({
            css: cssCodeAsString,
            map
        }, apis, replacements, options, this);
        const exportCode = (0, _codegen.getExportCode)(exports1, replacements, options);
        const esCode = `${importCode}${moduleCode}${exportCode}`;
        done(null, esCode, map && JSON.parse(map.toString()));
    } catch (error) {
        console.error('lightningcss-loader error', error);
        done(error);
    }
}
const raw = true; //# sourceMappingURL=loader.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/minify.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// @ts-ignore
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LightningCssMinifyPlugin", {
    enumerable: true,
    get: function() {
        return LightningCssMinifyPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _webpacksources3 = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack-sources3/index.js [app-rsc] (ecmascript)");
const _interface = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/interface.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/utils.js [app-rsc] (ecmascript)");
const _buffer = __turbopack_require__("[externals]/buffer [external] (buffer, cjs)");
const PLUGIN_NAME = 'lightning-css-minify';
const CSS_FILE_REG = /\.css(?:\?.*)?$/i;
class LightningCssMinifyPlugin {
    constructor(opts = {}){
        const { implementation, ...otherOpts } = opts;
        if (implementation && typeof implementation.transformCss !== 'function') {
            throw new TypeError(`[LightningCssMinifyPlugin]: implementation.transformCss must be an 'lightningcss' transform function. Received ${typeof implementation.transformCss}`);
        }
        this.transform = implementation == null ? void 0 : implementation.transformCss;
        this.options = otherOpts;
    }
    apply(compiler) {
        const meta = JSON.stringify({
            name: '@next/lightningcss-loader',
            version: '0.0.0',
            options: this.options
        });
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.chunkHash.tap(PLUGIN_NAME, (_, hash)=>hash.update(meta));
            compilation.hooks.processAssets.tapPromise({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,
                additionalAssets: true
            }, async ()=>await this.transformAssets(compilation));
            compilation.hooks.statsPrinter.tap(PLUGIN_NAME, (statsPrinter)=>{
                statsPrinter.hooks.print.for('asset.info.minimized') // @ts-ignore
                .tap(PLUGIN_NAME, (minimized, { green, formatFlag })=>{
                    // @ts-ignore
                    return minimized ? green(formatFlag('minimized')) : undefined;
                });
            });
        });
    }
    async transformAssets(compilation) {
        const { options: { devtool } } = compilation.compiler;
        if (!this.transform) {
            const { loadBindings } = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
            this.transform = (await loadBindings()).css.lightning.transform;
        }
        const sourcemap = this.options.sourceMap === undefined ? devtool && devtool.includes('source-map') : this.options.sourceMap;
        const { include, exclude, test: testRegExp, targets: userTargets, ...transformOptions } = this.options;
        const assets = compilation.getAssets().filter((asset)=>!asset.info.minimized && // Filter out by file type
            (testRegExp || CSS_FILE_REG).test(asset.name) && _webpack.ModuleFilenameHelpers.matchObject({
                include,
                exclude
            }, asset.name));
        await Promise.all(assets.map(async (asset)=>{
            const { source, map } = asset.source.sourceAndMap();
            const sourceAsString = source.toString();
            const code = typeof source === 'string' ? _buffer.Buffer.from(source) : source;
            const targets = (0, _utils.getTargets)({
                targets: userTargets,
                key: _interface.ECacheKey.minify
            });
            const result = await this.transform({
                filename: asset.name,
                code,
                minify: true,
                sourceMap: sourcemap,
                targets,
                ...transformOptions
            });
            const codeString = result.code.toString();
            compilation.updateAsset(asset.name, sourcemap ? new _webpacksources3.SourceMapSource(codeString, asset.name, JSON.parse(result.map.toString()), sourceAsString, map, true) : new _webpacksources3.RawSource(codeString), {
                ...asset.info,
                minimized: true
            });
        }));
    }
} //# sourceMappingURL=minify.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    LightningCssMinifyPlugin: null,
    default: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LightningCssMinifyPlugin: function() {
        return _minify.LightningCssMinifyPlugin;
    },
    default: function() {
        return _default;
    }
});
const _loader = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/loader.js [app-rsc] (ecmascript)");
const _minify = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/minify.js [app-rsc] (ecmascript)");
const _default = _loader.LightningCssLoader; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/global.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getGlobalCssLoader", {
    enumerable: true,
    get: function() {
        return getGlobalCssLoader;
    }
});
const _client = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/client.js [app-rsc] (ecmascript)");
const _fileresolve = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/file-resolve.js [app-rsc] (ecmascript)");
function getGlobalCssLoader(ctx, postcss, preProcessors = []) {
    const loaders = [];
    if (ctx.isClient) {
        // Add appropriate development more or production mode style
        // loader
        loaders.push((0, _client.getClientStyleLoader)({
            hasAppDir: ctx.hasAppDir,
            isAppDir: ctx.isAppDir,
            isDevelopment: ctx.isDevelopment,
            assetPrefix: ctx.assetPrefix
        }));
    }
    if (ctx.experimental.useLightningcss) {
        loaders.push({
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/index.js [app-rsc] (ecmascript)",
            options: {
                importLoaders: 1 + preProcessors.length,
                url: (url, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                import: (url, _, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                modules: false,
                targets: ctx.supportedBrowsers,
                postcss
            }
        });
    } else {
        // Resolve CSS `@import`s and `url()`s
        loaders.push({
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js [app-rsc] (ecmascript)",
            options: {
                postcss,
                importLoaders: 1 + preProcessors.length,
                // Next.js controls CSS Modules eligibility:
                modules: false,
                url: (url, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                import: (url, _, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports)
            }
        });
        // Compile CSS
        loaders.push({
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js [app-rsc] (ecmascript)",
            options: {
                postcss
            }
        });
    }
    loaders.push(// order of preprocessors.
    ...preProcessors.slice().reverse());
    return loaders;
} //# sourceMappingURL=global.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/getCssModuleLocalIdent.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCssModuleLocalIdent", {
    enumerable: true,
    get: function() {
        return getCssModuleLocalIdent;
    }
});
const _loaderutils3 = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/loader-utils3/index.js [app-rsc] (ecmascript)"));
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const regexLikeIndexModule = /(?<!pages[\\/])index\.module\.(scss|sass|css)$/;
function getCssModuleLocalIdent(context, _, exportName, options) {
    const relativePath = _path.default.relative(context.rootContext, context.resourcePath).replace(/\\+/g, '/');
    // Generate a more meaningful name (parent folder) when the user names the
    // file `index.module.css`.
    const fileNameOrFolder = regexLikeIndexModule.test(relativePath) ? '[folder]' : '[name]';
    // Generate a hash to make the class name unique.
    const hash = _loaderutils3.default.getHashDigest(Buffer.from(`filePath:${relativePath}#className:${exportName}`), 'sha1', 'base64', 5);
    // Have webpack interpolate the `[folder]` or `[name]` to its real value.
    return _loaderutils3.default.interpolateName(context, fileNameOrFolder + '_' + exportName + '__' + hash, options).replace(// `.root {}` inside a file named `about.module.css`. Let's simplify
    // this.
    /\.module_/, '_') // Replace invalid symbols with underscores instead of escaping
    // https://mathiasbynens.be/notes/css-escapes#identifiers-strings
    .replace(/[^a-zA-Z0-9-_]/g, '_') // "they cannot start with a digit, two hyphens, or a hyphen followed by a digit [sic]"
    // https://www.w3.org/TR/CSS21/syndata.html#characters
    .replace(/^(\d|--|-\d)/, '__$1');
} //# sourceMappingURL=getCssModuleLocalIdent.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/modules.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCssModuleLoader", {
    enumerable: true,
    get: function() {
        return getCssModuleLoader;
    }
});
const _client = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/client.js [app-rsc] (ecmascript)");
const _fileresolve = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/file-resolve.js [app-rsc] (ecmascript)");
const _getCssModuleLocalIdent = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/getCssModuleLocalIdent.js [app-rsc] (ecmascript)");
function getCssModuleLoader(ctx, postcss, preProcessors = []) {
    const loaders = [];
    if (ctx.isClient) {
        // Add appropriate development more or production mode style
        // loader
        loaders.push((0, _client.getClientStyleLoader)({
            hasAppDir: ctx.hasAppDir,
            isAppDir: ctx.isAppDir,
            isDevelopment: ctx.isDevelopment,
            assetPrefix: ctx.assetPrefix
        }));
    }
    if (ctx.experimental.useLightningcss) {
        loaders.push({
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/index.js [app-rsc] (ecmascript)",
            options: {
                importLoaders: 1 + preProcessors.length,
                url: (url, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                import: (url, _, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                modules: {
                    // Do not transform class names (CJS mode backwards compatibility):
                    exportLocalsConvention: 'asIs',
                    // Server-side (Node.js) rendering support:
                    exportOnlyLocals: ctx.isServer
                },
                targets: ctx.supportedBrowsers,
                postcss
            }
        });
    } else {
        // Resolve CSS `@import`s and `url()`s
        loaders.push({
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js [app-rsc] (ecmascript)",
            options: {
                postcss,
                importLoaders: 1 + preProcessors.length,
                // Use CJS mode for backwards compatibility:
                esModule: false,
                url: (url, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                import: (url, _, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
                modules: {
                    // Do not transform class names (CJS mode backwards compatibility):
                    exportLocalsConvention: 'asIs',
                    // Server-side (Node.js) rendering support:
                    exportOnlyLocals: ctx.isServer,
                    // Disallow global style exports so we can code-split CSS and
                    // not worry about loading order.
                    mode: 'pure',
                    // Generate a friendly production-ready name so it's
                    // reasonably understandable. The same name is used for
                    // development.
                    // TODO: Consider making production reduce this to a single
                    // character?
                    getLocalIdent: _getCssModuleLocalIdent.getCssModuleLocalIdent
                }
            }
        });
        // Compile CSS
        loaders.push({
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js [app-rsc] (ecmascript)",
            options: {
                postcss
            }
        });
    }
    loaders.push(// order of preprocessors.
    ...preProcessors.slice().reverse());
    return loaders;
} //# sourceMappingURL=modules.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && __export(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/global.js [app-rsc] (ecmascript)")) && __export(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/modules.js [app-rsc] (ecmascript)"));
_export_star(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/global.js [app-rsc] (ecmascript)"), exports);
_export_star(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/modules.js [app-rsc] (ecmascript)"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/next-font.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getNextFontLoader", {
    enumerable: true,
    get: function() {
        return getNextFontLoader;
    }
});
const _client = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/client.js [app-rsc] (ecmascript)");
const _fileresolve = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/file-resolve.js [app-rsc] (ecmascript)");
function getNextFontLoader(ctx, postcss, fontLoaderPath) {
    const loaders = [];
    if (ctx.isClient) {
        // Add appropriate development mode or production mode style
        // loader
        loaders.push((0, _client.getClientStyleLoader)({
            hasAppDir: ctx.hasAppDir,
            isDevelopment: ctx.isDevelopment,
            assetPrefix: ctx.assetPrefix
        }));
    }
    loaders.push({
        loader: "[project]/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js [app-rsc] (ecmascript)",
        options: {
            postcss,
            importLoaders: 1,
            // Use CJS mode for backwards compatibility:
            esModule: false,
            url: (url, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
            import: (url, _, resourcePath)=>(0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),
            modules: {
                // Do not transform class names (CJS mode backwards compatibility):
                exportLocalsConvention: 'asIs',
                // Server-side (Node.js) rendering support:
                exportOnlyLocals: ctx.isServer,
                // Disallow global style exports so we can code-split CSS and
                // not worry about loading order.
                mode: 'pure',
                getLocalIdent: (_context, _localIdentName, exportName, _options, meta)=>{
                    // hash from next-font-loader
                    return `__${exportName}_${meta.fontFamilyHash}`;
                }
            },
            fontLoader: true
        }
    });
    loaders.push({
        loader: 'next-font-loader',
        options: {
            isDev: ctx.isDevelopment,
            isServer: ctx.isServer,
            assetPrefix: ctx.assetPrefix,
            fontLoaderPath,
            postcss
        }
    });
    return loaders;
} //# sourceMappingURL=next-font.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/messages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getCustomDocumentError: null,
    getGlobalImportError: null,
    getGlobalModuleImportError: null,
    getLocalModuleImportError: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCustomDocumentError: function() {
        return getCustomDocumentError;
    },
    getGlobalImportError: function() {
        return getGlobalImportError;
    },
    getGlobalModuleImportError: function() {
        return getGlobalModuleImportError;
    },
    getLocalModuleImportError: function() {
        return getLocalModuleImportError;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
function getGlobalImportError() {
    return `Global CSS ${(0, _picocolors.bold)('cannot')} be imported from files other than your ${(0, _picocolors.bold)('Custom <App>')}. Due to the Global nature of stylesheets, and to avoid conflicts, Please move all first-party global CSS imports to ${(0, _picocolors.cyan)('pages/_app.js')}. Or convert the import to Component-Level CSS (CSS Modules).\nRead more: https://nextjs.org/docs/messages/css-global`;
}
function getGlobalModuleImportError() {
    return `Global CSS ${(0, _picocolors.bold)('cannot')} be imported from within ${(0, _picocolors.bold)('node_modules')}.\nRead more: https://nextjs.org/docs/messages/css-npm`;
}
function getLocalModuleImportError() {
    return `CSS Modules ${(0, _picocolors.bold)('cannot')} be imported from within ${(0, _picocolors.bold)('node_modules')}.\nRead more: https://nextjs.org/docs/messages/css-modules-npm`;
}
function getCustomDocumentError() {
    return `CSS ${(0, _picocolors.bold)('cannot')} be imported within ${(0, _picocolors.cyan)('pages/_document.js')}. Please move global styles to ${(0, _picocolors.cyan)('pages/_app.js')}.`;
} //# sourceMappingURL=messages.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/plugins.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getPostCssPlugins", {
    enumerable: true,
    get: function() {
        return getPostCssPlugins;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _findconfig = __turbopack_require__("[project]/node_modules/next/dist/lib/find-config.js [app-rsc] (ecmascript)");
const genericErrorText = 'Malformed PostCSS Configuration';
function getError_NullConfig(pluginName) {
    return `${(0, _picocolors.red)((0, _picocolors.bold)('Error'))}: Your PostCSS configuration for '${pluginName}' cannot have ${(0, _picocolors.bold)('null')} configuration.\nTo disable '${pluginName}', pass ${(0, _picocolors.bold)('false')}, otherwise, pass ${(0, _picocolors.bold)('true')} or a configuration object.`;
}
function isIgnoredPlugin(pluginPath) {
    const ignoredRegex = /(?:^|[\\/])(postcss-modules-values|postcss-modules-scope|postcss-modules-extract-imports|postcss-modules-local-by-default|postcss-modules)(?:[\\/]|$)/i;
    const match = ignoredRegex.exec(pluginPath);
    if (match == null) {
        return false;
    }
    const plugin = match.pop();
    console.warn(`${(0, _picocolors.yellow)((0, _picocolors.bold)('Warning'))}: Please remove the ${(0, _picocolors.underline)(plugin)} plugin from your PostCSS configuration. ` + `This plugin is automatically configured by Next.js.\n` + 'Read more: https://nextjs.org/docs/messages/postcss-ignored-plugin');
    return true;
}
const createLazyPostCssPlugin = (fn)=>{
    let result = undefined;
    const plugin = (...args)=>{
        if (result === undefined) result = fn();
        if (result.postcss === true) {
            return result(...args);
        } else if (result.postcss) {
            return result.postcss;
        }
        return result;
    };
    plugin.postcss = true;
    return plugin;
};
async function loadPlugin(dir, pluginName, options) {
    if (options === false || isIgnoredPlugin(pluginName)) {
        return false;
    }
    if (options == null) {
        console.error(getError_NullConfig(pluginName));
        throw new Error(genericErrorText);
    }
    const pluginPath = (()=>{
        const e = new Error("Cannot find module as expression is too dynamic");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })();
    if (isIgnoredPlugin(pluginPath)) {
        return false;
    } else if (options === true) {
        return createLazyPostCssPlugin(()=>(()=>{
                const e = new Error("Cannot find module as expression is too dynamic");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })());
    } else {
        if (typeof options === 'object' && Object.keys(options).length === 0) {
            return createLazyPostCssPlugin(()=>(()=>{
                    const e = new Error("Cannot find module as expression is too dynamic");
                    e.code = 'MODULE_NOT_FOUND';
                    throw e;
                })());
        }
        return createLazyPostCssPlugin(()=>(()=>{
                const e = new Error("Cannot find module as expression is too dynamic");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })()(options));
    }
}
function getDefaultPlugins(supportedBrowsers, disablePostcssPresetEnv) {
    return [
        "[project]/node_modules/next/dist/compiled/postcss-flexbugs-fixes/index.js [app-rsc] (ecmascript)",
        disablePostcssPresetEnv ? false : [
            "[project]/node_modules/next/dist/compiled/postcss-preset-env/index.cjs [app-rsc] (ecmascript)",
            {
                browsers: supportedBrowsers ?? [
                    'defaults'
                ],
                autoprefixer: {
                    // Disable legacy flexbox support
                    flexbox: 'no-2009'
                },
                // Enable CSS features that have shipped to the
                // web platform, i.e. in 2+ browsers unflagged.
                stage: 3,
                features: {
                    'custom-properties': false
                }
            }
        ]
    ].filter(Boolean);
}
async function getPostCssPlugins(dir, supportedBrowsers, disablePostcssPresetEnv = false, useLightningcss = false) {
    let config = await (0, _findconfig.findConfig)(dir, 'postcss');
    if (config == null) {
        config = {
            plugins: useLightningcss ? [] : getDefaultPlugins(supportedBrowsers, disablePostcssPresetEnv)
        };
    }
    if (typeof config === 'function') {
        throw new Error(`Your custom PostCSS configuration may not export a function. Please export a plain object instead.\n` + 'Read more: https://nextjs.org/docs/messages/postcss-function');
    }
    // Warn user about configuration keys which are not respected
    const invalidKey = Object.keys(config).find((key)=>key !== 'plugins');
    if (invalidKey) {
        console.warn(`${(0, _picocolors.yellow)((0, _picocolors.bold)('Warning'))}: Your PostCSS configuration defines a field which is not supported (\`${invalidKey}\`). ` + `Please remove this configuration value.`);
    }
    // Enforce the user provided plugins if the configuration file is present
    let plugins = config.plugins;
    if (plugins == null || typeof plugins !== 'object') {
        throw new Error(`Your custom PostCSS configuration must export a \`plugins\` key.`);
    }
    if (!Array.isArray(plugins)) {
        // Capture variable so TypeScript is happy
        const pc = plugins;
        plugins = Object.keys(plugins).reduce((acc, curr)=>{
            const p = pc[curr];
            if (typeof p === 'undefined') {
                console.error(getError_NullConfig(curr));
                throw new Error(genericErrorText);
            }
            acc.push([
                curr,
                p
            ]);
            return acc;
        }, []);
    }
    const parsed = [];
    plugins.forEach((plugin)=>{
        if (plugin == null) {
            console.warn(`${(0, _picocolors.yellow)((0, _picocolors.bold)('Warning'))}: A ${(0, _picocolors.bold)('null')} PostCSS plugin was provided. This entry will be ignored.`);
        } else if (typeof plugin === 'string') {
            parsed.push([
                plugin,
                true
            ]);
        } else if (Array.isArray(plugin)) {
            const pluginName = plugin[0];
            const pluginConfig = plugin[1];
            if (typeof pluginName === 'string' && (typeof pluginConfig === 'boolean' || typeof pluginConfig === 'object' || typeof pluginConfig === 'string')) {
                parsed.push([
                    pluginName,
                    pluginConfig
                ]);
            } else {
                if (typeof pluginName !== 'string') {
                    console.error(`${(0, _picocolors.red)((0, _picocolors.bold)('Error'))}: A PostCSS Plugin must be provided as a ${(0, _picocolors.bold)('string')}. Instead, we got: '${pluginName}'.\n` + 'Read more: https://nextjs.org/docs/messages/postcss-shape');
                } else {
                    console.error(`${(0, _picocolors.red)((0, _picocolors.bold)('Error'))}: A PostCSS Plugin was passed as an array but did not provide its configuration ('${pluginName}').\n` + 'Read more: https://nextjs.org/docs/messages/postcss-shape');
                }
                throw new Error(genericErrorText);
            }
        } else if (typeof plugin === 'function') {
            console.error(`${(0, _picocolors.red)((0, _picocolors.bold)('Error'))}: A PostCSS Plugin was passed as a function using require(), but it must be provided as a ${(0, _picocolors.bold)('string')}.\nRead more: https://nextjs.org/docs/messages/postcss-shape`);
            throw new Error(genericErrorText);
        } else {
            console.error(`${(0, _picocolors.red)((0, _picocolors.bold)('Error'))}: An unknown PostCSS plugin was provided (${plugin}).\n` + 'Read more: https://nextjs.org/docs/messages/postcss-shape');
            throw new Error(genericErrorText);
        }
    });
    const resolved = await Promise.all(parsed.map((p)=>loadPlugin(dir, p[0], p[1])));
    const filtered = resolved.filter(Boolean);
    return filtered;
} //# sourceMappingURL=plugins.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/css/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    css: null,
    lazyPostCSS: null,
    regexLikeCss: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    css: function() {
        return css;
    },
    lazyPostCSS: function() {
        return lazyPostCSS;
    },
    regexLikeCss: function() {
        return regexLikeCss;
    }
});
const _lodashcurry = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/lodash.curry/index.js [app-rsc] (ecmascript)"));
const _helpers = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/helpers.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/utils.js [app-rsc] (ecmascript)");
const _loaders = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/index.js [app-rsc] (ecmascript)");
const _nextfont = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/loaders/next-font.js [app-rsc] (ecmascript)");
const _messages = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/messages.js [app-rsc] (ecmascript)");
const _plugins = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/plugins.js [app-rsc] (ecmascript)");
const _nonnullable = __turbopack_require__("[project]/node_modules/next/dist/lib/non-nullable.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const regexLikeCss = /\.(css|scss|sass)$/;
// RegExps for Style Sheets
const regexCssGlobal = /(?<!\.module)\.css$/;
const regexCssModules = /\.module\.css$/;
// RegExps for Syntactically Awesome Style Sheets
const regexSassGlobal = /(?<!\.module)\.(scss|sass)$/;
const regexSassModules = /\.module\.(scss|sass)$/;
const APP_LAYER_RULE = {
    or: [
        _constants.WEBPACK_LAYERS.reactServerComponents,
        _constants.WEBPACK_LAYERS.serverSideRendering,
        _constants.WEBPACK_LAYERS.appPagesBrowser
    ]
};
const PAGES_LAYER_RULE = {
    not: [
        _constants.WEBPACK_LAYERS.reactServerComponents,
        _constants.WEBPACK_LAYERS.serverSideRendering,
        _constants.WEBPACK_LAYERS.appPagesBrowser
    ]
};
/**
 * Mark a rule as removable if built-in CSS support is disabled
 */ function markRemovable(r) {
    Object.defineProperty(r, Symbol.for('__next_css_remove'), {
        enumerable: false,
        value: true
    });
    return r;
}
let postcssInstancePromise;
async function lazyPostCSS(rootDirectory, supportedBrowsers, disablePostcssPresetEnv, useLightningcss) {
    if (!postcssInstancePromise) {
        postcssInstancePromise = (async ()=>{
            const postcss = __turbopack_require__("[project]/node_modules/next/node_modules/postcss/lib/postcss.js [app-rsc] (ecmascript)");
            // @ts-ignore backwards compat
            postcss.plugin = function postcssPlugin(name, initializer) {
                function creator(...args) {
                    let transformer = initializer(...args);
                    transformer.postcssPlugin = name;
                    // transformer.postcssVersion = new Processor().version
                    return transformer;
                }
                let cache;
                Object.defineProperty(creator, 'postcss', {
                    get () {
                        if (!cache) cache = creator();
                        return cache;
                    }
                });
                creator.process = function(css, processOpts, pluginOpts) {
                    return postcss([
                        creator(pluginOpts)
                    ]).process(css, processOpts);
                };
                return creator;
            };
            // @ts-ignore backwards compat
            postcss.vendor = {
                /**
         * Returns the vendor prefix extracted from an input string.
         *
         * @example
         * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'
         * postcss.vendor.prefix('tab-size')      //=> ''
         */ prefix: function prefix(prop) {
                    const match = prop.match(/^(-\w+-)/);
                    if (match) {
                        return match[0];
                    }
                    return '';
                },
                /**
         * Returns the input string stripped of its vendor prefix.
         *
         * @example
         * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
         */ unprefixed: function unprefixed(/**
           * String with or without vendor prefix.
           */ prop) {
                    return prop.replace(/^-\w+-/, '');
                }
            };
            const postCssPlugins = await (0, _plugins.getPostCssPlugins)(rootDirectory, supportedBrowsers, disablePostcssPresetEnv, useLightningcss);
            return {
                postcss,
                postcssWithPlugins: postcss(postCssPlugins)
            };
        })();
    }
    return postcssInstancePromise;
}
const css = (0, _lodashcurry.default)(async function css(ctx, config) {
    const { prependData: sassPrependData, additionalData: sassAdditionalData, implementation: sassImplementation, ...sassOptions } = ctx.sassOptions;
    const lazyPostCSSInitializer = ()=>lazyPostCSS(ctx.rootDirectory, ctx.supportedBrowsers, ctx.experimental.disablePostcssPresetEnv, ctx.experimental.useLightningcss);
    const sassPreprocessors = [
        // First, process files with `sass-loader`: this inlines content, and
        // compiles away the proprietary syntax.
        {
            loader: "[project]/node_modules/next/dist/compiled/sass-loader/cjs.js [app-rsc] (ecmascript)",
            options: {
                implementation: sassImplementation,
                // Source maps are required so that `resolve-url-loader` can locate
                // files original to their source directory.
                sourceMap: true,
                sassOptions: {
                    // The "fibers" option is not needed for Node.js 16+, but it's causing
                    // problems for Node.js <= 14 users as you'll have to manually install
                    // the `fibers` package:
                    // https://github.com/webpack-contrib/sass-loader#:~:text=We%20automatically%20inject%20the%20fibers%20package
                    // https://github.com/vercel/next.js/issues/45052
                    // Since it's optional and not required, we'll disable it by default
                    // to avoid the confusion.
                    fibers: false,
                    // TODO: Remove this once we upgrade to sass-loader 16
                    silenceDeprecations: [
                        'legacy-js-api'
                    ],
                    ...sassOptions
                },
                additionalData: sassPrependData || sassAdditionalData
            }
        },
        // Then, `sass-loader` will have passed-through CSS imports as-is instead
        // of inlining them. Because they were inlined, the paths are no longer
        // correct.
        // To fix this, we use `resolve-url-loader` to rewrite the CSS
        // imports to real file paths.
        {
            loader: "[project]/node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js [app-rsc] (ecmascript)",
            options: {
                postcss: lazyPostCSSInitializer,
                // Source maps are not required here, but we may as well emit
                // them.
                sourceMap: true
            }
        }
    ];
    const fns = [];
    const googleLoader = "[project]/node_modules/next/dist/compiled/@next/font/google/loader.js [app-rsc] (ecmascript)";
    const localLoader = "[project]/node_modules/next/dist/compiled/@next/font/local/loader.js [app-rsc] (ecmascript)";
    const nextFontLoaders = [
        [
            (()=>{
                const e = new Error("Cannot find module 'next/font/google/target.css'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })(),
            googleLoader
        ],
        [
            (()=>{
                const e = new Error("Cannot find module 'next/font/local/target.css'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })(),
            localLoader
        ]
    ];
    nextFontLoaders.forEach(([fontLoaderTarget, fontLoaderPath])=>{
        // Matches the resolved font loaders noop files to run next-font-loader
        fns.push((0, _helpers.loader)({
            oneOf: [
                markRemovable({
                    sideEffects: false,
                    test: fontLoaderTarget,
                    use: (0, _nextfont.getNextFontLoader)(ctx, lazyPostCSSInitializer, fontLoaderPath)
                })
            ]
        }));
    });
    // CSS cannot be imported in _document. This comes before everything because
    // global CSS nor CSS modules work in said file.
    fns.push((0, _helpers.loader)({
        oneOf: [
            markRemovable({
                test: regexLikeCss,
                // Use a loose regex so we don't have to crawl the file system to
                // find the real file name (if present).
                issuer: /pages[\\/]_document\./,
                use: {
                    loader: 'error-loader',
                    options: {
                        reason: (0, _messages.getCustomDocumentError)()
                    }
                }
            })
        ]
    }));
    const shouldIncludeExternalCSSImports = !!ctx.experimental.craCompat || !!ctx.transpilePackages;
    // CSS modules & SASS modules support. They are allowed to be imported in anywhere.
    fns.push(// allow unused CSS to be removed from the production build.
    // We ensure this by disallowing `:global()` CSS at the top-level
    // via the `pure` mode in `css-loader`.
    (0, _helpers.loader)({
        oneOf: [
            // For app dir, we need to match the specific app layer.
            ctx.hasAppDir ? markRemovable({
                sideEffects: true,
                test: regexCssModules,
                issuerLayer: APP_LAYER_RULE,
                use: [
                    {
                        loader: "[project]/node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js [app-rsc] (ecmascript)",
                        options: {
                            cssModules: true
                        }
                    },
                    ...(0, _loaders.getCssModuleLoader)({
                        ...ctx,
                        isAppDir: true
                    }, lazyPostCSSInitializer)
                ]
            }) : null,
            markRemovable({
                sideEffects: true,
                test: regexCssModules,
                issuerLayer: PAGES_LAYER_RULE,
                use: (0, _loaders.getCssModuleLoader)({
                    ...ctx,
                    isAppDir: false
                }, lazyPostCSSInitializer)
            })
        ].filter(_nonnullable.nonNullable)
    }), // Sass Modules should never have side effects. This setting will
    // allow unused Sass to be removed from the production build.
    // We ensure this by disallowing `:global()` Sass at the top-level
    // via the `pure` mode in `css-loader`.
    (0, _helpers.loader)({
        oneOf: [
            // For app dir, we need to match the specific app layer.
            ctx.hasAppDir ? markRemovable({
                sideEffects: true,
                test: regexSassModules,
                issuerLayer: APP_LAYER_RULE,
                use: [
                    {
                        loader: "[project]/node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js [app-rsc] (ecmascript)",
                        options: {
                            cssModules: true
                        }
                    },
                    ...(0, _loaders.getCssModuleLoader)({
                        ...ctx,
                        isAppDir: true
                    }, lazyPostCSSInitializer, sassPreprocessors)
                ]
            }) : null,
            markRemovable({
                sideEffects: true,
                test: regexSassModules,
                issuerLayer: PAGES_LAYER_RULE,
                use: (0, _loaders.getCssModuleLoader)({
                    ...ctx,
                    isAppDir: false
                }, lazyPostCSSInitializer, sassPreprocessors)
            })
        ].filter(_nonnullable.nonNullable)
    }), (0, _helpers.loader)({
        oneOf: [
            markRemovable({
                test: [
                    regexCssModules,
                    regexSassModules
                ],
                use: {
                    loader: 'error-loader',
                    options: {
                        reason: (0, _messages.getLocalModuleImportError)()
                    }
                }
            })
        ]
    }));
    // Global CSS and SASS support.
    if (ctx.isServer) {
        fns.push((0, _helpers.loader)({
            oneOf: [
                ctx.hasAppDir && !ctx.isProduction ? markRemovable({
                    sideEffects: true,
                    test: [
                        regexCssGlobal,
                        regexSassGlobal
                    ],
                    issuerLayer: APP_LAYER_RULE,
                    use: {
                        loader: "[project]/node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js [app-rsc] (ecmascript)",
                        options: {
                            cssModules: false
                        }
                    }
                }) : null,
                markRemovable({
                    // CSS imports have side effects, even on the server side.
                    sideEffects: true,
                    test: [
                        regexCssGlobal,
                        regexSassGlobal
                    ],
                    use: "[project]/node_modules/next/dist/compiled/ignore-loader/index.js [app-rsc] (ecmascript)"
                })
            ].filter(_nonnullable.nonNullable)
        }));
    } else {
        // External CSS files are allowed to be loaded when any of the following is true:
        // - hasAppDir: all CSS files are allowed
        // - If the CSS file is located in `node_modules`
        // - If the CSS file is located in another package in a monorepo (outside of the current rootDir)
        // - If the issuer is pages/_app (matched later)
        const allowedPagesGlobalCSSPath = ctx.hasAppDir ? undefined : {
            and: [
                {
                    or: [
                        /node_modules/,
                        {
                            not: [
                                ctx.rootDirectory
                            ]
                        }
                    ]
                }
            ]
        };
        const allowedPagesGlobalCSSIssuer = ctx.hasAppDir ? undefined : shouldIncludeExternalCSSImports ? undefined : {
            and: [
                ctx.rootDirectory
            ],
            not: [
                /node_modules/
            ]
        };
        fns.push((0, _helpers.loader)({
            oneOf: [
                ...ctx.hasAppDir ? [
                    markRemovable({
                        sideEffects: true,
                        test: regexCssGlobal,
                        issuerLayer: APP_LAYER_RULE,
                        use: [
                            {
                                loader: "[project]/node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js [app-rsc] (ecmascript)",
                                options: {
                                    cssModules: false
                                }
                            },
                            ...(0, _loaders.getGlobalCssLoader)({
                                ...ctx,
                                isAppDir: true
                            }, lazyPostCSSInitializer)
                        ]
                    }),
                    markRemovable({
                        sideEffects: true,
                        test: regexSassGlobal,
                        issuerLayer: APP_LAYER_RULE,
                        use: [
                            {
                                loader: "[project]/node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js [app-rsc] (ecmascript)",
                                options: {
                                    cssModules: false
                                }
                            },
                            ...(0, _loaders.getGlobalCssLoader)({
                                ...ctx,
                                isAppDir: true
                            }, lazyPostCSSInitializer, sassPreprocessors)
                        ]
                    })
                ] : [],
                markRemovable({
                    sideEffects: true,
                    test: regexCssGlobal,
                    include: allowedPagesGlobalCSSPath,
                    issuer: allowedPagesGlobalCSSIssuer,
                    issuerLayer: PAGES_LAYER_RULE,
                    use: (0, _loaders.getGlobalCssLoader)({
                        ...ctx,
                        isAppDir: false
                    }, lazyPostCSSInitializer)
                }),
                markRemovable({
                    sideEffects: true,
                    test: regexSassGlobal,
                    include: allowedPagesGlobalCSSPath,
                    issuer: allowedPagesGlobalCSSIssuer,
                    issuerLayer: PAGES_LAYER_RULE,
                    use: (0, _loaders.getGlobalCssLoader)({
                        ...ctx,
                        isAppDir: false
                    }, lazyPostCSSInitializer, sassPreprocessors)
                })
            ].filter(_nonnullable.nonNullable)
        }));
        if (ctx.customAppFile) {
            fns.push((0, _helpers.loader)({
                oneOf: [
                    markRemovable({
                        sideEffects: true,
                        test: regexCssGlobal,
                        issuer: {
                            and: [
                                ctx.customAppFile
                            ]
                        },
                        use: (0, _loaders.getGlobalCssLoader)({
                            ...ctx,
                            isAppDir: false
                        }, lazyPostCSSInitializer)
                    })
                ]
            }), (0, _helpers.loader)({
                oneOf: [
                    markRemovable({
                        sideEffects: true,
                        test: regexSassGlobal,
                        issuer: {
                            and: [
                                ctx.customAppFile
                            ]
                        },
                        use: (0, _loaders.getGlobalCssLoader)({
                            ...ctx,
                            isAppDir: false
                        }, lazyPostCSSInitializer, sassPreprocessors)
                    })
                ]
            }));
        }
    }
    // Throw an error for Global CSS used inside of `node_modules`
    if (!shouldIncludeExternalCSSImports) {
        fns.push((0, _helpers.loader)({
            oneOf: [
                markRemovable({
                    test: [
                        regexCssGlobal,
                        regexSassGlobal
                    ],
                    issuer: {
                        and: [
                            /node_modules/
                        ]
                    },
                    use: {
                        loader: 'error-loader',
                        options: {
                            reason: (0, _messages.getGlobalModuleImportError)()
                        }
                    }
                })
            ]
        }));
    }
    // Throw an error for Global CSS used outside of our custom <App> file
    fns.push((0, _helpers.loader)({
        oneOf: [
            markRemovable({
                test: [
                    regexCssGlobal,
                    regexSassGlobal
                ],
                issuer: ctx.hasAppDir ? {
                    // If it's inside the app dir, but not importing from a layout file,
                    // throw an error.
                    and: [
                        ctx.rootDirectory
                    ],
                    not: [
                        /layout\.(js|mjs|jsx|ts|tsx)$/
                    ]
                } : undefined,
                use: {
                    loader: 'error-loader',
                    options: {
                        reason: (0, _messages.getGlobalImportError)()
                    }
                }
            })
        ]
    }));
    if (ctx.isClient) {
        // Automatically transform references to files (i.e. url()) into URLs
        // e.g. url(./logo.svg)
        fns.push((0, _helpers.loader)({
            oneOf: [
                markRemovable({
                    // This should only be applied to CSS files
                    issuer: regexLikeCss,
                    // Exclude extensions that webpack handles by default
                    exclude: [
                        /\.(js|mjs|jsx|ts|tsx)$/,
                        /\.html$/,
                        /\.json$/,
                        /\.webpack\[[^\]]+\]$/
                    ],
                    // `asset/resource` always emits a URL reference, where `asset`
                    // might inline the asset as a data URI
                    type: 'asset/resource'
                })
            ]
        }));
    }
    // Enable full mini-css-extract-plugin hmr for prod mode pages or app dir
    if (ctx.isClient && (ctx.isProduction || ctx.hasAppDir)) {
        // Extract CSS as CSS file(s) in the client-side production bundle.
        const MiniCssExtractPlugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/mini-css-extract-plugin.js [app-rsc] (ecmascript)").default;
        fns.push((0, _helpers.plugin)(new MiniCssExtractPlugin({
            filename: ctx.isProduction ? 'static/css/[contenthash].css' : 'static/css/[name].css',
            chunkFilename: ctx.isProduction ? 'static/css/[contenthash].css' : 'static/css/[name].css',
            // Next.js guarantees that CSS order "doesn't matter", due to imposed
            // restrictions:
            // 1. Global CSS can only be defined in a single entrypoint (_app)
            // 2. CSS Modules generate scoped class names by default and cannot
            //    include Global CSS (:global() selector).
            //
            // While not a perfect guarantee (e.g. liberal use of `:global()`
            // selector), this assumption is required to code-split CSS.
            //
            // If this warning were to trigger, it'd be unactionable by the user,
            // but likely not valid -- so we disable it.
            ignoreOrder: true,
            insert: function(linkTag) {
                if (typeof _N_E_STYLE_LOAD === 'function') {
                    const { href, onload, onerror } = linkTag;
                    _N_E_STYLE_LOAD(new URL(href).pathname).then(()=>onload == null ? void 0 : onload.call(linkTag, {
                            type: 'load'
                        }), ()=>onerror == null ? void 0 : onerror.call(linkTag, {}));
                } else {
                    document.head.appendChild(linkTag);
                }
            }
        })));
    }
    const fn = (0, _utils.pipe)(...fns);
    return fn(config);
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/images/messages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCustomDocumentImageError", {
    enumerable: true,
    get: function() {
        return getCustomDocumentImageError;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
function getCustomDocumentImageError() {
    return `Images ${(0, _picocolors.bold)('cannot')} be imported within ${(0, _picocolors.cyan)('pages/_document.js')}. Please move image imports that need to be displayed on every page into ${(0, _picocolors.cyan)('pages/_app.js')}.\nRead more: https://nextjs.org/docs/messages/custom-document-image-import`;
} //# sourceMappingURL=messages.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/blocks/images/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "images", {
    enumerable: true,
    get: function() {
        return images;
    }
});
const _lodashcurry = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/lodash.curry/index.js [app-rsc] (ecmascript)"));
const _webpackconfig = __turbopack_require__("[project]/node_modules/next/dist/build/webpack-config.js [app-rsc] (ecmascript)");
const _helpers = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/helpers.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/utils.js [app-rsc] (ecmascript)");
const _messages = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/images/messages.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const images = (0, _lodashcurry.default)(async function images(_ctx, config) {
    const fns = [
        (0, _helpers.loader)({
            oneOf: [
                {
                    test: _webpackconfig.nextImageLoaderRegex,
                    use: {
                        loader: 'error-loader',
                        options: {
                            reason: (0, _messages.getCustomDocumentImageError)()
                        }
                    },
                    issuer: /pages[\\/]_document\./
                }
            ]
        })
    ];
    const fn = (0, _utils.pipe)(...fns);
    return fn(config);
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/config/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildConfiguration", {
    enumerable: true,
    get: function() {
        return buildConfiguration;
    }
});
const _base = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/base.js [app-rsc] (ecmascript)");
const _css = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/index.js [app-rsc] (ecmascript)");
const _images = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/images/index.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/utils.js [app-rsc] (ecmascript)");
async function buildConfiguration(config, { hasAppDir, supportedBrowsers, rootDirectory, customAppFile, isDevelopment, isServer, isEdgeRuntime, targetWeb, assetPrefix, sassOptions, productionBrowserSourceMaps, future, transpilePackages, experimental, disableStaticImages, serverSourceMaps }) {
    const ctx = {
        hasAppDir,
        supportedBrowsers,
        rootDirectory,
        customAppFile,
        isDevelopment,
        isProduction: !isDevelopment,
        isServer,
        isEdgeRuntime,
        isClient: !isServer,
        targetWeb,
        assetPrefix: assetPrefix ? assetPrefix.endsWith('/') ? assetPrefix.slice(0, -1) : assetPrefix : '',
        sassOptions,
        productionBrowserSourceMaps,
        transpilePackages,
        future,
        experimental,
        serverSourceMaps: serverSourceMaps ?? false
    };
    let fns = [
        (0, _base.base)(ctx),
        (0, _css.css)(ctx)
    ];
    if (!disableStaticImages) {
        fns.push((0, _images.images)(ctx));
    }
    const fn = (0, _utils.pipe)(...fns);
    return fn(config);
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/getModuleTrace.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    formatModuleTrace: null,
    getModuleTrace: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatModuleTrace: function() {
        return formatModuleTrace;
    },
    getModuleTrace: function() {
        return getModuleTrace;
    }
});
const _loaderutils3 = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/loader-utils3/index.js [app-rsc] (ecmascript)"));
const _path = __turbopack_require__("[externals]/path [external] (path, cjs)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function formatModule(compiler, module1) {
    const relativePath = (0, _path.relative)(compiler.context, module1.resource).replace(/\?.+$/, '');
    return _loaderutils3.default.isUrlRequest(relativePath) ? _loaderutils3.default.urlToRequest(relativePath) : relativePath;
}
function formatModuleTrace(compiler, moduleTrace) {
    let importTrace = [];
    let firstExternalModule;
    for(let i = moduleTrace.length - 1; i >= 0; i--){
        const mod = moduleTrace[i];
        if (!mod.resource) continue;
        if (!mod.resource.includes('node_modules/')) {
            importTrace.unshift(formatModule(compiler, mod));
        } else {
            firstExternalModule = mod;
            break;
        }
    }
    let invalidImportMessage = '';
    if (firstExternalModule) {
        var _firstExternalModule_resourceResolveData_descriptionFileData, _firstExternalModule_resourceResolveData;
        const firstExternalPackageName = (_firstExternalModule_resourceResolveData = firstExternalModule.resourceResolveData) == null ? void 0 : (_firstExternalModule_resourceResolveData_descriptionFileData = _firstExternalModule_resourceResolveData.descriptionFileData) == null ? void 0 : _firstExternalModule_resourceResolveData_descriptionFileData.name;
        if (firstExternalPackageName === 'styled-jsx') {
            invalidImportMessage += `\n\nThe error was caused by using 'styled-jsx' in '${importTrace[0]}'. It only works in a Client Component but none of its parents are marked with "use client", so they're Server Components by default.`;
        } else {
            let formattedExternalFile = firstExternalModule.resource.split('node_modules');
            formattedExternalFile = formattedExternalFile[formattedExternalFile.length - 1];
            invalidImportMessage += `\n\nThe error was caused by importing '${formattedExternalFile.slice(1)}' in '${importTrace[0]}'.`;
        }
    }
    return {
        lastInternalFileName: importTrace[0],
        invalidImportMessage,
        formattedModuleTrace: importTrace.map((mod)=>'  ' + mod).join('\n')
    };
}
function getModuleTrace(module1, compilation, compiler) {
    // Get the module trace:
    // https://cs.github.com/webpack/webpack/blob/9fcaa243573005d6fdece9a3f8d89a0e8b399613/lib/stats/DefaultStatsFactoryPlugin.js#L414
    const visitedModules = new Set();
    const moduleTrace = [];
    let current = module1;
    let isPagesDir = false;
    while(current){
        if (visitedModules.has(current)) break;
        if (/[\\/]pages/.test(current.resource.replace(compiler.context, ''))) {
            isPagesDir = true;
        }
        visitedModules.add(current);
        moduleTrace.push(current);
        const origin = compilation.moduleGraph.getIssuer(current);
        if (!origin) break;
        current = origin;
    }
    return {
        moduleTrace,
        isPagesDir
    };
} //# sourceMappingURL=getModuleTrace.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SimpleWebpackError", {
    enumerable: true,
    get: function() {
        return SimpleWebpackError;
    }
});
class SimpleWebpackError extends Error {
    constructor(file, message){
        super(message);
        this.file = file;
    }
} //# sourceMappingURL=simpleWebpackError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parse-dynamic-code-evaluation-error.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getDynamicCodeEvaluationError", {
    enumerable: true,
    get: function() {
        return getDynamicCodeEvaluationError;
    }
});
const _getModuleTrace = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/getModuleTrace.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
function getDynamicCodeEvaluationError(message, module, compilation, compiler) {
    const { moduleTrace } = (0, _getModuleTrace.getModuleTrace)(module, compilation, compiler);
    const { formattedModuleTrace, lastInternalFileName, invalidImportMessage } = (0, _getModuleTrace.formatModuleTrace)(compiler, moduleTrace);
    return new _simpleWebpackError.SimpleWebpackError(lastInternalFileName, message + invalidImportMessage + '\n\nImport trace for requested module:\n' + formattedModuleTrace);
} //# sourceMappingURL=parse-dynamic-code-evaluation-error.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    forEachEntryModule: null,
    formatBarrelOptimizedResource: null,
    getModuleReferencesInOrder: null,
    traverseModules: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    forEachEntryModule: function() {
        return forEachEntryModule;
    },
    formatBarrelOptimizedResource: function() {
        return formatBarrelOptimizedResource;
    },
    getModuleReferencesInOrder: function() {
        return getModuleReferencesInOrder;
    },
    traverseModules: function() {
        return traverseModules;
    }
});
const _ismetadataroute = __turbopack_require__("[project]/node_modules/next/dist/lib/metadata/is-metadata-route.js [app-rsc] (ecmascript)");
function traverseModules(compilation, callback, filterChunkGroup) {
    compilation.chunkGroups.forEach((chunkGroup)=>{
        if (filterChunkGroup && !filterChunkGroup(chunkGroup)) {
            return;
        }
        chunkGroup.chunks.forEach((chunk)=>{
            const chunkModules = compilation.chunkGraph.getChunkModulesIterable(chunk);
            for (const mod of chunkModules){
                var _compilation_chunkGraph_getModuleId;
                const modId = (_compilation_chunkGraph_getModuleId = compilation.chunkGraph.getModuleId(mod)) == null ? void 0 : _compilation_chunkGraph_getModuleId.toString();
                if (modId) callback(mod, chunk, chunkGroup, modId);
                const anyModule = mod;
                if (anyModule.modules) {
                    for (const subMod of anyModule.modules)if (modId) callback(subMod, chunk, chunkGroup, modId);
                }
            }
        });
    });
}
function forEachEntryModule(compilation, callback) {
    for (const [name, entry] of compilation.entries.entries()){
        var _entry_dependencies;
        // Skip for entries under pages/
        if (name.startsWith('pages/') || // Skip for metadata route handlers
        name.startsWith('app/') && (0, _ismetadataroute.isMetadataRoute)(name)) {
            continue;
        }
        // Check if the page entry is a server component or not.
        const entryDependency = (_entry_dependencies = entry.dependencies) == null ? void 0 : _entry_dependencies[0];
        // Ensure only next-app-loader entries are handled.
        if (!entryDependency || !entryDependency.request) continue;
        const request = entryDependency.request;
        if (!request.startsWith('next-edge-ssr-loader?') && !request.startsWith('next-edge-app-route-loader?') && !request.startsWith('next-app-loader?')) continue;
        let entryModule = compilation.moduleGraph.getResolvedModule(entryDependency);
        if (request.startsWith('next-edge-ssr-loader?') || request.startsWith('next-edge-app-route-loader?')) {
            entryModule.dependencies.forEach((dependency)=>{
                const modRequest = dependency.request;
                if (modRequest == null ? void 0 : modRequest.includes('next-app-loader')) {
                    entryModule = compilation.moduleGraph.getResolvedModule(dependency);
                }
            });
        }
        callback({
            name,
            entryModule
        });
    }
}
function formatBarrelOptimizedResource(resource, matchResource) {
    return `${resource}@${matchResource}`;
}
function getModuleReferencesInOrder(module1, moduleGraph) {
    const connections = [];
    for (const connection of moduleGraph.getOutgoingConnections(module1)){
        if (connection.dependency && connection.module) {
            connections.push({
                connection,
                index: moduleGraph.getParentBlockIndex(connection.dependency)
            });
        }
    }
    connections.sort((a, b)=>a.index - b.index);
    return connections.map((c)=>c.connection);
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/middleware-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    SUPPORTED_NATIVE_MODULES: null,
    default: null,
    getEdgePolyfilledModules: null,
    handleWebpackExternalForEdgeRuntime: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SUPPORTED_NATIVE_MODULES: function() {
        return SUPPORTED_NATIVE_MODULES;
    },
    default: function() {
        return MiddlewarePlugin;
    },
    getEdgePolyfilledModules: function() {
        return getEdgePolyfilledModules;
    },
    handleWebpackExternalForEdgeRuntime: function() {
        return handleWebpackExternalForEdgeRuntime;
    }
});
const _routeregex = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/route-regex.js [app-rsc] (ecmascript)");
const _getmodulebuildinfo = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/index.js [app-rsc] (ecmascript)");
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _picomatch = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/picomatch/index.js [app-rsc] (ecmascript)"));
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _shared = __turbopack_require__("[project]/node_modules/next/dist/trace/shared.js [app-rsc] (ecmascript)");
const _events = __turbopack_require__("[project]/node_modules/next/dist/telemetry/events/index.js [app-rsc] (ecmascript)");
const _apppaths = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/app-paths.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _generateinterceptionroutesrewrites = __turbopack_require__("[project]/node_modules/next/dist/lib/generate-interception-routes-rewrites.js [app-rsc] (ecmascript)");
const _parsedynamiccodeevaluationerror = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parse-dynamic-code-evaluation-error.js [app-rsc] (ecmascript)");
const _utils1 = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const KNOWN_SAFE_DYNAMIC_PACKAGES = __turbopack_require__("[project]/node_modules/next/dist/lib/known-edge-safe-packages.json (json)");
const NAME = 'MiddlewarePlugin';
const MANIFEST_VERSION = 3;
/**
 * Checks the value of usingIndirectEval and when it is a set of modules it
 * check if any of the modules is actually being used. If the value is
 * simply truthy it will return true.
 */ function isUsingIndirectEvalAndUsedByExports(args) {
    const { moduleGraph, runtime, module: module1, usingIndirectEval, wp } = args;
    if (typeof usingIndirectEval === 'boolean') {
        return usingIndirectEval;
    }
    const exportsInfo = moduleGraph.getExportsInfo(module1);
    for (const exportName of usingIndirectEval){
        if (exportsInfo.getUsed(exportName, runtime) !== wp.UsageState.Unused) {
            return true;
        }
    }
    return false;
}
function getEntryFiles(entryFiles, meta, hasInstrumentationHook, opts) {
    const files = [];
    if (meta.edgeSSR) {
        if (meta.edgeSSR.isServerComponent) {
            files.push(`server/${_constants.SERVER_REFERENCE_MANIFEST}.js`);
            if (opts.sriEnabled) {
                files.push(`server/${_constants.SUBRESOURCE_INTEGRITY_MANIFEST}.js`);
            }
            files.push(...entryFiles.filter((file)=>file.startsWith('app/') && !file.endsWith('.hot-update.js')).map((file)=>'server/' + file.replace(/\.js$/, '_' + _constants.CLIENT_REFERENCE_MANIFEST + '.js')));
        }
        if (!opts.dev && !meta.edgeSSR.isAppDir) {
            files.push(`server/${_constants.DYNAMIC_CSS_MANIFEST}.js`);
        }
        files.push(`server/${_constants.MIDDLEWARE_BUILD_MANIFEST}.js`, `server/${_constants.MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`, `server/${_constants.NEXT_FONT_MANIFEST}.js`, `server/${_constants.INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`);
    }
    if (hasInstrumentationHook) {
        files.push(`server/edge-${_constants1.INSTRUMENTATION_HOOK_FILENAME}.js`);
    }
    files.push(...entryFiles.filter((file)=>!file.endsWith('.hot-update.js')).map((file)=>'server/' + file));
    return files;
}
function getCreateAssets(params) {
    const { compilation, metadataByEntry, opts } = params;
    return (assets)=>{
        const middlewareManifest = {
            version: MANIFEST_VERSION,
            middleware: {},
            functions: {},
            sortedMiddleware: []
        };
        const hasInstrumentationHook = compilation.entrypoints.has(_constants1.INSTRUMENTATION_HOOK_FILENAME);
        // we only emit this entry for the edge runtime since it doesn't have access to a routes manifest
        // and we don't need to provide the entire route manifest, just the interception routes.
        const interceptionRewrites = JSON.stringify(opts.rewrites.beforeFiles.filter(_generateinterceptionroutesrewrites.isInterceptionRouteRewrite));
        assets[`${_constants.INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`] = new _webpack.sources.RawSource(`self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(interceptionRewrites)}`);
        for (const entrypoint of compilation.entrypoints.values()){
            var _metadata_edgeMiddleware, _metadata_edgeSSR, _metadata_edgeApiFunction, _metadata_edgeSSR1, _metadata_edgeMiddleware1;
            if (!entrypoint.name) {
                continue;
            }
            // There should always be metadata for the entrypoint.
            const metadata = metadataByEntry.get(entrypoint.name);
            const page = (metadata == null ? void 0 : (_metadata_edgeMiddleware = metadata.edgeMiddleware) == null ? void 0 : _metadata_edgeMiddleware.page) || (metadata == null ? void 0 : (_metadata_edgeSSR = metadata.edgeSSR) == null ? void 0 : _metadata_edgeSSR.page) || (metadata == null ? void 0 : (_metadata_edgeApiFunction = metadata.edgeApiFunction) == null ? void 0 : _metadata_edgeApiFunction.page);
            if (!page) {
                continue;
            }
            const matcherSource = ((_metadata_edgeSSR1 = metadata.edgeSSR) == null ? void 0 : _metadata_edgeSSR1.isAppDir) ? (0, _apppaths.normalizeAppPath)(page) : page;
            const catchAll = !metadata.edgeSSR && !metadata.edgeApiFunction;
            const { namedRegex } = (0, _routeregex.getNamedMiddlewareRegex)(matcherSource, {
                catchAll
            });
            const matchers = (metadata == null ? void 0 : (_metadata_edgeMiddleware1 = metadata.edgeMiddleware) == null ? void 0 : _metadata_edgeMiddleware1.matchers) ?? [
                {
                    regexp: namedRegex,
                    originalSource: page === '/' && catchAll ? '/:path*' : matcherSource
                }
            ];
            const isEdgeFunction = !!(metadata.edgeApiFunction || metadata.edgeSSR);
            const edgeFunctionDefinition = {
                files: getEntryFiles(entrypoint.getFiles(), metadata, hasInstrumentationHook, opts),
                name: entrypoint.name,
                page: page,
                matchers,
                wasm: Array.from(metadata.wasmBindings, ([name, filePath])=>({
                        name,
                        filePath
                    })),
                assets: Array.from(metadata.assetBindings, ([name, filePath])=>({
                        name,
                        filePath
                    })),
                env: opts.edgeEnvironments,
                ...metadata.regions && {
                    regions: metadata.regions
                }
            };
            if (isEdgeFunction) {
                middlewareManifest.functions[page] = edgeFunctionDefinition;
            } else {
                middlewareManifest.middleware[page] = edgeFunctionDefinition;
            }
        }
        middlewareManifest.sortedMiddleware = (0, _utils.getSortedRoutes)(Object.keys(middlewareManifest.middleware));
        assets[_constants.MIDDLEWARE_MANIFEST] = new _webpack.sources.RawSource(JSON.stringify(middlewareManifest, null, 2));
    };
}
function buildWebpackError({ message, loc, compilation, entryModule, parser }) {
    const error = new compilation.compiler.webpack.WebpackError(message);
    error.name = NAME;
    const module1 = entryModule ?? (parser == null ? void 0 : parser.state.current);
    if (module1) {
        error.module = module1;
    }
    error.loc = loc;
    return error;
}
function isInMiddlewareLayer(parser) {
    var _parser_state_module;
    const layer = (_parser_state_module = parser.state.module) == null ? void 0 : _parser_state_module.layer;
    return layer === _constants1.WEBPACK_LAYERS.middleware || layer === _constants1.WEBPACK_LAYERS.api;
}
function isNodeJsModule(moduleName) {
    return __turbopack_require__("[externals]/module [external] (module, cjs)").builtinModules.includes(moduleName);
}
function isDynamicCodeEvaluationAllowed(fileName, middlewareConfig, rootDir) {
    // Some packages are known to use `eval` but are safe to use in the Edge
    // Runtime because the dynamic code will never be executed.
    if (KNOWN_SAFE_DYNAMIC_PACKAGES.some((pkg)=>fileName.includes(`/node_modules/${pkg}/`.replace(/\//g, _path.default.sep)))) {
        return true;
    }
    const name = fileName.replace(rootDir ?? '', '');
    return (0, _picomatch.default)((middlewareConfig == null ? void 0 : middlewareConfig.unstable_allowDynamic) ?? [])(name);
}
function buildUnsupportedApiError({ apiName, loc, ...rest }) {
    return buildWebpackError({
        message: `A Node.js API is used (${apiName} at line: ${loc.start.line}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`,
        loc,
        ...rest
    });
}
function registerUnsupportedApiHooks(parser, compilation) {
    for (const expression of _constants.EDGE_UNSUPPORTED_NODE_APIS){
        const warnForUnsupportedApi = (node)=>{
            if (!isInMiddlewareLayer(parser)) {
                return;
            }
            compilation.warnings.push(buildUnsupportedApiError({
                compilation,
                parser,
                apiName: expression,
                ...node
            }));
            return true;
        };
        parser.hooks.call.for(expression).tap(NAME, warnForUnsupportedApi);
        parser.hooks.expression.for(expression).tap(NAME, warnForUnsupportedApi);
        parser.hooks.callMemberChain.for(expression).tap(NAME, warnForUnsupportedApi);
        parser.hooks.expressionMemberChain.for(expression).tap(NAME, warnForUnsupportedApi);
    }
    const warnForUnsupportedProcessApi = (node, [callee])=>{
        if (!isInMiddlewareLayer(parser) || callee === 'env') {
            return;
        }
        compilation.warnings.push(buildUnsupportedApiError({
            compilation,
            parser,
            apiName: `process.${callee}`,
            ...node
        }));
        return true;
    };
    parser.hooks.callMemberChain.for('process').tap(NAME, warnForUnsupportedProcessApi);
    parser.hooks.expressionMemberChain.for('process').tap(NAME, warnForUnsupportedProcessApi);
}
function getCodeAnalyzer(params) {
    return (parser)=>{
        const { dev, compiler: { webpack: wp }, compilation } = params;
        const { hooks } = parser;
        /**
     * For an expression this will check the graph to ensure it is being used
     * by exports. Then it will store in the module buildInfo a boolean to
     * express that it contains dynamic code and, if it is available, the
     * module path that is using it.
     */ const handleExpression = ()=>{
            if (!isInMiddlewareLayer(parser)) {
                return;
            }
            wp.optimize.InnerGraph.onUsage(parser.state, (used = true)=>{
                const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(parser.state.module);
                if (buildInfo.usingIndirectEval === true || used === false) {
                    return;
                }
                if (!buildInfo.usingIndirectEval || used === true) {
                    buildInfo.usingIndirectEval = used;
                    return;
                }
                buildInfo.usingIndirectEval = new Set([
                    ...Array.from(buildInfo.usingIndirectEval),
                    ...Array.from(used)
                ]);
            });
        };
        /**
     * This expression handler allows to wrap a dynamic code expression with a
     * function call where we can warn about dynamic code not being allowed
     * but actually execute the expression.
     */ const handleWrapExpression = (expr)=>{
            if (!isInMiddlewareLayer(parser)) {
                return;
            }
            const { ConstDependency } = wp.dependencies;
            const dep1 = new ConstDependency('__next_eval__(function() { return ', expr.range[0]);
            dep1.loc = expr.loc;
            parser.state.module.addPresentationalDependency(dep1);
            const dep2 = new ConstDependency('})', expr.range[1]);
            dep2.loc = expr.loc;
            parser.state.module.addPresentationalDependency(dep2);
            handleExpression();
            return true;
        };
        /**
     * This expression handler allows to wrap a WebAssembly.compile invocation with a
     * function call where we can warn about WASM code generation not being allowed
     * but actually execute the expression.
     */ const handleWrapWasmCompileExpression = (expr)=>{
            if (!isInMiddlewareLayer(parser)) {
                return;
            }
            const { ConstDependency } = wp.dependencies;
            const dep1 = new ConstDependency('__next_webassembly_compile__(function() { return ', expr.range[0]);
            dep1.loc = expr.loc;
            parser.state.module.addPresentationalDependency(dep1);
            const dep2 = new ConstDependency('})', expr.range[1]);
            dep2.loc = expr.loc;
            parser.state.module.addPresentationalDependency(dep2);
            handleExpression();
        };
        /**
     * This expression handler allows to wrap a WebAssembly.instatiate invocation with a
     * function call where we can warn about WASM code generation not being allowed
     * but actually execute the expression.
     *
     * Note that we don't update `usingIndirectEval`, i.e. we don't abort a production build
     * since we can't determine statically if the first parameter is a module (legit use) or
     * a buffer (dynamic code generation).
     */ const handleWrapWasmInstantiateExpression = (expr)=>{
            if (!isInMiddlewareLayer(parser)) {
                return;
            }
            if (dev) {
                const { ConstDependency } = wp.dependencies;
                const dep1 = new ConstDependency('__next_webassembly_instantiate__(function() { return ', expr.range[0]);
                dep1.loc = expr.loc;
                parser.state.module.addPresentationalDependency(dep1);
                const dep2 = new ConstDependency('})', expr.range[1]);
                dep2.loc = expr.loc;
                parser.state.module.addPresentationalDependency(dep2);
            }
        };
        /**
     * Handler to store original source location of static and dynamic imports into module's buildInfo.
     */ const handleImport = (node)=>{
            var _node_source;
            if (isInMiddlewareLayer(parser) && ((_node_source = node.source) == null ? void 0 : _node_source.value) && (node == null ? void 0 : node.loc)) {
                var _node_source_value;
                const { module: module1, source } = parser.state;
                const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(module1);
                if (!buildInfo.importLocByPath) {
                    buildInfo.importLocByPath = new Map();
                }
                const importedModule = (_node_source_value = node.source.value) == null ? void 0 : _node_source_value.toString();
                buildInfo.importLocByPath.set(importedModule, {
                    sourcePosition: {
                        ...node.loc.start,
                        source: module1.identifier()
                    },
                    sourceContent: source.toString()
                });
                if (!dev && isNodeJsModule(importedModule)) {
                    compilation.warnings.push(buildWebpackError({
                        message: `A Node.js module is loaded ('${importedModule}' at line ${node.loc.start.line}) which is not supported in the Edge Runtime.
Learn More: https://nextjs.org/docs/messages/node-module-in-edge-runtime`,
                        compilation,
                        parser,
                        ...node
                    }));
                }
            }
        };
        /**
     * A noop handler to skip analyzing some cases.
     * Order matters: for it to work, it must be registered first
     */ const skip = ()=>isInMiddlewareLayer(parser) ? true : undefined;
        for (const prefix of [
            '',
            'global.'
        ]){
            hooks.expression.for(`${prefix}Function.prototype`).tap(NAME, skip);
            hooks.expression.for(`${prefix}Function.bind`).tap(NAME, skip);
            hooks.call.for(`${prefix}eval`).tap(NAME, handleWrapExpression);
            hooks.call.for(`${prefix}Function`).tap(NAME, handleWrapExpression);
            hooks.new.for(`${prefix}Function`).tap(NAME, handleWrapExpression);
            hooks.call.for(`${prefix}WebAssembly.compile`).tap(NAME, handleWrapWasmCompileExpression);
            hooks.call.for(`${prefix}WebAssembly.instantiate`).tap(NAME, handleWrapWasmInstantiateExpression);
        }
        hooks.importCall.tap(NAME, handleImport);
        hooks.import.tap(NAME, handleImport);
        if (!dev) {
            // do not issue compilation warning on dev: invoking code will provide details
            registerUnsupportedApiHooks(parser, compilation);
        }
    };
}
function getExtractMetadata(params) {
    const { dev, compilation, metadataByEntry, compiler } = params;
    const { webpack: wp } = compiler;
    return async ()=>{
        metadataByEntry.clear();
        const telemetry = _shared.traceGlobals.get('telemetry');
        for (const [entryName, entry] of compilation.entries){
            var _entry_dependencies, _route_middlewareConfig;
            if (entry.options.runtime !== _constants.EDGE_RUNTIME_WEBPACK) {
                continue;
            }
            const entryDependency = (_entry_dependencies = entry.dependencies) == null ? void 0 : _entry_dependencies[0];
            const resolvedModule = compilation.moduleGraph.getResolvedModule(entryDependency);
            if (!resolvedModule) {
                continue;
            }
            const { rootDir, route } = (0, _getmodulebuildinfo.getModuleBuildInfo)(resolvedModule);
            const { moduleGraph } = compilation;
            const modules = new Set();
            const addEntriesFromDependency = (dependency)=>{
                const module1 = moduleGraph.getModule(dependency);
                if (module1) {
                    modules.add(module1);
                }
            };
            entry.dependencies.forEach(addEntriesFromDependency);
            entry.includeDependencies.forEach(addEntriesFromDependency);
            const entryMetadata = {
                wasmBindings: new Map(),
                assetBindings: new Map()
            };
            if (route == null ? void 0 : (_route_middlewareConfig = route.middlewareConfig) == null ? void 0 : _route_middlewareConfig.regions) {
                entryMetadata.regions = route.middlewareConfig.regions;
            }
            if (route == null ? void 0 : route.preferredRegion) {
                const preferredRegion = route.preferredRegion;
                entryMetadata.regions = typeof preferredRegion === 'string' ? [
                    preferredRegion
                ] : preferredRegion;
            }
            let ogImageGenerationCount = 0;
            for (const module1 of modules){
                const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(module1);
                /**
         * Check if it uses the image generation feature.
         */ if (!dev) {
                    const resource = module1.resource;
                    const hasOGImageGeneration = resource && /[\\/]node_modules[\\/]@vercel[\\/]og[\\/]dist[\\/]index\.(edge|node)\.js$|[\\/]next[\\/]dist[\\/](esm[\\/])?server[\\/]og[\\/]image-response\.js$/.test(resource);
                    if (hasOGImageGeneration) {
                        ogImageGenerationCount++;
                    }
                }
                /**
         * When building for production checks if the module is using `eval`
         * and in such case produces a compilation error. The module has to
         * be in use.
         */ if (!dev && buildInfo.usingIndirectEval && isUsingIndirectEvalAndUsedByExports({
                    module: module1,
                    moduleGraph,
                    runtime: wp.util.runtime.getEntryRuntime(compilation, entryName),
                    usingIndirectEval: buildInfo.usingIndirectEval,
                    wp
                })) {
                    var _route_middlewareConfig1;
                    const id = module1.identifier();
                    if (/node_modules[\\/]regenerator-runtime[\\/]runtime\.js/.test(id)) {
                        continue;
                    }
                    if (route == null ? void 0 : (_route_middlewareConfig1 = route.middlewareConfig) == null ? void 0 : _route_middlewareConfig1.unstable_allowDynamic) {
                        telemetry == null ? void 0 : telemetry.record({
                            eventName: 'NEXT_EDGE_ALLOW_DYNAMIC_USED',
                            payload: {
                                file: route == null ? void 0 : route.absolutePagePath.replace(rootDir ?? '', ''),
                                config: route == null ? void 0 : route.middlewareConfig,
                                fileWithDynamicCode: module1.userRequest.replace(rootDir ?? '', '')
                            }
                        });
                    }
                    if (!isDynamicCodeEvaluationAllowed(module1.userRequest, route == null ? void 0 : route.middlewareConfig, rootDir)) {
                        const message = `Dynamic Code Evaluation (e. g. 'eval', 'new Function', 'WebAssembly.compile') not allowed in Edge Runtime ${typeof buildInfo.usingIndirectEval !== 'boolean' ? `\nUsed by ${Array.from(buildInfo.usingIndirectEval).join(', ')}` : ''}\nLearn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`;
                        compilation.errors.push((0, _parsedynamiccodeevaluationerror.getDynamicCodeEvaluationError)(message, module1, compilation, compiler));
                    }
                }
                /**
         * The entry module has to be either a page or a middleware and hold
         * the corresponding metadata.
         */ if (buildInfo == null ? void 0 : buildInfo.nextEdgeSSR) {
                    entryMetadata.edgeSSR = buildInfo.nextEdgeSSR;
                } else if (buildInfo == null ? void 0 : buildInfo.nextEdgeMiddleware) {
                    entryMetadata.edgeMiddleware = buildInfo.nextEdgeMiddleware;
                } else if (buildInfo == null ? void 0 : buildInfo.nextEdgeApiFunction) {
                    entryMetadata.edgeApiFunction = buildInfo.nextEdgeApiFunction;
                }
                /**
         * If the module is a WASM module we read the binding information and
         * append it to the entry wasm bindings.
         */ if (buildInfo == null ? void 0 : buildInfo.nextWasmMiddlewareBinding) {
                    entryMetadata.wasmBindings.set(buildInfo.nextWasmMiddlewareBinding.name, buildInfo.nextWasmMiddlewareBinding.filePath);
                }
                if (buildInfo == null ? void 0 : buildInfo.nextAssetMiddlewareBinding) {
                    entryMetadata.assetBindings.set(buildInfo.nextAssetMiddlewareBinding.name, buildInfo.nextAssetMiddlewareBinding.filePath);
                }
                /**
         * Append to the list of modules to process outgoingConnections from
         * the module that is being processed.
         */ for (const conn of (0, _utils1.getModuleReferencesInOrder)(module1, moduleGraph)){
                    if (conn.module) {
                        modules.add(conn.module);
                    }
                }
            }
            telemetry == null ? void 0 : telemetry.record({
                eventName: _events.EVENT_BUILD_FEATURE_USAGE,
                payload: {
                    featureName: 'vercelImageGeneration',
                    invocationCount: ogImageGenerationCount
                }
            });
            metadataByEntry.set(entryName, entryMetadata);
        }
    };
}
class MiddlewarePlugin {
    constructor({ dev, sriEnabled, rewrites, edgeEnvironments }){
        this.dev = dev;
        this.sriEnabled = sriEnabled;
        this.rewrites = rewrites;
        this.edgeEnvironments = edgeEnvironments;
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(NAME, (compilation, params)=>{
            const { hooks } = params.normalModuleFactory;
            /**
       * This is the static code analysis phase.
       */ const codeAnalyzer = getCodeAnalyzer({
                dev: this.dev,
                compiler,
                compilation
            });
            hooks.parser.for('javascript/auto').tap(NAME, codeAnalyzer);
            hooks.parser.for('javascript/dynamic').tap(NAME, codeAnalyzer);
            hooks.parser.for('javascript/esm').tap(NAME, codeAnalyzer);
            /**
       * Extract all metadata for the entry points in a Map object.
       */ const metadataByEntry = new Map();
            compilation.hooks.finishModules.tapPromise(NAME, getExtractMetadata({
                compilation,
                compiler,
                dev: this.dev,
                metadataByEntry
            }));
            /**
       * Emit the middleware manifest.
       */ compilation.hooks.processAssets.tap({
                name: 'NextJsMiddlewareManifest',
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, getCreateAssets({
                compilation,
                metadataByEntry,
                opts: {
                    sriEnabled: this.sriEnabled,
                    rewrites: this.rewrites,
                    edgeEnvironments: this.edgeEnvironments,
                    dev: this.dev
                }
            }));
        });
    }
}
const SUPPORTED_NATIVE_MODULES = [
    'buffer',
    'events',
    'assert',
    'util',
    'async_hooks'
];
const supportedEdgePolyfills = new Set(SUPPORTED_NATIVE_MODULES);
function getEdgePolyfilledModules() {
    const records = {};
    for (const mod of SUPPORTED_NATIVE_MODULES){
        records[mod] = `commonjs node:${mod}`;
        records[`node:${mod}`] = `commonjs node:${mod}`;
    }
    return records;
}
async function handleWebpackExternalForEdgeRuntime({ request, context, contextInfo, getResolve }) {
    if ((contextInfo.issuerLayer === _constants1.WEBPACK_LAYERS.middleware || contextInfo.issuerLayer === _constants1.WEBPACK_LAYERS.api) && isNodeJsModule(request) && !supportedEdgePolyfills.has(request)) {
        // allows user to provide and use their polyfills, as we do with buffer.
        try {
            await getResolve()(context, request);
        } catch  {
            return `root globalThis.__import_unsupported('${request}')`;
        }
    }
} //# sourceMappingURL=middleware-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/next-drop-client-page-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    DropClientPage: null,
    ampFirstEntryNamesMap: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DropClientPage: function() {
        return DropClientPage;
    },
    ampFirstEntryNamesMap: function() {
        return ampFirstEntryNamesMap;
    }
});
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const ampFirstEntryNamesMap = new WeakMap();
const PLUGIN_NAME = 'DropAmpFirstPagesPlugin';
class DropClientPage {
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, { normalModuleFactory })=>{
            // Recursively look up the issuer till it ends up at the root
            function findEntryModule(mod) {
                const queue = new Set([
                    mod
                ]);
                for (const module1 of queue){
                    const incomingConnections = compilation.moduleGraph.getIncomingConnections(module1);
                    for (const incomingConnection of incomingConnections){
                        if (!incomingConnection.originModule) return module1;
                        queue.add(incomingConnection.originModule);
                    }
                }
                return null;
            }
            function handler(parser) {
                function markAsAmpFirst() {
                    const entryModule = findEntryModule(parser.state.module);
                    if (!entryModule) {
                        return;
                    }
                    // @ts-ignore buildInfo exists on Module
                    entryModule.buildInfo.NEXT_ampFirst = true;
                }
                parser.hooks.preDeclarator.tap(PLUGIN_NAME, (declarator)=>{
                    var _declarator_id;
                    if ((declarator == null ? void 0 : (_declarator_id = declarator.id) == null ? void 0 : _declarator_id.name) === _constants.STRING_LITERAL_DROP_BUNDLE) {
                        markAsAmpFirst();
                    }
                });
            }
            normalModuleFactory.hooks.parser.for('javascript/auto').tap(PLUGIN_NAME, handler);
            normalModuleFactory.hooks.parser.for('javascript/esm').tap(PLUGIN_NAME, handler);
            normalModuleFactory.hooks.parser.for('javascript/dynamic').tap(PLUGIN_NAME, handler);
            if (!ampFirstEntryNamesMap.has(compilation)) {
                ampFirstEntryNamesMap.set(compilation, []);
            }
            const ampFirstEntryNamesItem = ampFirstEntryNamesMap.get(compilation);
            compilation.hooks.seal.tap(PLUGIN_NAME, ()=>{
                for (const [name, entryData] of compilation.entries){
                    for (const dependency of entryData.dependencies){
                        var _module_buildInfo;
                        const module1 = compilation.moduleGraph.getModule(dependency);
                        if (module1 == null ? void 0 : (_module_buildInfo = module1.buildInfo) == null ? void 0 : _module_buildInfo.NEXT_ampFirst) {
                            ampFirstEntryNamesItem.push(name);
                            compilation.entries.delete(name);
                        }
                    }
                }
            });
        });
    }
    constructor(){
        this.ampPages = new Set();
    }
} //# sourceMappingURL=next-drop-client-page-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/profiling-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    ProfilingPlugin: null,
    spans: null,
    webpackInvalidSpans: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ProfilingPlugin: function() {
        return ProfilingPlugin;
    },
    spans: function() {
        return spans;
    },
    webpackInvalidSpans: function() {
        return webpackInvalidSpans;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const pluginName = 'ProfilingPlugin';
const spans = new WeakMap();
const moduleSpansByCompilation = new WeakMap();
const makeSpanByCompilation = new WeakMap();
const sealSpanByCompilation = new WeakMap();
const webpackInvalidSpans = new WeakMap();
const TRACE_LABELS_SEAL = [
    'module assets',
    'create chunk assets',
    'asset render',
    'asset emit',
    'store asset'
];
function inTraceLabelsSeal(label) {
    return TRACE_LABELS_SEAL.some((l)=>label.startsWith(l));
}
class ProfilingPlugin {
    constructor({ runWebpackSpan, rootDir }){
        this.runWebpackSpan = runWebpackSpan;
        this.rootDir = rootDir;
    }
    apply(compiler) {
        this.traceTopLevelHooks(compiler);
        this.traceCompilationHooks(compiler);
        this.compiler = compiler;
    }
    traceHookPair(spanName, startHook, stopHook, { parentSpan, attrs, onStart, onStop } = {}) {
        let span;
        startHook.tap({
            name: pluginName,
            stage: -Infinity
        }, (...params)=>{
            const name = typeof spanName === 'function' ? spanName() : spanName;
            const attributes = attrs ? attrs(...params) : attrs;
            span = parentSpan ? parentSpan(...params).traceChild(name, attributes) : this.runWebpackSpan.traceChild(name, attributes);
            if (onStart) onStart(span, ...params);
        });
        stopHook.tap({
            name: pluginName,
            stage: Infinity
        }, (...params)=>{
            // `stopHook` may be triggered when `startHook` has not in cases
            // where `stopHook` is used as the terminating event for more
            // than one pair of hooks.
            if (!span) {
                return;
            }
            if (onStop) onStop(span, ...params);
            span.stop();
        });
    }
    traceTopLevelHooks(compiler) {
        this.traceHookPair('webpack-compilation', compiler.hooks.compilation, compiler.hooks.afterCompile, {
            parentSpan: ()=>webpackInvalidSpans.get(compiler) || this.runWebpackSpan,
            attrs: ()=>({
                    name: compiler.name
                }),
            onStart: (span, compilation)=>{
                spans.set(compilation, span);
                spans.set(compiler, span);
                moduleSpansByCompilation.set(compilation, new WeakMap());
            }
        });
        if (compiler.options.mode === 'development') {
            this.traceHookPair(()=>`webpack-invalidated-${compiler.name}`, compiler.hooks.invalid, compiler.hooks.done, {
                onStart: (span)=>webpackInvalidSpans.set(compiler, span),
                onStop: ()=>webpackInvalidSpans.delete(compiler),
                attrs: (fileName)=>({
                        trigger: fileName ? _path.default.relative(this.rootDir, fileName).replaceAll(_path.default.sep, '/') : 'manual'
                    })
            });
        }
    }
    traceCompilationHooks(compiler) {
        this.traceHookPair('emit', compiler.hooks.emit, compiler.hooks.afterEmit, {
            parentSpan: ()=>webpackInvalidSpans.get(compiler) || this.runWebpackSpan
        });
        this.traceHookPair('make', compiler.hooks.make, compiler.hooks.finishMake, {
            parentSpan: (compilation)=>{
                const compilationSpan = spans.get(compilation);
                if (!compilationSpan) {
                    return webpackInvalidSpans.get(compiler) || this.runWebpackSpan;
                }
                return compilationSpan;
            },
            onStart: (span, compilation)=>{
                makeSpanByCompilation.set(compilation, span);
            },
            onStop: (_span, compilation)=>{
                makeSpanByCompilation.delete(compilation);
            }
        });
        compiler.hooks.compilation.tap({
            name: pluginName,
            stage: -Infinity
        }, (compilation)=>{
            compilation.hooks.buildModule.tap(pluginName, (module1)=>{
                var _compilation_moduleGraph;
                const moduleType = (()=>{
                    const r = module1.userRequest;
                    if (!r || r.endsWith('!')) {
                        return '';
                    } else {
                        const resource = r.split('!').pop();
                        const match = /^[^?]+\.([^?]+)$/.exec(resource);
                        return match ? match[1] : '';
                    }
                })();
                const issuerModule = compilation == null ? void 0 : (_compilation_moduleGraph = compilation.moduleGraph) == null ? void 0 : _compilation_moduleGraph.getIssuer(module1);
                let span;
                const moduleSpans = moduleSpansByCompilation.get(compilation);
                const spanName = `build-module${moduleType ? `-${moduleType}` : ''}`;
                const issuerSpan = issuerModule && (moduleSpans == null ? void 0 : moduleSpans.get(issuerModule));
                if (issuerSpan) {
                    span = issuerSpan.traceChild(spanName);
                } else {
                    let parentSpan;
                    for (const incomingConnection of compilation.moduleGraph.getIncomingConnections(module1)){
                        const entrySpan = spans.get(incomingConnection.dependency);
                        if (entrySpan) {
                            parentSpan = entrySpan;
                            break;
                        }
                    }
                    if (!parentSpan) {
                        const compilationSpan = spans.get(compilation);
                        if (!compilationSpan) {
                            return;
                        }
                        parentSpan = compilationSpan;
                    }
                    span = parentSpan.traceChild(spanName);
                }
                span.setAttribute('name', module1.userRequest);
                span.setAttribute('layer', module1.layer);
                moduleSpans.set(module1, span);
            });
            const moduleHooks = _webpack.NormalModule.getCompilationHooks(compilation);
            moduleHooks.readResource.for(undefined).intercept({
                register (tapInfo) {
                    const fn = tapInfo.fn;
                    tapInfo.fn = (loaderContext, callback)=>{
                        fn(loaderContext, (err, result)=>{
                            callback(err, result);
                        });
                    };
                    return tapInfo;
                }
            });
            moduleHooks.loader.tap(pluginName, (loaderContext, module1)=>{
                var _moduleSpansByCompilation_get;
                const moduleSpan = (_moduleSpansByCompilation_get = moduleSpansByCompilation.get(compilation)) == null ? void 0 : _moduleSpansByCompilation_get.get(module1);
                loaderContext.currentTraceSpan = moduleSpan;
            });
            compilation.hooks.succeedModule.tap(pluginName, (module1)=>{
                var _moduleSpansByCompilation_get_get, _moduleSpansByCompilation_get;
                moduleSpansByCompilation == null ? void 0 : (_moduleSpansByCompilation_get = moduleSpansByCompilation.get(compilation)) == null ? void 0 : (_moduleSpansByCompilation_get_get = _moduleSpansByCompilation_get.get(module1)) == null ? void 0 : _moduleSpansByCompilation_get_get.stop();
            });
            compilation.hooks.failedModule.tap(pluginName, (module1)=>{
                var _moduleSpansByCompilation_get_get, _moduleSpansByCompilation_get;
                moduleSpansByCompilation == null ? void 0 : (_moduleSpansByCompilation_get = moduleSpansByCompilation.get(compilation)) == null ? void 0 : (_moduleSpansByCompilation_get_get = _moduleSpansByCompilation_get.get(module1)) == null ? void 0 : _moduleSpansByCompilation_get_get.stop();
            });
            this.traceHookPair('seal', compilation.hooks.seal, compilation.hooks.afterSeal, {
                parentSpan: ()=>spans.get(compilation),
                onStart (span) {
                    sealSpanByCompilation.set(compilation, span);
                },
                onStop () {
                    sealSpanByCompilation.delete(compilation);
                }
            });
            compilation.hooks.addEntry.tap(pluginName, (entry)=>{
                const parentSpan = makeSpanByCompilation.get(compilation) || spans.get(compilation);
                if (!parentSpan) {
                    return;
                }
                const addEntrySpan = parentSpan.traceChild('add-entry');
                addEntrySpan.setAttribute('request', entry.request);
                spans.set(entry, addEntrySpan);
            });
            compilation.hooks.succeedEntry.tap(pluginName, (entry)=>{
                var _spans_get;
                (_spans_get = spans.get(entry)) == null ? void 0 : _spans_get.stop();
                spans.delete(entry);
            });
            compilation.hooks.failedEntry.tap(pluginName, (entry)=>{
                var _spans_get;
                (_spans_get = spans.get(entry)) == null ? void 0 : _spans_get.stop();
                spans.delete(entry);
            });
            this.traceHookPair('chunk-graph', compilation.hooks.beforeChunks, compilation.hooks.afterChunks, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('optimize', compilation.hooks.optimize, compilation.hooks.reviveModules, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('optimize-modules', compilation.hooks.optimizeModules, compilation.hooks.afterOptimizeModules, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('optimize-chunks', compilation.hooks.optimizeChunks, compilation.hooks.afterOptimizeChunks, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('optimize-tree', compilation.hooks.optimizeTree, compilation.hooks.afterOptimizeTree, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('optimize-chunk-modules', compilation.hooks.optimizeChunkModules, compilation.hooks.afterOptimizeChunkModules, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('module-hash', compilation.hooks.beforeModuleHash, compilation.hooks.afterModuleHash, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('code-generation', compilation.hooks.beforeCodeGeneration, compilation.hooks.afterCodeGeneration, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('hash', compilation.hooks.beforeHash, compilation.hooks.afterHash, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            this.traceHookPair('code-generation-jobs', compilation.hooks.afterHash, compilation.hooks.beforeModuleAssets, {
                parentSpan: ()=>sealSpanByCompilation.get(compilation) || spans.get(compilation)
            });
            const logs = new Map();
            const originalTime = compilation.logger.time;
            const originalTimeEnd = compilation.logger.timeEnd;
            compilation.logger.time = (label)=>{
                if (!inTraceLabelsSeal(label)) {
                    return originalTime.call(compilation.logger, label);
                }
                const span = sealSpanByCompilation.get(compilation);
                if (span) {
                    logs.set(label, span.traceChild(label.replace(/ /g, '-')));
                }
                return originalTime.call(compilation.logger, label);
            };
            compilation.logger.timeEnd = (label)=>{
                if (!inTraceLabelsSeal(label)) {
                    return originalTimeEnd.call(compilation.logger, label);
                }
                const span = logs.get(label);
                if (span) {
                    span.stop();
                    logs.delete(label);
                }
                return originalTimeEnd.call(compilation.logger, label);
            };
        });
    }
} //# sourceMappingURL=profiling-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/build-manifest-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    generateClientManifest: null,
    getEntrypointFiles: null,
    normalizeRewritesForBuildManifest: null,
    processRoute: null,
    srcEmptySsgManifest: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // This plugin creates a build-manifest.json for all assets that are being output
    // It has a mapping of "entry" filename to real filename. Because the real filename can be hashed in production
    default: function() {
        return BuildManifestPlugin;
    },
    generateClientManifest: function() {
        return generateClientManifest;
    },
    getEntrypointFiles: function() {
        return getEntrypointFiles;
    },
    normalizeRewritesForBuildManifest: function() {
        return normalizeRewritesForBuildManifest;
    },
    processRoute: function() {
        return processRoute;
    },
    srcEmptySsgManifest: function() {
        return srcEmptySsgManifest;
    }
});
const _devalue = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/devalue/devalue.umd.js [app-rsc] (ecmascript)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _getroutefromentrypoint = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/server/get-route-from-entrypoint.js [app-rsc] (ecmascript)"));
const _nextdropclientpageplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/next-drop-client-page-plugin.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/index.js [app-rsc] (ecmascript)");
const _profilingplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/profiling-plugin.js [app-rsc] (ecmascript)");
const _trace = __turbopack_require__("[project]/node_modules/next/dist/trace/index.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const srcEmptySsgManifest = `self.__SSG_MANIFEST=new Set;self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`;
// nodejs: '/static/<build id>/low-priority.js'
function buildNodejsLowPriorityPath(filename, buildId) {
    return `${_constants.CLIENT_STATIC_FILES_PATH}/${buildId}/${filename}`;
}
function createEdgeRuntimeManifest(originAssetMap) {
    const manifestFilenames = [
        '_buildManifest.js',
        '_ssgManifest.js'
    ];
    const assetMap = {
        ...originAssetMap,
        lowPriorityFiles: []
    };
    const manifestDefCode = `self.__BUILD_MANIFEST = ${JSON.stringify(assetMap, null, 2)};\n`;
    // edge lowPriorityFiles item: '"/static/" + process.env.__NEXT_BUILD_ID + "/low-priority.js"'.
    // Since lowPriorityFiles is not fixed and relying on `process.env.__NEXT_BUILD_ID`, we'll produce code creating it dynamically.
    const lowPriorityFilesCode = `self.__BUILD_MANIFEST.lowPriorityFiles = [\n` + manifestFilenames.map((filename)=>{
        return `"/static/" + process.env.__NEXT_BUILD_ID + "/${filename}",\n`;
    }).join(',') + `\n];`;
    return manifestDefCode + lowPriorityFilesCode;
}
function normalizeRewrite(item) {
    return {
        has: item.has,
        source: item.source,
        destination: item.destination
    };
}
function normalizeRewritesForBuildManifest(rewrites) {
    var _rewrites_afterFiles_map, _rewrites_afterFiles, _rewrites_beforeFiles_map, _rewrites_beforeFiles, _rewrites_fallback_map, _rewrites_fallback;
    return {
        afterFiles: (_rewrites_afterFiles = rewrites.afterFiles) == null ? void 0 : (_rewrites_afterFiles_map = _rewrites_afterFiles.map(processRoute)) == null ? void 0 : _rewrites_afterFiles_map.map((item)=>normalizeRewrite(item)),
        beforeFiles: (_rewrites_beforeFiles = rewrites.beforeFiles) == null ? void 0 : (_rewrites_beforeFiles_map = _rewrites_beforeFiles.map(processRoute)) == null ? void 0 : _rewrites_beforeFiles_map.map((item)=>normalizeRewrite(item)),
        fallback: (_rewrites_fallback = rewrites.fallback) == null ? void 0 : (_rewrites_fallback_map = _rewrites_fallback.map(processRoute)) == null ? void 0 : _rewrites_fallback_map.map((item)=>normalizeRewrite(item))
    };
}
function generateClientManifest(assetMap, rewrites, clientRouterFilters, compiler, compilation) {
    const compilationSpan = compilation ? _profilingplugin.spans.get(compilation) : compiler ? _profilingplugin.spans.get(compiler) : new _trace.Span({
        name: 'client-manifest'
    });
    const genClientManifestSpan = compilationSpan == null ? void 0 : compilationSpan.traceChild('NextJsBuildManifest-generateClientManifest');
    return genClientManifestSpan == null ? void 0 : genClientManifestSpan.traceFn(()=>{
        const clientManifest = {
            __rewrites: normalizeRewritesForBuildManifest(rewrites),
            __routerFilterStatic: clientRouterFilters == null ? void 0 : clientRouterFilters.staticFilter,
            __routerFilterDynamic: clientRouterFilters == null ? void 0 : clientRouterFilters.dynamicFilter
        };
        const appDependencies = new Set(assetMap.pages['/_app']);
        const sortedPageKeys = (0, _utils.getSortedRoutes)(Object.keys(assetMap.pages));
        sortedPageKeys.forEach((page)=>{
            const dependencies = assetMap.pages[page];
            if (page === '/_app') return;
            // Filter out dependencies in the _app entry, because those will have already
            // been loaded by the client prior to a navigation event
            const filteredDeps = dependencies.filter((dep)=>!appDependencies.has(dep));
            // The manifest can omit the page if it has no requirements
            if (filteredDeps.length) {
                clientManifest[page] = filteredDeps;
            }
        });
        // provide the sorted pages as an array so we don't rely on the object's keys
        // being in order and we don't slow down look-up time for page assets
        clientManifest.sortedPages = sortedPageKeys;
        return (0, _devalue.default)(clientManifest);
    });
}
function getEntrypointFiles(entrypoint) {
    return (entrypoint == null ? void 0 : entrypoint.getFiles().filter((file)=>{
        // We don't want to include `.hot-update.js` files into the initial page
        return /(?<!\.hot-update)\.(js|css)($|\?)/.test(file);
    }).map((file)=>file.replace(/\\/g, '/'))) ?? [];
}
const processRoute = (r)=>{
    var _rewrite_destination;
    const rewrite = {
        ...r
    };
    // omit external rewrite destinations since these aren't
    // handled client-side
    if (!(rewrite == null ? void 0 : (_rewrite_destination = rewrite.destination) == null ? void 0 : _rewrite_destination.startsWith('/'))) {
        delete rewrite.destination;
    }
    return rewrite;
};
class BuildManifestPlugin {
    constructor(options){
        this.buildId = options.buildId;
        this.isDevFallback = !!options.isDevFallback;
        this.rewrites = {
            beforeFiles: [],
            afterFiles: [],
            fallback: []
        };
        this.appDirEnabled = options.appDirEnabled;
        this.clientRouterFilters = options.clientRouterFilters;
        this.rewrites.beforeFiles = options.rewrites.beforeFiles.map(processRoute);
        this.rewrites.afterFiles = options.rewrites.afterFiles.map(processRoute);
        this.rewrites.fallback = options.rewrites.fallback.map(processRoute);
    }
    createAssets(compiler, compilation, assets) {
        const compilationSpan = _profilingplugin.spans.get(compilation) || _profilingplugin.spans.get(compiler);
        const createAssetsSpan = compilationSpan == null ? void 0 : compilationSpan.traceChild('NextJsBuildManifest-createassets');
        return createAssetsSpan == null ? void 0 : createAssetsSpan.traceFn(()=>{
            const entrypoints = compilation.entrypoints;
            const assetMap = {
                polyfillFiles: [],
                devFiles: [],
                ampDevFiles: [],
                lowPriorityFiles: [],
                rootMainFiles: [],
                rootMainFilesTree: {},
                pages: {
                    '/_app': []
                },
                ampFirstPages: []
            };
            const ampFirstEntryNames = _nextdropclientpageplugin.ampFirstEntryNamesMap.get(compilation);
            if (ampFirstEntryNames) {
                for (const entryName of ampFirstEntryNames){
                    const pagePath = (0, _getroutefromentrypoint.default)(entryName);
                    if (!pagePath) {
                        continue;
                    }
                    assetMap.ampFirstPages.push(pagePath);
                }
            }
            const mainFiles = new Set(getEntrypointFiles(entrypoints.get(_constants.CLIENT_STATIC_FILES_RUNTIME_MAIN)));
            if (this.appDirEnabled) {
                assetMap.rootMainFiles = [
                    ...new Set(getEntrypointFiles(entrypoints.get(_constants.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP)))
                ];
            }
            const compilationAssets = compilation.getAssets();
            assetMap.polyfillFiles = compilationAssets.filter((p)=>{
                // Ensure only .js files are passed through
                if (!p.name.endsWith('.js')) {
                    return false;
                }
                return p.info && _constants.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL in p.info;
            }).map((v)=>v.name);
            assetMap.devFiles = getEntrypointFiles(entrypoints.get(_constants.CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH)).filter((file)=>!mainFiles.has(file));
            assetMap.ampDevFiles = getEntrypointFiles(entrypoints.get(_constants.CLIENT_STATIC_FILES_RUNTIME_AMP));
            for (const entrypoint of compilation.entrypoints.values()){
                if (_constants.SYSTEM_ENTRYPOINTS.has(entrypoint.name)) continue;
                const pagePath = (0, _getroutefromentrypoint.default)(entrypoint.name);
                if (!pagePath) {
                    continue;
                }
                const filesForPage = getEntrypointFiles(entrypoint);
                assetMap.pages[pagePath] = [
                    ...new Set([
                        ...mainFiles,
                        ...filesForPage
                    ])
                ];
            }
            if (!this.isDevFallback) {
                // Add the runtime build manifest file (generated later in this file)
                // as a dependency for the app. If the flag is false, the file won't be
                // downloaded by the client.
                const buildManifestPath = buildNodejsLowPriorityPath('_buildManifest.js', this.buildId);
                const ssgManifestPath = buildNodejsLowPriorityPath('_ssgManifest.js', this.buildId);
                assetMap.lowPriorityFiles.push(buildManifestPath, ssgManifestPath);
                assets[ssgManifestPath] = new _webpack.sources.RawSource(srcEmptySsgManifest);
            }
            assetMap.pages = Object.keys(assetMap.pages).sort().reduce((a, c)=>(a[c] = assetMap.pages[c], a), {});
            let buildManifestName = _constants.BUILD_MANIFEST;
            if (this.isDevFallback) {
                buildManifestName = `fallback-${_constants.BUILD_MANIFEST}`;
            }
            assets[buildManifestName] = new _webpack.sources.RawSource(JSON.stringify(assetMap, null, 2));
            assets[`server/${_constants.MIDDLEWARE_BUILD_MANIFEST}.js`] = new _webpack.sources.RawSource(`${createEdgeRuntimeManifest(assetMap)}`);
            if (!this.isDevFallback) {
                const clientManifestPath = `${_constants.CLIENT_STATIC_FILES_PATH}/${this.buildId}/_buildManifest.js`;
                assets[clientManifestPath] = new _webpack.sources.RawSource(`self.__BUILD_MANIFEST = ${generateClientManifest(assetMap, this.rewrites, this.clientRouterFilters, compiler, compilation)};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`);
            }
            return assets;
        });
    }
    apply(compiler) {
        compiler.hooks.make.tap('NextJsBuildManifest', (compilation)=>{
            compilation.hooks.processAssets.tap({
                name: 'NextJsBuildManifest',
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, (assets)=>{
                this.createAssets(compiler, compilation, assets);
            });
        });
        return;
    }
} //# sourceMappingURL=build-manifest-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/jsconfig-paths-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * This webpack resolver is largely based on TypeScript's "paths" handling
 * The TypeScript license can be found here:
 * https://github.com/microsoft/TypeScript/blob/214df64e287804577afa1fea0184c18c40f7d1ca/LICENSE.txt
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    JsConfigPathsPlugin: null,
    findBestPatternMatch: null,
    hasZeroOrOneAsteriskCharacter: null,
    isString: null,
    matchPatternOrExact: null,
    matchedText: null,
    pathIsRelative: null,
    patternText: null,
    tryParsePattern: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    JsConfigPathsPlugin: function() {
        return JsConfigPathsPlugin;
    },
    findBestPatternMatch: function() {
        return findBestPatternMatch;
    },
    hasZeroOrOneAsteriskCharacter: function() {
        return hasZeroOrOneAsteriskCharacter;
    },
    isString: function() {
        return isString;
    },
    matchPatternOrExact: function() {
        return matchPatternOrExact;
    },
    matchedText: function() {
        return matchedText;
    },
    pathIsRelative: function() {
        return pathIsRelative;
    },
    patternText: function() {
        return patternText;
    },
    tryParsePattern: function() {
        return tryParsePattern;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _debug = __turbopack_require__("[project]/node_modules/next/dist/compiled/debug/index.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const log = (0, _debug.debug)('next:jsconfig-paths-plugin');
const asterisk = 0x2a;
function hasZeroOrOneAsteriskCharacter(str) {
    let seenAsterisk = false;
    for(let i = 0; i < str.length; i++){
        if (str.charCodeAt(i) === asterisk) {
            if (!seenAsterisk) {
                seenAsterisk = true;
            } else {
                // have already seen asterisk
                return false;
            }
        }
    }
    return true;
}
function pathIsRelative(testPath) {
    return /^\.\.?($|[\\/])/.test(testPath);
}
function tryParsePattern(pattern) {
    // This should be verified outside of here and a proper error thrown.
    const indexOfStar = pattern.indexOf('*');
    return indexOfStar === -1 ? undefined : {
        prefix: pattern.slice(0, indexOfStar),
        suffix: pattern.slice(indexOfStar + 1)
    };
}
function isPatternMatch({ prefix, suffix }, candidate) {
    return candidate.length >= prefix.length + suffix.length && candidate.startsWith(prefix) && candidate.endsWith(suffix);
}
function findBestPatternMatch(values, getPattern, candidate) {
    let matchedValue;
    // use length of prefix as betterness criteria
    let longestMatchPrefixLength = -1;
    for (const v of values){
        const pattern = getPattern(v);
        if (isPatternMatch(pattern, candidate) && pattern.prefix.length > longestMatchPrefixLength) {
            longestMatchPrefixLength = pattern.prefix.length;
            matchedValue = v;
        }
    }
    return matchedValue;
}
function matchPatternOrExact(patternStrings, candidate) {
    const patterns = [];
    for (const patternString of patternStrings){
        if (!hasZeroOrOneAsteriskCharacter(patternString)) continue;
        const pattern = tryParsePattern(patternString);
        if (pattern) {
            patterns.push(pattern);
        } else if (patternString === candidate) {
            // pattern was matched as is - no need to search further
            return patternString;
        }
    }
    return findBestPatternMatch(patterns, (_)=>_, candidate);
}
function isString(text) {
    return typeof text === 'string';
}
function matchedText(pattern, candidate) {
    return candidate.substring(pattern.prefix.length, candidate.length - pattern.suffix.length);
}
function patternText({ prefix, suffix }) {
    return `${prefix}*${suffix}`;
}
/**
 * Calls the iterator function for each entry of the array
 * until the first result or error is reached
 */ function forEachBail(array, iterator, callback) {
    if (array.length === 0) return callback();
    let i = 0;
    const next = ()=>{
        let loop = undefined;
        iterator(array[i++], (err, result)=>{
            if (err || result !== undefined || i >= array.length) {
                return callback(err, result);
            }
            if (loop === false) while(next());
            loop = true;
        });
        if (!loop) loop = false;
        return loop;
    };
    while(next());
}
const NODE_MODULES_REGEX = /node_modules/;
class JsConfigPathsPlugin {
    constructor(paths, resolvedBaseUrl){
        this.paths = paths;
        this.resolvedBaseUrl = resolvedBaseUrl;
        this.jsConfigPlugin = true;
        log('tsconfig.json or jsconfig.json paths: %O', paths);
        log('resolved baseUrl: %s', resolvedBaseUrl);
    }
    apply(resolver) {
        const target = resolver.ensureHook('resolve');
        resolver.getHook('described-resolve').tapAsync('JsConfigPathsPlugin', (request, resolveContext, callback)=>{
            const resolvedBaseUrl = this.resolvedBaseUrl;
            if (resolvedBaseUrl === undefined) {
                return callback();
            }
            const paths = this.paths;
            const pathsKeys = Object.keys(paths);
            // If no aliases are added bail out
            if (pathsKeys.length === 0) {
                log('paths are empty, bailing out');
                return callback();
            }
            const moduleName = request.request;
            // Exclude node_modules from paths support (speeds up resolving)
            if (request.path.match(NODE_MODULES_REGEX)) {
                log('skipping request as it is inside node_modules %s', moduleName);
                return callback();
            }
            if (_path.default.posix.isAbsolute(moduleName) || process.platform === 'win32' && _path.default.win32.isAbsolute(moduleName)) {
                log('skipping request as it is an absolute path %s', moduleName);
                return callback();
            }
            if (pathIsRelative(moduleName)) {
                log('skipping request as it is a relative path %s', moduleName);
                return callback();
            }
            // log('starting to resolve request %s', moduleName)
            // If the module name does not match any of the patterns in `paths` we hand off resolving to webpack
            const matchedPattern = matchPatternOrExact(pathsKeys, moduleName);
            if (!matchedPattern) {
                log('moduleName did not match any paths pattern %s', moduleName);
                return callback();
            }
            const matchedStar = isString(matchedPattern) ? undefined : matchedText(matchedPattern, moduleName);
            const matchedPatternText = isString(matchedPattern) ? matchedPattern : patternText(matchedPattern);
            let triedPaths = [];
            forEachBail(paths[matchedPatternText], (subst, pathCallback)=>{
                const curPath = matchedStar ? subst.replace('*', matchedStar) : subst;
                // Ensure .d.ts is not matched
                if (curPath.endsWith('.d.ts')) {
                    // try next path candidate
                    return pathCallback();
                }
                const candidate = _path.default.join(resolvedBaseUrl.baseUrl, curPath);
                const obj = Object.assign({}, request, {
                    request: candidate
                });
                resolver.doResolve(target, obj, `Aliased with tsconfig.json or jsconfig.json ${matchedPatternText} to ${candidate}`, resolveContext, (resolverErr, resolverResult)=>{
                    if (resolverErr || resolverResult === undefined) {
                        triedPaths.push(candidate);
                        // try next path candidate
                        return pathCallback();
                    }
                    return pathCallback(resolverErr, resolverResult);
                });
            }, callback);
        });
    }
} //# sourceMappingURL=jsconfig-paths-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    edgeServerAppPaths: null,
    edgeServerPages: null,
    nodeServerAppPaths: null,
    nodeServerPages: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // This plugin creates a pages-manifest.json from page entrypoints.
    // This is used for mapping paths like `/` to `.next/server/static/<buildid>/pages/index.js` when doing SSR
    // It's also used by next export to provide defaultPathMap
    default: function() {
        return PagesManifestPlugin;
    },
    edgeServerAppPaths: function() {
        return edgeServerAppPaths;
    },
    edgeServerPages: function() {
        return edgeServerPages;
    },
    nodeServerAppPaths: function() {
        return nodeServerAppPaths;
    },
    nodeServerPages: function() {
        return nodeServerPages;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _promises = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/fs/promises [external] (fs/promises, cjs)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _getroutefromentrypoint = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/server/get-route-from-entrypoint.js [app-rsc] (ecmascript)"));
const _normalizepathsep = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-path-sep.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let edgeServerPages = {};
let nodeServerPages = {};
let edgeServerAppPaths = {};
let nodeServerAppPaths = {};
class PagesManifestPlugin {
    constructor({ dev, distDir, isEdgeRuntime, appDirEnabled }){
        this.dev = dev;
        this.distDir = distDir;
        this.isEdgeRuntime = isEdgeRuntime;
        this.appDirEnabled = appDirEnabled;
    }
    async createAssets(compilation, assets) {
        const entrypoints = compilation.entrypoints;
        const pages = {};
        const appPaths = {};
        for (const entrypoint of entrypoints.values()){
            const pagePath = (0, _getroutefromentrypoint.default)(entrypoint.name, this.appDirEnabled);
            if (!pagePath) {
                continue;
            }
            const files = entrypoint.getFiles().filter((file)=>!file.includes('webpack-runtime') && !file.includes('webpack-api-runtime') && file.endsWith('.js'));
            // Skip entries which are empty
            if (!files.length) {
                continue;
            }
            // Write filename, replace any backslashes in path (on windows) with forwardslashes for cross-platform consistency.
            let file = files[files.length - 1];
            if (!this.dev) {
                if (!this.isEdgeRuntime) {
                    file = file.slice(3);
                }
            }
            file = (0, _normalizepathsep.normalizePathSep)(file);
            if (entrypoint.name.startsWith('app/')) {
                appPaths[pagePath] = file;
            } else {
                pages[pagePath] = file;
            }
        }
        // This plugin is used by both the Node server and Edge server compilers,
        // we need to merge both pages to generate the full manifest.
        if (this.isEdgeRuntime) {
            edgeServerPages = pages;
            edgeServerAppPaths = appPaths;
        } else {
            nodeServerPages = pages;
            nodeServerAppPaths = appPaths;
        }
        // handle parallel compilers writing to the same
        // manifest path by merging existing manifest with new
        const writeMergedManifest = async (manifestPath, entries)=>{
            await _promises.default.mkdir(_path.default.dirname(manifestPath), {
                recursive: true
            });
            await _promises.default.writeFile(manifestPath, JSON.stringify({
                ...await _promises.default.readFile(manifestPath, 'utf8').then((res)=>JSON.parse(res)).catch(()=>({})),
                ...entries
            }, null, 2));
        };
        if (this.distDir) {
            const pagesManifestPath = _path.default.join(this.distDir, 'server', _constants.PAGES_MANIFEST);
            await writeMergedManifest(pagesManifestPath, {
                ...edgeServerPages,
                ...nodeServerPages
            });
        } else {
            const pagesManifestPath = (!this.dev && !this.isEdgeRuntime ? '../' : '') + _constants.PAGES_MANIFEST;
            assets[pagesManifestPath] = new _webpack.sources.RawSource(JSON.stringify({
                ...edgeServerPages,
                ...nodeServerPages
            }, null, 2));
        }
        if (this.appDirEnabled) {
            if (this.distDir) {
                const appPathsManifestPath = _path.default.join(this.distDir, 'server', _constants.APP_PATHS_MANIFEST);
                await writeMergedManifest(appPathsManifestPath, {
                    ...edgeServerAppPaths,
                    ...nodeServerAppPaths
                });
            } else {
                assets[(!this.dev && !this.isEdgeRuntime ? '../' : '') + _constants.APP_PATHS_MANIFEST] = new _webpack.sources.RawSource(JSON.stringify({
                    ...edgeServerAppPaths,
                    ...nodeServerAppPaths
                }, null, 2));
            }
        }
    }
    apply(compiler) {
        compiler.hooks.make.tap('NextJsPagesManifest', (compilation)=>{
            compilation.hooks.processAssets.tapPromise({
                name: 'NextJsPagesManifest',
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, (assets)=>this.createAssets(compilation, assets));
        });
    }
} //# sourceMappingURL=pages-manifest-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/react-loadable-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
COPYRIGHT (c) 2017-present James Kyle <me@thejameskyle.com>
 MIT License
 Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
 The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWAR
*/ // Implementation of this PR: https://github.com/jamiebuilds/react-loadable/pull/132
// Modified to strip out unneeded results for Next's specific use case
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ReactLoadablePlugin", {
    enumerable: true,
    get: function() {
        return ReactLoadablePlugin;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getModuleId(compilation, module) {
    return compilation.chunkGraph.getModuleId(module);
}
function getModuleFromDependency(compilation, dep) {
    return compilation.moduleGraph.getModule(dep);
}
function getOriginModuleFromDependency(compilation, dep) {
    return compilation.moduleGraph.getParentModule(dep);
}
function getChunkGroupFromBlock(compilation, block) {
    return compilation.chunkGraph.getBlockChunkGroup(block);
}
function buildManifest(_compiler, compilation, projectSrcDir, dev, shouldCreateDynamicCssManifest) {
    if (!projectSrcDir) {
        return {
            reactLoadableManifest: {},
            dynamicCssManifest: []
        };
    }
    const dynamicCssManifestSet = new Set();
    let manifest = {};
    // This is allowed:
    // import("./module"); <- ImportDependency
    // We don't support that:
    // import(/* webpackMode: "eager" */ "./module") <- ImportEagerDependency
    // import(`./module/${param}`) <- ImportContextDependency
    // Find all dependencies blocks which contains a `import()` dependency
    const handleBlock = (block)=>{
        block.blocks.forEach(handleBlock);
        const chunkGroup = getChunkGroupFromBlock(compilation, block);
        for (const dependency of block.dependencies){
            if (dependency.type.startsWith('import()')) {
                // get the referenced module
                const module = getModuleFromDependency(compilation, dependency);
                if (!module) return;
                // get the module containing the import()
                const originModule = getOriginModuleFromDependency(compilation, dependency);
                const originRequest = originModule == null ? void 0 : originModule.resource;
                if (!originRequest) return;
                // We construct a "unique" key from origin module and request
                // It's not perfect unique, but that will be fine for us.
                // We also need to construct the same in the babel plugin.
                const key = `${_path.default.relative(projectSrcDir, originRequest)} -> ${dependency.request}`;
                // Capture all files that need to be loaded.
                const files = new Set();
                if (manifest[key]) {
                    // In the "rare" case where multiple chunk groups
                    // are created for the same `import()` or multiple
                    // import()s reference the same module, we merge
                    // the files to make sure to not miss files
                    // This may cause overfetching in edge cases.
                    for (const file of manifest[key].files){
                        files.add(file);
                    }
                }
                // There might not be a chunk group when all modules
                // are already loaded. In this case we only need need
                // the module id and no files
                if (chunkGroup) {
                    for (const chunk of chunkGroup.chunks){
                        chunk.files.forEach((file)=>{
                            if ((file.endsWith('.js') || file.endsWith('.css')) && file.match(/^static\/(chunks|css)\//)) {
                                files.add(file);
                                if (shouldCreateDynamicCssManifest && file.endsWith('.css')) {
                                    dynamicCssManifestSet.add(file);
                                }
                            }
                        });
                    }
                }
                // usually we have to add the parent chunk groups too
                // but we assume that all parents are also imported by
                // next/dynamic so they are loaded by the same technique
                // add the id and files to the manifest
                const id = dev ? key : getModuleId(compilation, module);
                manifest[key] = {
                    id,
                    files: Array.from(files)
                };
            }
        }
    };
    for (const module of compilation.modules){
        module.blocks.forEach(handleBlock);
    }
    manifest = Object.keys(manifest).sort() // eslint-disable-next-line no-sequences
    .reduce((a, c)=>(a[c] = manifest[c], a), {});
    return {
        reactLoadableManifest: manifest,
        dynamicCssManifest: Array.from(dynamicCssManifestSet)
    };
}
class ReactLoadablePlugin {
    constructor(opts){
        this.filename = opts.filename;
        this.pagesOrAppDir = opts.pagesDir || opts.appDir;
        this.isPagesDir = Boolean(opts.pagesDir);
        this.runtimeAsset = opts.runtimeAsset;
        this.dev = opts.dev;
    }
    createAssets(compiler, compilation, assets) {
        const projectSrcDir = this.pagesOrAppDir ? _path.default.dirname(this.pagesOrAppDir) : undefined;
        const shouldCreateDynamicCssManifest = !this.dev && this.isPagesDir;
        const { reactLoadableManifest, dynamicCssManifest } = buildManifest(compiler, compilation, projectSrcDir, this.dev, shouldCreateDynamicCssManifest);
        assets[this.filename] = new _webpack.sources.RawSource(JSON.stringify(reactLoadableManifest, null, 2));
        if (this.runtimeAsset) {
            assets[this.runtimeAsset] = new _webpack.sources.RawSource(`self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(JSON.stringify(reactLoadableManifest))}`);
        }
        // This manifest prevents removing server rendered <link> tags after client
        // navigation. This is only needed under Pages dir && Production && Webpack.
        // x-ref: https://github.com/vercel/next.js/pull/72959
        if (shouldCreateDynamicCssManifest) {
            assets[`${_constants.DYNAMIC_CSS_MANIFEST}.json`] = new _webpack.sources.RawSource(JSON.stringify(dynamicCssManifest, null, 2));
            // This is for edge runtime.
            assets[`server/${_constants.DYNAMIC_CSS_MANIFEST}.js`] = new _webpack.sources.RawSource(`self.__DYNAMIC_CSS_MANIFEST=${JSON.stringify(JSON.stringify(dynamicCssManifest))}`);
        }
        return assets;
    }
    apply(compiler) {
        compiler.hooks.make.tap('ReactLoadableManifest', (compilation)=>{
            compilation.hooks.processAssets.tap({
                name: 'ReactLoadableManifest',
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, (assets)=>{
                this.createAssets(compiler, compilation, assets);
            });
        });
    }
} //# sourceMappingURL=react-loadable-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseBabel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getBabelError", {
    enumerable: true,
    get: function() {
        return getBabelError;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
function getBabelError(fileName, err) {
    if (err.code !== 'BABEL_PARSE_ERROR') {
        return false;
    }
    // https://github.com/babel/babel/blob/34693d6024da3f026534dd8d569f97ac0109602e/packages/babel-core/src/parser/index.js
    if (err.loc) {
        const lineNumber = Math.max(1, err.loc.line);
        const column = Math.max(1, err.loc.column);
        let message = err.message // Remove file information, which instead is provided by webpack.
        .replace(/^.+?: /, '') // Remove column information from message
        .replace(new RegExp(`[^\\S\\r\\n]*\\(${lineNumber}:${column}\\)[^\\S\\r\\n]*`), '');
        return new _simpleWebpackError.SimpleWebpackError(`${(0, _picocolors.cyan)(fileName)}:${(0, _picocolors.yellow)(lineNumber.toString())}:${(0, _picocolors.yellow)(column.toString())}`, (0, _picocolors.red)((0, _picocolors.bold)('Syntax error')).concat(`: ${message}`));
    }
    return false;
} //# sourceMappingURL=parseBabel.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseCss.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCssError", {
    enumerable: true,
    get: function() {
        return getCssError;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
const regexCssError = /^(?:CssSyntaxError|SyntaxError)\n\n\((\d+):(\d*)\) (.*)$/s;
function getCssError(fileName, err) {
    if (!((err.name === 'CssSyntaxError' || err.name === 'SyntaxError') && err.stack === false && !(err instanceof SyntaxError))) {
        return false;
    }
    // https://github.com/postcss/postcss-loader/blob/d6931da177ac79707bd758436e476036a55e4f59/src/Error.js
    const res = regexCssError.exec(err.message);
    if (res) {
        const [, _lineNumber, _column, reason] = res;
        const lineNumber = Math.max(1, parseInt(_lineNumber, 10));
        const column = Math.max(1, parseInt(_column, 10));
        return new _simpleWebpackError.SimpleWebpackError(`${(0, _picocolors.cyan)(fileName)}:${(0, _picocolors.yellow)(lineNumber.toString())}:${(0, _picocolors.yellow)(column.toString())}`, (0, _picocolors.red)((0, _picocolors.bold)('Syntax error')).concat(`: ${reason}`));
    }
    return false;
} //# sourceMappingURL=parseCss.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseScss.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getScssError", {
    enumerable: true,
    get: function() {
        return getScssError;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
const regexScssError = /SassError: (.+)\n\s+on line (\d+) [\s\S]*?>> (.+)\n\s*(-+)\^$/m;
function getScssError(fileName, fileContent, err) {
    if (err.name !== 'SassError') {
        return false;
    }
    const res = regexScssError.exec(err.message);
    if (res) {
        const [, reason, _lineNumer, backupFrame, columnString] = res;
        const lineNumber = Math.max(1, parseInt(_lineNumer, 10));
        const column = (columnString == null ? void 0 : columnString.length) ?? 1;
        let frame;
        if (fileContent) {
            try {
                const { codeFrameColumns } = __turbopack_require__("[project]/node_modules/next/dist/compiled/babel/code-frame.js [app-rsc] (ecmascript)");
                frame = codeFrameColumns(fileContent, {
                    start: {
                        line: lineNumber,
                        column
                    }
                }, {
                    forceColor: true
                });
            } catch  {}
        }
        return new _simpleWebpackError.SimpleWebpackError(`${(0, _picocolors.cyan)(fileName)}:${(0, _picocolors.yellow)(lineNumber.toString())}:${(0, _picocolors.yellow)(column.toString())}`, (0, _picocolors.red)((0, _picocolors.bold)('Syntax error')).concat(`: ${reason}\n\n${frame ?? backupFrame}`));
    }
    return false;
} //# sourceMappingURL=parseScss.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNotFoundError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    getImageError: null,
    getNotFoundError: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getImageError: function() {
        return getImageError;
    },
    getNotFoundError: function() {
        return getNotFoundError;
    }
});
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
const _middlewarewebpack = __turbopack_require__("[project]/node_modules/next/dist/client/components/react-dev-overlay/server/middleware-webpack.js [app-rsc] (ecmascript)");
// Based on https://github.com/webpack/webpack/blob/fcdd04a833943394bbb0a9eeb54a962a24cc7e41/lib/stats/DefaultStatsFactoryPlugin.js#L422-L431
/*
Copyright JS Foundation and other contributors

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/ function getModuleTrace(input, compilation) {
    const visitedModules = new Set();
    const moduleTrace = [];
    let current = input.module;
    while(current){
        if (visitedModules.has(current)) break; // circular (technically impossible, but who knows)
        visitedModules.add(current);
        const origin = compilation.moduleGraph.getIssuer(current);
        if (!origin) break;
        moduleTrace.push({
            origin,
            module: current
        });
        current = origin;
    }
    return moduleTrace;
}
async function getSourceFrame(input, fileName, compilation) {
    try {
        const loc = input.loc || input.dependencies.map((d)=>d.loc).filter(Boolean)[0];
        const module1 = input.module;
        const originalSource = module1.originalSource();
        const sourceMap = (originalSource == null ? void 0 : originalSource.map()) ?? undefined;
        if (sourceMap) {
            var _result_originalStackFrame_lineNumber, _result_originalStackFrame, _result_originalStackFrame_column, _result_originalStackFrame1;
            const moduleId = compilation.chunkGraph.getModuleId(module1);
            const result = await (0, _middlewarewebpack.createOriginalStackFrame)({
                source: {
                    type: 'bundle',
                    sourceMap,
                    ignoredSources: (0, _middlewarewebpack.getIgnoredSources)(sourceMap),
                    compilation,
                    moduleId,
                    modulePath: fileName
                },
                rootDirectory: compilation.options.context,
                frame: {
                    arguments: [],
                    file: fileName,
                    methodName: '',
                    lineNumber: loc.start.line,
                    column: loc.start.column
                }
            });
            return {
                frame: (result == null ? void 0 : result.originalCodeFrame) ?? '',
                lineNumber: (result == null ? void 0 : (_result_originalStackFrame = result.originalStackFrame) == null ? void 0 : (_result_originalStackFrame_lineNumber = _result_originalStackFrame.lineNumber) == null ? void 0 : _result_originalStackFrame_lineNumber.toString()) ?? '',
                column: (result == null ? void 0 : (_result_originalStackFrame1 = result.originalStackFrame) == null ? void 0 : (_result_originalStackFrame_column = _result_originalStackFrame1.column) == null ? void 0 : _result_originalStackFrame_column.toString()) ?? ''
            };
        }
    } catch  {}
    return {
        frame: '',
        lineNumber: '',
        column: ''
    };
}
function getFormattedFileName(fileName, module1, lineNumber, column) {
    var _module_loaders;
    if ((_module_loaders = module1.loaders) == null ? void 0 : _module_loaders.find((loader)=>/next-font-loader[/\\]index.js/.test(loader.loader))) {
        // Parse the query and get the path of the file where the font function was called.
        // provided by next-swc next-transform-font
        return JSON.parse(module1.resourceResolveData.query.slice(1)).path;
    } else {
        let formattedFileName = (0, _picocolors.cyan)(fileName);
        if (lineNumber && column) {
            formattedFileName += `:${(0, _picocolors.yellow)(lineNumber)}:${(0, _picocolors.yellow)(column)}`;
        }
        return formattedFileName;
    }
}
async function getNotFoundError(compilation, input, fileName, module1) {
    if (input.name !== 'ModuleNotFoundError' && !(input.name === 'ModuleBuildError' && /Error: Can't resolve '.+' in /.test(input.message))) {
        return false;
    }
    try {
        const { frame, lineNumber, column } = await getSourceFrame(input, fileName, compilation);
        const errorMessage = input.error.message.replace(/ in '.*?'/, '').replace(/Can't resolve '(.*)'/, `Can't resolve '${(0, _picocolors.green)('$1')}'`);
        const importTrace = ()=>{
            const moduleTrace = getModuleTrace(input, compilation).map(({ origin })=>origin.readableIdentifier(compilation.requestShortener)).filter((name)=>name && !/next-(app|middleware|client-pages|route|flight-(client|server|client-entry))-loader/.test(name) && !/css-loader.+\.js/.test(name));
            if (moduleTrace.length === 0) return '';
            return `\nImport trace for requested module:\n${moduleTrace.join('\n')}`;
        };
        let message = (0, _picocolors.red)((0, _picocolors.bold)('Module not found')) + `: ${errorMessage}` + '\n' + frame + (frame !== '' ? '\n' : '') + '\nhttps://nextjs.org/docs/messages/module-not-found\n' + importTrace();
        const formattedFileName = getFormattedFileName(fileName, module1, lineNumber, column);
        return new _simpleWebpackError.SimpleWebpackError(formattedFileName, message);
    } catch (err) {
        // Don't fail on failure to resolve sourcemaps
        return input;
    }
}
async function getImageError(compilation, input, err) {
    if (err.name !== 'InvalidImageFormatError') {
        return false;
    }
    const moduleTrace = getModuleTrace(input, compilation);
    const { origin, module: module1 } = moduleTrace[0] || {};
    if (!origin || !module1) {
        return false;
    }
    const page = origin.rawRequest.replace(/^private-next-pages/, './pages');
    const importedFile = module1.rawRequest;
    const source = origin.originalSource().buffer().toString('utf8');
    let lineNumber = -1;
    source.split('\n').some((line)=>{
        lineNumber++;
        return line.includes(importedFile);
    });
    return new _simpleWebpackError.SimpleWebpackError(`${(0, _picocolors.cyan)(page)}:${(0, _picocolors.yellow)(lineNumber.toString())}`, (0, _picocolors.red)((0, _picocolors.bold)('Error')).concat(`: Image import "${importedFile}" is not a valid image file. The image may be corrupted or an unsupported format.`));
} //# sourceMappingURL=parseNotFoundError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseRSC.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getRscError", {
    enumerable: true,
    get: function() {
        return getRscError;
    }
});
const _getModuleTrace = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/getModuleTrace.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
function formatRSCErrorMessage(message, isPagesDir, fileName) {
    let formattedMessage = message;
    let formattedVerboseMessage = '';
    // Comes from the "React Server Components" transform in SWC, always
    // attach the module trace.
    const NEXT_RSC_ERR_REACT_API = /.+NEXT_RSC_ERR_REACT_API: (.*?)\n/s;
    const NEXT_RSC_ERR_SERVER_IMPORT = /.+NEXT_RSC_ERR_SERVER_IMPORT: (.*?)\n/s;
    const NEXT_RSC_ERR_CLIENT_IMPORT = /.+NEXT_RSC_ERR_CLIENT_IMPORT: (.*?)\n/s;
    const NEXT_RSC_ERR_CLIENT_METADATA_EXPORT = /.+NEXT_RSC_ERR_CLIENT_METADATA_EXPORT: (.*?)\n/s;
    const NEXT_RSC_ERR_CONFLICT_METADATA_EXPORT = /NEXT_RSC_ERR_CONFLICT_METADATA_EXPORT/s;
    const NEXT_RSC_ERR_CLIENT_DIRECTIVE = /.+NEXT_RSC_ERR_CLIENT_DIRECTIVE\n/s;
    const NEXT_RSC_ERR_CLIENT_DIRECTIVE_PAREN = /.+NEXT_RSC_ERR_CLIENT_DIRECTIVE_PAREN\n/s;
    const NEXT_RSC_ERR_INVALID_API = /.+NEXT_RSC_ERR_INVALID_API: (.*?)\n/s;
    const NEXT_RSC_ERR_ERROR_FILE_SERVER_COMPONENT = /.+NEXT_RSC_ERR_ERROR_FILE_SERVER_COMPONENT/;
    if (NEXT_RSC_ERR_REACT_API.test(message)) {
        const matches = message.match(NEXT_RSC_ERR_REACT_API);
        if (matches && matches[1] === 'Component') {
            formattedMessage = `\n\nYou’re importing a class component. It only works in a Client Component but none of its parents are marked with "use client", so they're Server Components by default.\nLearn more: https://nextjs.org/docs/app/building-your-application/rendering/client-components\n\n`;
        } else {
            formattedMessage = message.replace(NEXT_RSC_ERR_REACT_API, `\n\nYou're importing a component that needs $1. This React hook only works in a client component. To fix, mark the file (or its parent) with the \`"use client"\` directive. \n\nLearn more: https://nextjs.org/docs/app/api-reference/directives/use-client\n\n`);
        }
        formattedVerboseMessage = '\n\nMaybe one of these should be marked as a client entry with "use client":\n';
    } else if (NEXT_RSC_ERR_SERVER_IMPORT.test(message)) {
        let shouldAddUseClient = true;
        const matches = message.match(NEXT_RSC_ERR_SERVER_IMPORT);
        switch(matches && matches[1]){
            case 'react-dom/server':
                // If importing "react-dom/server", we should show a different error.
                formattedMessage = `\n\nYou're importing a component that imports react-dom/server. To fix it, render or return the content directly as a Server Component instead for perf and security.\nLearn more: https://nextjs.org/docs/app/building-your-application/rendering`;
                break;
            case 'next/router':
                // If importing "next/router", we should tell them to use "next/navigation".
                formattedMessage = `\n\nYou have a Server Component that imports next/router. Use next/navigation instead.\nLearn more: https://nextjs.org/docs/app/api-reference/functions/use-router`;
                shouldAddUseClient = false;
                break;
            default:
                formattedMessage = message.replace(NEXT_RSC_ERR_SERVER_IMPORT, `\n\nYou're importing a component that imports $1. It only works in a Client Component but none of its parents are marked with "use client", so they're Server Components by default.\nLearn more: https://nextjs.org/docs/app/building-your-application/rendering\n\n`);
        }
        formattedVerboseMessage = shouldAddUseClient ? '\n\nMaybe one of these should be marked as a client entry "use client":\n' : '\n\nImport trace:\n';
    } else if (NEXT_RSC_ERR_CLIENT_IMPORT.test(message)) {
        if (isPagesDir) {
            formattedMessage = message.replace(NEXT_RSC_ERR_CLIENT_IMPORT, `\n\nYou're importing a component that needs $1. That only works in a Server Component which is not supported in the pages/ directory. Read more: https://nextjs.org/docs/app/building-your-application/rendering/server-components\n\n`);
            formattedVerboseMessage = '\n\nImport trace for requested module:\n';
        } else {
            formattedMessage = message.replace(NEXT_RSC_ERR_CLIENT_IMPORT, `\n\nYou're importing a component that needs $1. That only works in a Server Component but one of its parents is marked with "use client", so it's a Client Component.\nLearn more: https://nextjs.org/docs/app/building-your-application/rendering\n\n`);
            formattedVerboseMessage = '\n\nOne of these is marked as a client entry with "use client":\n';
        }
    } else if (NEXT_RSC_ERR_CLIENT_DIRECTIVE.test(message)) {
        formattedMessage = message.replace(NEXT_RSC_ERR_CLIENT_DIRECTIVE, `\n\nThe "use client" directive must be placed before other expressions. Move it to the top of the file to resolve this issue.\n\n`);
        formattedVerboseMessage = '\n\nImport path:\n';
    } else if (NEXT_RSC_ERR_CLIENT_DIRECTIVE_PAREN.test(message)) {
        formattedMessage = message.replace(NEXT_RSC_ERR_CLIENT_DIRECTIVE_PAREN, `\n\n"use client" must be a directive, and placed before other expressions. Remove the parentheses and move it to the top of the file to resolve this issue.\nLearn more: https://nextjs.org/docs/app/api-reference/directives/use-client\n\n`);
        formattedVerboseMessage = '\n\nImport path:\n';
    } else if (NEXT_RSC_ERR_INVALID_API.test(message)) {
        formattedMessage = message.replace(NEXT_RSC_ERR_INVALID_API, `\n\n"$1" is not supported in app/. Read more: https://nextjs.org/docs/app/building-your-application/data-fetching\n\n`);
        formattedVerboseMessage = '\n\nFile path:\n';
    } else if (NEXT_RSC_ERR_ERROR_FILE_SERVER_COMPONENT.test(message)) {
        formattedMessage = message.replace(NEXT_RSC_ERR_ERROR_FILE_SERVER_COMPONENT, `\n\n${fileName} must be a Client Component. Add the "use client" directive the top of the file to resolve this issue.\nLearn more: https://nextjs.org/docs/app/api-reference/directives/use-client\n\n`);
        formattedVerboseMessage = '\n\nImport path:\n';
    } else if (NEXT_RSC_ERR_CLIENT_METADATA_EXPORT.test(message)) {
        formattedMessage = message.replace(NEXT_RSC_ERR_CLIENT_METADATA_EXPORT, `\n\nYou are attempting to export "$1" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive. Read more: https://nextjs.org/docs/app/api-reference/directives/use-client\n\n`);
        formattedVerboseMessage = '\n\nFile path:\n';
    } else if (NEXT_RSC_ERR_CONFLICT_METADATA_EXPORT.test(message)) {
        formattedMessage = message.replace(NEXT_RSC_ERR_CONFLICT_METADATA_EXPORT, `\n\n"metadata" and "generateMetadata" cannot be exported at the same time, please keep one of them. Read more: https://nextjs.org/docs/app/api-reference/file-conventions/metadata\n\n`);
        formattedVerboseMessage = '\n\nFile path:\n';
    }
    return [
        formattedMessage,
        formattedVerboseMessage
    ];
}
function getRscError(fileName, err, module, compilation, compiler) {
    if (!err.message || !/NEXT_RSC_ERR_/.test(err.message)) {
        return false;
    }
    const { isPagesDir, moduleTrace } = (0, _getModuleTrace.getModuleTrace)(module, compilation, compiler);
    const formattedError = formatRSCErrorMessage(err.message, isPagesDir, fileName);
    const { formattedModuleTrace, lastInternalFileName, invalidImportMessage } = (0, _getModuleTrace.formatModuleTrace)(compiler, moduleTrace);
    const error = new _simpleWebpackError.SimpleWebpackError(lastInternalFileName, 'ReactServerComponentsError:\n' + formattedError[0] + invalidImportMessage + formattedError[1] + formattedModuleTrace);
    // Delete the stack because it's created here.
    error.stack = '';
    return error;
} //# sourceMappingURL=parseRSC.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNextFontError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getNextFontError", {
    enumerable: true,
    get: function() {
        return getNextFontError;
    }
});
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
function getNextFontError(err, module) {
    try {
        const resourceResolveData = module.resourceResolveData;
        if (!module.loaders.find((loader)=>/next-font-loader[/\\]index.js/.test(loader.loader))) {
            return false;
        }
        // Parse the query and get the path of the file where the font function was called.
        // provided by next-swc next-transform-font
        const file = JSON.parse(resourceResolveData.query.slice(1)).path;
        if (err.name === 'NextFontError') {
            // Known error thrown by @next/font, display the error message
            return new _simpleWebpackError.SimpleWebpackError(file, `\`next/font\` error:\n${err.message}`);
        } else {
            // Unknown error thrown by @next/font
            return new _simpleWebpackError.SimpleWebpackError(file, `An error occurred in \`next/font\`.\n\n${err.stack}`);
        }
    } catch  {
        return false;
    }
} //# sourceMappingURL=parseNextFontError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNextAppLoaderError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getNextAppLoaderError", {
    enumerable: true,
    get: function() {
        return getNextAppLoaderError;
    }
});
const _path = __turbopack_require__("[externals]/path [external] (path, cjs)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
function getNextAppLoaderError(err, module, compiler) {
    try {
        if (!module.loaders[0].loader.includes('next-app-loader')) {
            return false;
        }
        const file = (0, _path.relative)(compiler.context, module.buildInfo.route.absolutePagePath);
        return new _simpleWebpackError.SimpleWebpackError(file, err.message);
    } catch  {
        return false;
    }
} //# sourceMappingURL=parseNextAppLoaderError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNextInvalidImportError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getNextInvalidImportError", {
    enumerable: true,
    get: function() {
        return getNextInvalidImportError;
    }
});
const _getModuleTrace = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/getModuleTrace.js [app-rsc] (ecmascript)");
const _simpleWebpackError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/simpleWebpackError.js [app-rsc] (ecmascript)");
function getNextInvalidImportError(err, module, compilation, compiler) {
    try {
        if (!module.loaders.find((loader)=>loader.loader.includes('next-invalid-import-error-loader.js'))) {
            return false;
        }
        const { moduleTrace } = (0, _getModuleTrace.getModuleTrace)(module, compilation, compiler);
        const { formattedModuleTrace, lastInternalFileName, invalidImportMessage } = (0, _getModuleTrace.formatModuleTrace)(compiler, moduleTrace);
        return new _simpleWebpackError.SimpleWebpackError(lastInternalFileName, err.message + invalidImportMessage + '\n\nImport trace for requested module:\n' + formattedModuleTrace);
    } catch  {
        return false;
    }
} //# sourceMappingURL=parseNextInvalidImportError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/webpackModuleError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getModuleBuildError", {
    enumerable: true,
    get: function() {
        return getModuleBuildError;
    }
});
const _fs = __turbopack_require__("[externals]/fs [external] (fs, cjs)");
const _path = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _parseBabel = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseBabel.js [app-rsc] (ecmascript)");
const _parseCss = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseCss.js [app-rsc] (ecmascript)");
const _parseScss = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseScss.js [app-rsc] (ecmascript)");
const _parseNotFoundError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNotFoundError.js [app-rsc] (ecmascript)");
const _iserror = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/lib/is-error.js [app-rsc] (ecmascript)"));
const _parseRSC = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseRSC.js [app-rsc] (ecmascript)");
const _parseNextFontError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNextFontError.js [app-rsc] (ecmascript)");
const _parseNextAppLoaderError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNextAppLoaderError.js [app-rsc] (ecmascript)");
const _parseNextInvalidImportError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/parseNextInvalidImportError.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function getFileData(compilation, m) {
    var _compilation_compiler;
    let resolved;
    let ctx = ((_compilation_compiler = compilation.compiler) == null ? void 0 : _compilation_compiler.context) ?? null;
    if (ctx !== null && typeof m.resource === 'string') {
        const res = _path.relative(ctx, m.resource).replace(/\\/g, _path.posix.sep);
        resolved = res.startsWith('.') ? res : `.${_path.posix.sep}${res}`;
    } else {
        const requestShortener = compilation.requestShortener;
        if (typeof (m == null ? void 0 : m.readableIdentifier) === 'function') {
            resolved = m.readableIdentifier(requestShortener);
        } else {
            resolved = m.request ?? m.userRequest;
        }
    }
    if (resolved) {
        let content = null;
        try {
            content = (0, _fs.readFileSync)(ctx ? _path.resolve(ctx, resolved) : resolved, 'utf8');
        } catch  {}
        return [
            resolved,
            content
        ];
    }
    return [
        '<unknown>',
        null
    ];
}
async function getModuleBuildError(compiler, compilation, input) {
    if (!(typeof input === 'object' && ((input == null ? void 0 : input.name) === 'ModuleBuildError' || (input == null ? void 0 : input.name) === 'ModuleNotFoundError') && Boolean(input.module) && (0, _iserror.default)(input.error))) {
        return false;
    }
    const err = input.error;
    const [sourceFilename, sourceContent] = getFileData(compilation, input.module);
    const notFoundError = await (0, _parseNotFoundError.getNotFoundError)(compilation, input, sourceFilename, input.module);
    if (notFoundError !== false) {
        return notFoundError;
    }
    const imageError = await (0, _parseNotFoundError.getImageError)(compilation, input, err);
    if (imageError !== false) {
        return imageError;
    }
    const babel = (0, _parseBabel.getBabelError)(sourceFilename, err);
    if (babel !== false) {
        return babel;
    }
    const css = (0, _parseCss.getCssError)(sourceFilename, err);
    if (css !== false) {
        return css;
    }
    const scss = (0, _parseScss.getScssError)(sourceFilename, sourceContent, err);
    if (scss !== false) {
        return scss;
    }
    const rsc = (0, _parseRSC.getRscError)(sourceFilename, err, input.module, compilation, compiler);
    if (rsc !== false) {
        return rsc;
    }
    const nextFont = (0, _parseNextFontError.getNextFontError)(err, input.module);
    if (nextFont !== false) {
        return nextFont;
    }
    const nextAppLoader = (0, _parseNextAppLoaderError.getNextAppLoaderError)(err, input.module, compiler);
    if (nextAppLoader !== false) {
        return nextAppLoader;
    }
    const invalidImportError = (0, _parseNextInvalidImportError.getNextInvalidImportError)(err, input.module, compilation, compiler);
    if (invalidImportError !== false) {
        return invalidImportError;
    }
    return false;
} //# sourceMappingURL=webpackModuleError.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WellKnownErrorsPlugin", {
    enumerable: true,
    get: function() {
        return WellKnownErrorsPlugin;
    }
});
const _webpackModuleError = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/webpackModuleError.js [app-rsc] (ecmascript)");
const NAME = 'WellKnownErrorsPlugin';
class WellKnownErrorsPlugin {
    apply(compiler) {
        compiler.hooks.compilation.tap(NAME, (compilation)=>{
            compilation.hooks.afterSeal.tapPromise(NAME, async ()=>{
                var _compilation_warnings, _compilation_errors;
                if ((_compilation_warnings = compilation.warnings) == null ? void 0 : _compilation_warnings.length) {
                    await Promise.all(compilation.warnings.map(async (warn, i)=>{
                        var _warn_module_context, _warn_module;
                        if (warn.name === 'ModuleDependencyWarning' && ((_warn_module = warn.module) == null ? void 0 : (_warn_module_context = _warn_module.context) == null ? void 0 : _warn_module_context.includes('node_modules'))) {
                            compilation.warnings.splice(i, 1);
                        }
                    }));
                }
                if ((_compilation_errors = compilation.errors) == null ? void 0 : _compilation_errors.length) {
                    await Promise.all(compilation.errors.map(async (err, i)=>{
                        try {
                            const moduleError = await (0, _webpackModuleError.getModuleBuildError)(compiler, compilation, err);
                            if (moduleError !== false) {
                                compilation.errors[i] = moduleError;
                            }
                        } catch (e) {
                            console.log(e);
                        }
                    }));
                }
            });
        });
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/copy-file-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CopyFilePlugin", {
    enumerable: true,
    get: function() {
        return CopyFilePlugin;
    }
});
const _fs = __turbopack_require__("[externals]/fs [external] (fs, cjs)");
const _loaderutils3 = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/loader-utils3/index.js [app-rsc] (ecmascript)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'CopyFilePlugin';
class CopyFilePlugin {
    constructor({ filePath, cacheKey, name, info }){
        this.filePath = filePath;
        this.cacheKey = cacheKey;
        this.name = name;
        this.info = info;
    }
    apply(compiler) {
        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation)=>{
            const cache = compilation.getCache('CopyFilePlugin');
            const hook = compilation.hooks.processAssets;
            hook.tapPromise({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, async ()=>{
                if (cache) {
                    const cachedResult = await cache.getPromise(this.filePath, this.cacheKey);
                    if (cachedResult) {
                        const { file, source } = cachedResult;
                        compilation.emitAsset(file, source, {
                            ...this.info
                        });
                        return;
                    }
                }
                const content = await _fs.promises.readFile(this.filePath, 'utf8');
                const file = _loaderutils3.default.interpolateName({
                    resourcePath: this.filePath
                }, this.name, {
                    content,
                    context: compiler.context
                });
                const source = new _webpack.sources.RawSource(content);
                if (cache) {
                    await cache.storePromise(this.filePath, this.cacheKey, {
                        file,
                        source
                    });
                }
                compilation.emitAsset(file, source, {
                    ...this.info
                });
            });
        });
    }
} //# sourceMappingURL=copy-file-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/build-context.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    NextBuildContext: null,
    getPluginState: null,
    getProxiedPluginState: null,
    resumePluginState: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NextBuildContext: function() {
        return NextBuildContext;
    },
    getPluginState: function() {
        return getPluginState;
    },
    getProxiedPluginState: function() {
        return getProxiedPluginState;
    },
    resumePluginState: function() {
        return resumePluginState;
    }
});
// A layer for storing data that is used by plugins to communicate with each
// other between different steps of the build process. This is only internal
// to Next.js and will not be a part of the final build output.
// These states don't need to be deeply merged.
let pluginState = {};
function resumePluginState(resumedState) {
    Object.assign(pluginState, resumedState);
}
function getProxiedPluginState(initialState) {
    return new Proxy(pluginState, {
        get (target, key) {
            if (typeof target[key] === 'undefined') {
                return target[key] = initialState[key];
            }
            return target[key];
        },
        set (target, key, value) {
            target[key] = value;
            return true;
        }
    });
}
function getPluginState() {
    return pluginState;
}
const NextBuildContext = {}; //# sourceMappingURL=build-context.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ClientReferenceManifestPlugin", {
    enumerable: true,
    get: function() {
        return ClientReferenceManifestPlugin;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _buildcontext = __turbopack_require__("[project]/node_modules/next/dist/build/build-context.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _normalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-page-path.js [app-rsc] (ecmascript)");
const _deploymentid = __turbopack_require__("[project]/node_modules/next/dist/build/deployment-id.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/utils.js [app-rsc] (ecmascript)");
const _encodeuripath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/encode-uri-path.js [app-rsc] (ecmascript)");
const _ismetadataroute = __turbopack_require__("[project]/node_modules/next/dist/lib/metadata/is-metadata-route.js [app-rsc] (ecmascript)");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const pluginState = (0, _buildcontext.getProxiedPluginState)({
    ssrModules: {},
    edgeSsrModules: {},
    rscModules: {},
    edgeRscModules: {}
});
function getAppPathRequiredChunks(chunkGroup, excludedFiles) {
    const deploymentIdChunkQuery = (0, _deploymentid.getDeploymentIdQueryOrEmptyString)();
    const chunks = [];
    chunkGroup.chunks.forEach((chunk)=>{
        if (_constants.SYSTEM_ENTRYPOINTS.has(chunk.name || '')) {
            return null;
        }
        // Get the actual chunk file names from the chunk file list.
        // It's possible that the chunk is generated via `import()`, in
        // that case the chunk file name will be '[name].[contenthash]'
        // instead of '[name]-[chunkhash]'.
        if (chunk.id != null) {
            const chunkId = '' + chunk.id;
            chunk.files.forEach((file)=>{
                // It's possible that a chunk also emits CSS files, that will
                // be handled separatedly.
                if (!file.endsWith('.js')) return null;
                if (file.endsWith('.hot-update.js')) return null;
                if (excludedFiles.has(file)) return null;
                // We encode the file as a URI because our server (and many other services such as S3)
                // expect to receive reserved characters such as `[` and `]` as encoded. This was
                // previously done for dynamic chunks by patching the webpack runtime but we want
                // these filenames to be managed by React's Flight runtime instead and so we need
                // to implement any special handling of the file name here.
                return chunks.push(chunkId, (0, _encodeuripath.encodeURIPath)(file) + deploymentIdChunkQuery);
            });
        }
    });
    return chunks;
}
// Normalize the entry names to their "group names" so a page can easily track
// all the manifest items it needs from parent groups by looking up the group
// segments:
// - app/foo/loading -> app/foo
// - app/foo/page -> app/foo
// - app/(group)/@named/foo/page -> app/foo
// - app/(.)foo/(..)bar/loading -> app/bar
// - app/[...catchAll]/page -> app
// - app/foo/@slot/[...catchAll]/page -> app/foo
function entryNameToGroupName(entryName) {
    let groupName = entryName.slice(0, entryName.lastIndexOf('/')) // Remove slots
    .replace(/\/@[^/]+/g, '') // Remove the group with lookahead to make sure it's not interception route
    .replace(/\/\([^/]+\)(?=(\/|$))/g, '') // Remove catch-all routes since they should be part of the parent group that the catch-all would apply to.
    // This is necessary to support parallel routes since multiple page components can be rendered on the same page.
    // In order to do that, we need to ensure that the manifests are merged together by putting them in the same group.
    .replace(/\/\[?\[\.\.\.[^\]]*]]?/g, '');
    // Interception routes
    groupName = groupName.replace(/^.+\/\(\.\.\.\)/g, 'app/').replace(/\/\(\.\)/g, '/');
    // Interception routes (recursive)
    while(/\/[^/]+\/\(\.\.\)/.test(groupName)){
        groupName = groupName.replace(/\/[^/]+\/\(\.\.\)/g, '/');
    }
    return groupName;
}
function mergeManifest(manifest, manifestToMerge) {
    Object.assign(manifest.clientModules, manifestToMerge.clientModules);
    Object.assign(manifest.ssrModuleMapping, manifestToMerge.ssrModuleMapping);
    Object.assign(manifest.edgeSSRModuleMapping, manifestToMerge.edgeSSRModuleMapping);
    Object.assign(manifest.entryCSSFiles, manifestToMerge.entryCSSFiles);
    Object.assign(manifest.rscModuleMapping, manifestToMerge.rscModuleMapping);
    Object.assign(manifest.edgeRscModuleMapping, manifestToMerge.edgeRscModuleMapping);
}
const PLUGIN_NAME = 'ClientReferenceManifestPlugin';
class ClientReferenceManifestPlugin {
    constructor(options){
        this.dev = false;
        this.dev = options.dev;
        this.appDir = options.appDir;
        this.appDirBase = _path.default.dirname(this.appDir) + _path.default.sep;
        this.experimentalInlineCss = options.experimentalInlineCss;
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, { normalModuleFactory })=>{
            compilation.dependencyFactories.set(_webpack.webpack.dependencies.ModuleDependency, normalModuleFactory);
            compilation.dependencyTemplates.set(_webpack.webpack.dependencies.ModuleDependency, new _webpack.webpack.dependencies.NullDependency.Template());
            compilation.hooks.processAssets.tap({
                name: PLUGIN_NAME,
                // Have to be in the optimize stage to run after updating the CSS
                // asset hash via extract mini css plugin.
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH
            }, (assets)=>this.createAsset(assets, compilation, compiler.context));
        });
    }
    createAsset(assets, compilation, context) {
        var _compilation_entrypoints_get;
        const manifestsPerGroup = new Map();
        const manifestEntryFiles = [];
        const configuredCrossOriginLoading = compilation.outputOptions.crossOriginLoading;
        const crossOriginMode = typeof configuredCrossOriginLoading === 'string' ? configuredCrossOriginLoading === 'use-credentials' ? configuredCrossOriginLoading : 'anonymous' : null;
        if (typeof compilation.outputOptions.publicPath !== 'string') {
            throw new Error('Expected webpack publicPath to be a string when using App Router. To customize where static assets are loaded from, use the `assetPrefix` option in next.config.js. If you are customizing your webpack config please make sure you are not modifying or removing the publicPath configuration option');
        }
        const prefix = compilation.outputOptions.publicPath || '';
        // We want to omit any files that will always be loaded on any App Router page
        // because they will already be loaded by the main entrypoint.
        const rootMainFiles = new Set();
        (_compilation_entrypoints_get = compilation.entrypoints.get(_constants.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP)) == null ? void 0 : _compilation_entrypoints_get.getFiles().forEach((file)=>{
            if (/(?<!\.hot-update)\.(js|css)($|\?)/.test(file)) {
                rootMainFiles.add(file.replace(/\\/g, '/'));
            }
        });
        for (let [entryName, entrypoint] of compilation.entrypoints){
            if (entryName === _constants.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP || entryName === _constants.APP_CLIENT_INTERNALS) {
                entryName = '';
            } else if (!/^app[\\/]/.test(entryName)) {
                continue;
            }
            const manifest = {
                moduleLoading: {
                    prefix,
                    crossOrigin: crossOriginMode
                },
                ssrModuleMapping: {},
                edgeSSRModuleMapping: {},
                clientModules: {},
                entryCSSFiles: {},
                rscModuleMapping: {},
                edgeRscModuleMapping: {}
            };
            // Absolute path without the extension
            const chunkEntryName = (this.appDirBase + entryName).replace(/[\\/]/g, _path.default.sep);
            manifest.entryCSSFiles[chunkEntryName] = entrypoint.getFiles().filter((f)=>!f.startsWith('static/css/pages/') && f.endsWith('.css')).map((file)=>{
                const source = compilation.assets[file].source();
                if (this.experimentalInlineCss && // Inline CSS currently does not work properly with HMR, so we only
                // inline CSS in production.
                !this.dev) {
                    return {
                        inlined: true,
                        path: file,
                        content: typeof source === 'string' ? source : source.toString()
                    };
                }
                return {
                    inlined: false,
                    path: file
                };
            });
            const requiredChunks = getAppPathRequiredChunks(entrypoint, rootMainFiles);
            const recordModule = (modId, mod)=>{
                var _mod_resourceResolveData, _mod_resourceResolveData1, _mod_matchResource;
                let resource = mod.type === 'css/mini-extract' ? mod._identifier.slice(mod._identifier.lastIndexOf('!') + 1) : mod.resource;
                if (!resource) {
                    return;
                }
                const moduleReferences = manifest.clientModules;
                const moduleIdMapping = manifest.ssrModuleMapping;
                const edgeModuleIdMapping = manifest.edgeSSRModuleMapping;
                const rscIdMapping = manifest.rscModuleMapping;
                const edgeRscIdMapping = manifest.edgeRscModuleMapping;
                // Note that this isn't that reliable as webpack is still possible to assign
                // additional queries to make sure there's no conflict even using the `named`
                // module ID strategy.
                let ssrNamedModuleId = (0, _path.relative)(context, ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path) || resource);
                const rscNamedModuleId = (0, _path.relative)(context, ((_mod_resourceResolveData1 = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData1.path) || resource);
                if (!ssrNamedModuleId.startsWith('.')) ssrNamedModuleId = `./${ssrNamedModuleId.replace(/\\/g, '/')}`;
                // The client compiler will always use the CJS Next.js build, so here we
                // also add the mapping for the ESM build (Edge runtime) to consume.
                const esmResource = /[\\/]next[\\/]dist[\\/]/.test(resource) ? resource.replace(/[\\/]next[\\/]dist[\\/]/, '/next/dist/esm/'.replace(/\//g, _path.default.sep)) : null;
                // An extra query param is added to the resource key when it's optimized
                // through the Barrel Loader. That's because the same file might be created
                // as multiple modules (depending on what you import from it).
                // See also: webpack/loaders/next-flight-loader/index.ts.
                if ((_mod_matchResource = mod.matchResource) == null ? void 0 : _mod_matchResource.startsWith(_constants.BARREL_OPTIMIZATION_PREFIX)) {
                    ssrNamedModuleId = (0, _utils.formatBarrelOptimizedResource)(ssrNamedModuleId, mod.matchResource);
                    resource = (0, _utils.formatBarrelOptimizedResource)(resource, mod.matchResource);
                }
                function addClientReference() {
                    var _pluginState_ssrModules_ssrNamedModuleId, _pluginState_edgeSsrModules_ssrNamedModuleId;
                    const isAsync = Boolean(compilation.moduleGraph.isAsync(mod) || ((_pluginState_ssrModules_ssrNamedModuleId = pluginState.ssrModules[ssrNamedModuleId]) == null ? void 0 : _pluginState_ssrModules_ssrNamedModuleId.async) || ((_pluginState_edgeSsrModules_ssrNamedModuleId = pluginState.edgeSsrModules[ssrNamedModuleId]) == null ? void 0 : _pluginState_edgeSsrModules_ssrNamedModuleId.async));
                    const exportName = resource;
                    manifest.clientModules[exportName] = {
                        id: modId,
                        name: '*',
                        chunks: requiredChunks,
                        async: isAsync
                    };
                    if (esmResource) {
                        const edgeExportName = esmResource;
                        manifest.clientModules[edgeExportName] = manifest.clientModules[exportName];
                    }
                }
                function addSSRIdMapping() {
                    const exportName = resource;
                    const moduleInfo = pluginState.ssrModules[ssrNamedModuleId];
                    if (moduleInfo) {
                        moduleIdMapping[modId] = moduleIdMapping[modId] || {};
                        moduleIdMapping[modId]['*'] = {
                            ...manifest.clientModules[exportName],
                            // During SSR, we don't have external chunks to load on the server
                            // side with our architecture of Webpack / Turbopack. We can keep
                            // this field empty to save some bytes.
                            chunks: [],
                            id: moduleInfo.moduleId,
                            async: moduleInfo.async
                        };
                    }
                    const edgeModuleInfo = pluginState.edgeSsrModules[ssrNamedModuleId];
                    if (edgeModuleInfo) {
                        edgeModuleIdMapping[modId] = edgeModuleIdMapping[modId] || {};
                        edgeModuleIdMapping[modId]['*'] = {
                            ...manifest.clientModules[exportName],
                            // During SSR, we don't have external chunks to load on the server
                            // side with our architecture of Webpack / Turbopack. We can keep
                            // this field empty to save some bytes.
                            chunks: [],
                            id: edgeModuleInfo.moduleId,
                            async: edgeModuleInfo.async
                        };
                    }
                }
                function addRSCIdMapping() {
                    const exportName = resource;
                    const moduleInfo = pluginState.rscModules[rscNamedModuleId];
                    if (moduleInfo) {
                        rscIdMapping[modId] = rscIdMapping[modId] || {};
                        rscIdMapping[modId]['*'] = {
                            ...manifest.clientModules[exportName],
                            // During SSR, we don't have external chunks to load on the server
                            // side with our architecture of Webpack / Turbopack. We can keep
                            // this field empty to save some bytes.
                            chunks: [],
                            id: moduleInfo.moduleId,
                            async: moduleInfo.async
                        };
                    }
                    const edgeModuleInfo = pluginState.ssrModules[rscNamedModuleId];
                    if (edgeModuleInfo) {
                        edgeRscIdMapping[modId] = edgeRscIdMapping[modId] || {};
                        edgeRscIdMapping[modId]['*'] = {
                            ...manifest.clientModules[exportName],
                            // During SSR, we don't have external chunks to load on the server
                            // side with our architecture of Webpack / Turbopack. We can keep
                            // this field empty to save some bytes.
                            chunks: [],
                            id: edgeModuleInfo.moduleId,
                            async: edgeModuleInfo.async
                        };
                    }
                }
                addClientReference();
                addSSRIdMapping();
                addRSCIdMapping();
                manifest.clientModules = moduleReferences;
                manifest.ssrModuleMapping = moduleIdMapping;
                manifest.edgeSSRModuleMapping = edgeModuleIdMapping;
                manifest.rscModuleMapping = rscIdMapping;
                manifest.edgeRscModuleMapping = edgeRscIdMapping;
            };
            const checkedChunkGroups = new Set();
            const checkedChunks = new Set();
            function recordChunkGroup(chunkGroup) {
                // Ensure recursion is stopped if we've already checked this chunk group.
                if (checkedChunkGroups.has(chunkGroup)) return;
                checkedChunkGroups.add(chunkGroup);
                // Only apply following logic to client module requests from client entry,
                // or if the module is marked as client module. That's because other
                // client modules don't need to be in the manifest at all as they're
                // never be referenced by the server/client boundary.
                // This saves a lot of bytes in the manifest.
                chunkGroup.chunks.forEach((chunk)=>{
                    // Ensure recursion is stopped if we've already checked this chunk.
                    if (checkedChunks.has(chunk)) return;
                    checkedChunks.add(chunk);
                    const entryMods = compilation.chunkGraph.getChunkEntryModulesIterable(chunk);
                    for (const mod of entryMods){
                        if (mod.layer !== _constants1.WEBPACK_LAYERS.appPagesBrowser) continue;
                        const request = mod.request;
                        if (!request || !request.includes('next-flight-client-entry-loader.js?')) {
                            continue;
                        }
                        const connections = (0, _utils.getModuleReferencesInOrder)(mod, compilation.moduleGraph);
                        for (const connection of connections){
                            const dependency = connection.dependency;
                            if (!dependency) continue;
                            const clientEntryMod = compilation.moduleGraph.getResolvedModule(dependency);
                            const modId = compilation.chunkGraph.getModuleId(clientEntryMod);
                            if (modId !== null) {
                                recordModule(modId, clientEntryMod);
                            } else {
                                var _connection_module;
                                // If this is a concatenation, register each child to the parent ID.
                                if (((_connection_module = connection.module) == null ? void 0 : _connection_module.constructor.name) === 'ConcatenatedModule') {
                                    const concatenatedMod = connection.module;
                                    const concatenatedModId = compilation.chunkGraph.getModuleId(concatenatedMod);
                                    if (concatenatedModId) {
                                        recordModule(concatenatedModId, clientEntryMod);
                                    }
                                }
                            }
                        }
                    }
                });
                // Walk through all children chunk groups too.
                for (const child of chunkGroup.childrenIterable){
                    recordChunkGroup(child);
                }
            }
            recordChunkGroup(entrypoint);
            // A page's entry name can have extensions. For example, these are both valid:
            // - app/foo/page
            // - app/foo/page.page
            if (/\/page(\.[^/]+)?$/.test(entryName)) {
                manifestEntryFiles.push(entryName.replace(/\/page(\.[^/]+)?$/, '/page'));
            }
            // We also need to create manifests for route handler entrypoints
            // (excluding metadata route handlers) to enable `'use cache'`.
            if (/\/route$/.test(entryName) && !(0, _ismetadataroute.isMetadataRoute)(entryName)) {
                manifestEntryFiles.push(entryName);
            }
            const groupName = entryNameToGroupName(entryName);
            if (!manifestsPerGroup.has(groupName)) {
                manifestsPerGroup.set(groupName, []);
            }
            manifestsPerGroup.get(groupName).push(manifest);
        }
        // Generate per-page manifests.
        for (const pageName of manifestEntryFiles){
            const mergedManifest = {
                moduleLoading: {
                    prefix,
                    crossOrigin: crossOriginMode
                },
                ssrModuleMapping: {},
                edgeSSRModuleMapping: {},
                clientModules: {},
                entryCSSFiles: {},
                rscModuleMapping: {},
                edgeRscModuleMapping: {}
            };
            const segments = [
                ...entryNameToGroupName(pageName).split('/'),
                'page'
            ];
            let group = '';
            for (const segment of segments){
                for (const manifest of manifestsPerGroup.get(group) || []){
                    mergeManifest(mergedManifest, manifest);
                }
                group += (group ? '/' : '') + segment;
            }
            const json = JSON.stringify(mergedManifest);
            const pagePath = pageName.replace(/%5F/g, '_');
            const pageBundlePath = (0, _normalizepagepath.normalizePagePath)(pagePath.slice('app'.length));
            assets['server/app' + pageBundlePath + '_' + _constants.CLIENT_REFERENCE_MANIFEST + '.js'] = new _webpack.sources.RawSource(`globalThis.__RSC_MANIFEST=(globalThis.__RSC_MANIFEST||{});globalThis.__RSC_MANIFEST[${JSON.stringify(pagePath.slice('app'.length))}]=${json}`);
        }
    }
} //# sourceMappingURL=flight-manifest-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    getAssumedSourceType: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return transformSource;
    },
    getAssumedSourceType: function() {
        return getAssumedSourceType;
    }
});
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _warnonce = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-rsc] (ecmascript)");
const _getpagestaticinfo = __turbopack_require__("[project]/node_modules/next/dist/build/analysis/get-page-static-info.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/utils.js [app-rsc] (ecmascript)");
const _getmodulebuildinfo = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)");
const noopHeadPath = "[project]/node_modules/next/dist/client/components/noop-head.js [app-rsc] (ecmascript)";
// For edge runtime it will be aliased to esm version by webpack
const MODULE_PROXY_PATH = 'next/dist/build/webpack/loaders/next-flight-loader/module-proxy';
function getAssumedSourceType(mod, sourceType) {
    var _buildInfo_rsc, _buildInfo_rsc1;
    const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(mod);
    const detectedClientEntryType = buildInfo == null ? void 0 : (_buildInfo_rsc = buildInfo.rsc) == null ? void 0 : _buildInfo_rsc.clientEntryType;
    const clientRefs = (buildInfo == null ? void 0 : (_buildInfo_rsc1 = buildInfo.rsc) == null ? void 0 : _buildInfo_rsc1.clientRefs) || [];
    // It's tricky to detect the type of a client boundary, but we should always
    // use the `module` type when we can, to support `export *` and `export from`
    // syntax in other modules that import this client boundary.
    if (sourceType === 'auto') {
        if (detectedClientEntryType === 'auto') {
            if (clientRefs.length === 0) {
                // If there's zero export detected in the client boundary, and it's the
                // `auto` type, we can safely assume it's a CJS module because it doesn't
                // have ESM exports.
                return 'commonjs';
            } else if (!clientRefs.includes('*')) {
                // Otherwise, we assume it's an ESM module.
                return 'module';
            }
        } else if (detectedClientEntryType === 'cjs') {
            return 'commonjs';
        }
    }
    return sourceType;
}
function transformSource(source, sourceMap) {
    var _module_matchResource, _buildInfo_rsc, _buildInfo_rsc1;
    // Avoid buffer to be consumed
    if (typeof source !== 'string') {
        throw new Error('Expected source to have been transformed to a string.');
    }
    const module1 = this._module;
    // Assign the RSC meta information to buildInfo.
    // Exclude next internal files which are not marked as client files
    const buildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(module1);
    buildInfo.rsc = (0, _getpagestaticinfo.getRSCModuleInformation)(source, true);
    // Resource key is the unique identifier for the resource. When RSC renders
    // a client module, that key is used to identify that module across all compiler
    // layers.
    //
    // Usually it's the module's file path + the export name (e.g. `foo.js#bar`).
    // But with Barrel Optimizations, one file can be splitted into multiple modules,
    // so when you import `foo.js#bar` and `foo.js#baz`, they are actually different
    // "foo.js" being created by the Barrel Loader (one only exports `bar`, the other
    // only exports `baz`).
    //
    // Because of that, we must add another query param to the resource key to
    // differentiate them.
    let resourceKey = this.resourcePath;
    if ((_module_matchResource = module1.matchResource) == null ? void 0 : _module_matchResource.startsWith(_constants1.BARREL_OPTIMIZATION_PREFIX)) {
        resourceKey = (0, _utils.formatBarrelOptimizedResource)(resourceKey, module1.matchResource);
    }
    // A client boundary.
    if (((_buildInfo_rsc = buildInfo.rsc) == null ? void 0 : _buildInfo_rsc.type) === _constants1.RSC_MODULE_TYPES.client) {
        const assumedSourceType = getAssumedSourceType(module1, module1.parser.sourceType);
        const clientRefs = buildInfo.rsc.clientRefs;
        const stringifiedResourceKey = JSON.stringify(resourceKey);
        if (assumedSourceType === 'module') {
            if (clientRefs.length === 0) {
                return this.callback(null, 'export {}');
            }
            if (clientRefs.includes('*')) {
                this.callback(new Error(`It's currently unsupported to use "export *" in a client boundary. Please use named exports instead.`));
                return;
            }
            let esmSource = `\
import { registerClientReference } from "react-server-dom-webpack/server.edge";
`;
            for (const ref of clientRefs){
                if (ref === 'default') {
                    esmSource += `export default registerClientReference(
function() { throw new Error(${JSON.stringify(`Attempted to call the default \
export of ${stringifiedResourceKey} from the server, but it's on the client. \
It's not possible to invoke a client function from the server, it can only be \
rendered as a Component or passed to props of a Client Component.`)}); },
${stringifiedResourceKey},
"default",
);\n`;
                } else {
                    esmSource += `export const ${ref} = registerClientReference(
function() { throw new Error(${JSON.stringify(`Attempted to call ${ref}() from \
the server but ${ref} is on the client. It's not possible to invoke a client \
function from the server, it can only be rendered as a Component or passed to \
props of a Client Component.`)}); },
${stringifiedResourceKey},
${JSON.stringify(ref)},
);`;
                }
            }
            return this.callback(null, esmSource, sourceMap);
        } else if (assumedSourceType === 'commonjs') {
            let cjsSource = `\
const { createProxy } = require("${MODULE_PROXY_PATH}")

module.exports = createProxy(${stringifiedResourceKey})
`;
            return this.callback(null, cjsSource, sourceMap);
        }
    }
    if (((_buildInfo_rsc1 = buildInfo.rsc) == null ? void 0 : _buildInfo_rsc1.type) !== _constants1.RSC_MODULE_TYPES.client) {
        if (noopHeadPath === this.resourcePath) {
            (0, _warnonce.warnOnce)(`Warning: You're using \`next/head\` inside the \`app\` directory, please migrate to the Metadata API. See https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration#step-3-migrating-nexthead for more details.`);
        }
    }
    const replacedSource = source.replace(_constants.RSC_MOD_REF_PROXY_ALIAS, MODULE_PROXY_PATH);
    this.callback(null, replacedSource, sourceMap);
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/flight-client-entry-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FlightClientEntryPlugin", {
    enumerable: true,
    get: function() {
        return FlightClientEntryPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _querystring = __turbopack_require__("[externals]/querystring [external] (querystring, cjs)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _ondemandentryhandler = __turbopack_require__("[project]/node_modules/next/dist/server/dev/on-demand-entry-handler.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/utils.js [app-rsc] (ecmascript)");
const _utils1 = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/utils.js [app-rsc] (ecmascript)");
const _normalizepathsep = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-path-sep.js [app-rsc] (ecmascript)");
const _buildcontext = __turbopack_require__("[project]/node_modules/next/dist/build/build-context.js [app-rsc] (ecmascript)");
const _pagetypes = __turbopack_require__("[project]/node_modules/next/dist/lib/page-types.js [app-rsc] (ecmascript)");
const _getmodulebuildinfo = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)");
const _nextflightloader = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/index.js [app-rsc] (ecmascript)");
const _isapprouteroute = __turbopack_require__("[project]/node_modules/next/dist/lib/is-app-route-route.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'FlightClientEntryPlugin';
const pluginState = (0, _buildcontext.getProxiedPluginState)({
    // A map to track "action" -> "list of bundles".
    serverActions: {},
    edgeServerActions: {},
    serverActionModules: {},
    edgeServerActionModules: {},
    ssrModules: {},
    edgeSsrModules: {},
    rscModules: {},
    edgeRscModules: {},
    injectedClientEntries: {}
});
function deduplicateCSSImportsForEntry(mergedCSSimports) {
    // If multiple entry module connections are having the same CSS import,
    // we only need to have one module to keep track of that CSS import.
    // It is based on the fact that if a page or a layout is rendered in the
    // given entry, all its parent layouts are always rendered too.
    // This can avoid duplicate CSS imports in the generated CSS manifest,
    // for example, if a page and its parent layout are both using the same
    // CSS import, we only need to have the layout to keep track of that CSS
    // import.
    // To achieve this, we need to first collect all the CSS imports from
    // every connection, and deduplicate them in the order of layers from
    // top to bottom. The implementation can be generally described as:
    // - Sort by number of `/` in the request path (the more `/`, the deeper)
    // - When in the same depth, sort by the filename (template < layout < page and others)
    // Sort the connections as described above.
    const sortedCSSImports = Object.entries(mergedCSSimports).sort((a, b)=>{
        const [aPath] = a;
        const [bPath] = b;
        const aDepth = aPath.split('/').length;
        const bDepth = bPath.split('/').length;
        if (aDepth !== bDepth) {
            return aDepth - bDepth;
        }
        const aName = _path.default.parse(aPath).name;
        const bName = _path.default.parse(bPath).name;
        const indexA = [
            'template',
            'layout'
        ].indexOf(aName);
        const indexB = [
            'template',
            'layout'
        ].indexOf(bName);
        if (indexA === -1) return 1;
        if (indexB === -1) return -1;
        return indexA - indexB;
    });
    const dedupedCSSImports = {};
    const trackedCSSImports = new Set();
    for (const [entryName, cssImports] of sortedCSSImports){
        for (const cssImport of cssImports){
            if (trackedCSSImports.has(cssImport)) continue;
            // Only track CSS imports that are in files that can inherit CSS.
            const filename = _path.default.parse(entryName).name;
            if ([
                'template',
                'layout'
            ].includes(filename)) {
                trackedCSSImports.add(cssImport);
            }
            if (!dedupedCSSImports[entryName]) {
                dedupedCSSImports[entryName] = [];
            }
            dedupedCSSImports[entryName].push(cssImport);
        }
    }
    return dedupedCSSImports;
}
class FlightClientEntryPlugin {
    constructor(options){
        this.dev = options.dev;
        this.appDir = options.appDir;
        this.isEdgeServer = options.isEdgeServer;
        this.assetPrefix = !this.dev && !this.isEdgeServer ? '../' : '';
        this.encryptionKey = options.encryptionKey;
        this.webpackRuntime = this.isEdgeServer ? _constants1.EDGE_RUNTIME_WEBPACK : _constants1.DEFAULT_RUNTIME_WEBPACK;
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, { normalModuleFactory })=>{
            compilation.dependencyFactories.set(_webpack.webpack.dependencies.ModuleDependency, normalModuleFactory);
            compilation.dependencyTemplates.set(_webpack.webpack.dependencies.ModuleDependency, new _webpack.webpack.dependencies.NullDependency.Template());
        });
        compiler.hooks.finishMake.tapPromise(PLUGIN_NAME, (compilation)=>this.createClientEntries(compiler, compilation));
        compiler.hooks.afterCompile.tap(PLUGIN_NAME, (compilation)=>{
            const recordModule = (modId, mod)=>{
                var _mod_resourceResolveData, _mod_resourceResolveData1;
                // Match Resource is undefined unless an import is using the inline match resource syntax
                // https://webpack.js.org/api/loaders/#inline-matchresource
                const modPath = mod.matchResource || ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path);
                const modQuery = ((_mod_resourceResolveData1 = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData1.query) || '';
                // query is already part of mod.resource
                // so it's only necessary to add it for matchResource or mod.resourceResolveData
                const modResource = modPath ? modPath.startsWith(_constants1.BARREL_OPTIMIZATION_PREFIX) ? (0, _utils1.formatBarrelOptimizedResource)(mod.resource, modPath) : modPath + modQuery : mod.resource;
                if (typeof modId !== 'undefined' && modResource) {
                    if (mod.layer === _constants.WEBPACK_LAYERS.reactServerComponents) {
                        const key = _path.default.relative(compiler.context, modResource).replace(/\/next\/dist\/esm\//, '/next/dist/');
                        const moduleInfo = {
                            moduleId: modId,
                            async: compilation.moduleGraph.isAsync(mod)
                        };
                        if (this.isEdgeServer) {
                            pluginState.edgeRscModules[key] = moduleInfo;
                        } else {
                            pluginState.rscModules[key] = moduleInfo;
                        }
                    }
                }
                if (mod.layer !== _constants.WEBPACK_LAYERS.serverSideRendering) {
                    return;
                }
                // Check mod resource to exclude the empty resource module like virtual module created by next-flight-client-entry-loader
                if (typeof modId !== 'undefined' && modResource) {
                    // Note that this isn't that reliable as webpack is still possible to assign
                    // additional queries to make sure there's no conflict even using the `named`
                    // module ID strategy.
                    let ssrNamedModuleId = _path.default.relative(compiler.context, modResource);
                    if (!ssrNamedModuleId.startsWith('.')) {
                        // TODO use getModuleId instead
                        ssrNamedModuleId = `./${(0, _normalizepathsep.normalizePathSep)(ssrNamedModuleId)}`;
                    }
                    const moduleInfo = {
                        moduleId: modId,
                        async: compilation.moduleGraph.isAsync(mod)
                    };
                    if (this.isEdgeServer) {
                        pluginState.edgeSsrModules[ssrNamedModuleId.replace(/\/next\/dist\/esm\//, '/next/dist/')] = moduleInfo;
                    } else {
                        pluginState.ssrModules[ssrNamedModuleId] = moduleInfo;
                    }
                }
            };
            (0, _utils1.traverseModules)(compilation, (mod, _chunk, _chunkGroup, modId)=>{
                if (modId) recordModule(modId, mod);
            });
        });
        compiler.hooks.make.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.processAssets.tapPromise({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH
            }, (assets)=>this.createActionAssets(compilation, assets));
        });
    }
    async createClientEntries(compiler, compilation) {
        const addClientEntryAndSSRModulesList = [];
        const createdSSRDependenciesForEntry = {};
        const addActionEntryList = [];
        const actionMapsPerEntry = {};
        const createdActionIds = new Set();
        // For each SC server compilation entry, we need to create its corresponding
        // client component entry.
        (0, _utils1.forEachEntryModule)(compilation, ({ name, entryModule })=>{
            const internalClientComponentEntryImports = {};
            const actionEntryImports = new Map();
            const clientEntriesToInject = [];
            const mergedCSSimports = {};
            for (const connection of (0, _utils1.getModuleReferencesInOrder)(entryModule, compilation.moduleGraph)){
                // Entry can be any user defined entry files such as layout, page, error, loading, etc.
                const entryRequest = connection.dependency.request;
                const { clientComponentImports, actionImports, cssImports } = this.collectComponentInfoFromServerEntryDependency({
                    entryRequest,
                    compilation,
                    resolvedModule: connection.resolvedModule
                });
                actionImports.forEach(([dep, actions])=>actionEntryImports.set(dep, actions));
                const isAbsoluteRequest = _path.default.isAbsolute(entryRequest);
                // Next.js internals are put into a separate entry.
                if (!isAbsoluteRequest) {
                    Object.keys(clientComponentImports).forEach((value)=>internalClientComponentEntryImports[value] = new Set());
                    continue;
                }
                // TODO-APP: Enable these lines. This ensures no entrypoint is created for layout/page when there are no client components.
                // Currently disabled because it causes test failures in CI.
                // if (clientImports.length === 0 && actionImports.length === 0) {
                //   continue
                // }
                const relativeRequest = isAbsoluteRequest ? _path.default.relative(compilation.options.context, entryRequest) : entryRequest;
                // Replace file suffix as `.js` will be added.
                const bundlePath = (0, _normalizepathsep.normalizePathSep)(relativeRequest.replace(/\.[^.\\/]+$/, '').replace(/^src[\\/]/, ''));
                Object.assign(mergedCSSimports, cssImports);
                clientEntriesToInject.push({
                    compiler,
                    compilation,
                    entryName: name,
                    clientComponentImports,
                    bundlePath,
                    absolutePagePath: entryRequest
                });
                // The webpack implementation of writing the client reference manifest relies on all entrypoints writing a page.js even when there is no client components in the page.
                // It needs the file in order to write the reference manifest for the path in the `.next/server` folder.
                // TODO-APP: This could be better handled, however Turbopack does not have the same problem as we resolve client components in a single graph.
                if (name === `app${_constants1.UNDERSCORE_NOT_FOUND_ROUTE_ENTRY}` && bundlePath === 'app/not-found') {
                    clientEntriesToInject.push({
                        compiler,
                        compilation,
                        entryName: name,
                        clientComponentImports: {},
                        bundlePath: `app${_constants1.UNDERSCORE_NOT_FOUND_ROUTE_ENTRY}`,
                        absolutePagePath: entryRequest
                    });
                }
            }
            // Make sure CSS imports are deduplicated before injecting the client entry
            // and SSR modules.
            const dedupedCSSImports = deduplicateCSSImportsForEntry(mergedCSSimports);
            for (const clientEntryToInject of clientEntriesToInject){
                const injected = this.injectClientEntryAndSSRModules({
                    ...clientEntryToInject,
                    clientImports: {
                        ...clientEntryToInject.clientComponentImports,
                        ...(dedupedCSSImports[clientEntryToInject.absolutePagePath] || []).reduce((res, curr)=>{
                            res[curr] = new Set();
                            return res;
                        }, {})
                    }
                });
                // Track all created SSR dependencies for each entry from the server layer.
                if (!createdSSRDependenciesForEntry[clientEntryToInject.entryName]) {
                    createdSSRDependenciesForEntry[clientEntryToInject.entryName] = [];
                }
                createdSSRDependenciesForEntry[clientEntryToInject.entryName].push(injected[3]);
                addClientEntryAndSSRModulesList.push(injected);
            }
            if (!(0, _isapprouteroute.isAppRouteRoute)(name)) {
                // Create internal app
                addClientEntryAndSSRModulesList.push(this.injectClientEntryAndSSRModules({
                    compiler,
                    compilation,
                    entryName: name,
                    clientImports: {
                        ...internalClientComponentEntryImports
                    },
                    bundlePath: _constants1.APP_CLIENT_INTERNALS
                }));
            }
            if (actionEntryImports.size > 0) {
                if (!actionMapsPerEntry[name]) {
                    actionMapsPerEntry[name] = new Map();
                }
                actionMapsPerEntry[name] = new Map([
                    ...actionMapsPerEntry[name],
                    ...actionEntryImports
                ]);
            }
        });
        for (const [name, actionEntryImports] of Object.entries(actionMapsPerEntry)){
            addActionEntryList.push(this.injectActionEntry({
                compiler,
                compilation,
                actions: actionEntryImports,
                entryName: name,
                bundlePath: name,
                createdActionIds
            }));
        }
        // Invalidate in development to trigger recompilation
        const invalidator = (0, _ondemandentryhandler.getInvalidator)(compiler.outputPath);
        // Check if any of the entry injections need an invalidation
        if (invalidator && addClientEntryAndSSRModulesList.some(([shouldInvalidate])=>shouldInvalidate === true)) {
            invalidator.invalidate([
                _constants1.COMPILER_NAMES.client
            ]);
        }
        // Client compiler is invalidated before awaiting the compilation of the SSR
        // and RSC client component entries so that the client compiler is running
        // in parallel to the server compiler.
        await Promise.all(addClientEntryAndSSRModulesList.flatMap((addClientEntryAndSSRModules)=>[
                addClientEntryAndSSRModules[1],
                addClientEntryAndSSRModules[2]
            ]));
        // Wait for action entries to be added.
        await Promise.all(addActionEntryList);
        const addedClientActionEntryList = [];
        const actionMapsPerClientEntry = {};
        // We need to create extra action entries that are created from the
        // client layer.
        // Start from each entry's created SSR dependency from our previous step.
        for (const [name, ssrEntryDependencies] of Object.entries(createdSSRDependenciesForEntry)){
            // Collect from all entries, e.g. layout.js, page.js, loading.js, ...
            // add aggregate them.
            const actionEntryImports = this.collectClientActionsFromDependencies({
                compilation,
                dependencies: ssrEntryDependencies
            });
            if (actionEntryImports.size > 0) {
                if (!actionMapsPerClientEntry[name]) {
                    actionMapsPerClientEntry[name] = new Map();
                }
                actionMapsPerClientEntry[name] = new Map([
                    ...actionMapsPerClientEntry[name],
                    ...actionEntryImports
                ]);
            }
        }
        for (const [entryName, actionEntryImports] of Object.entries(actionMapsPerClientEntry)){
            // If an action method is already created in the server layer, we don't
            // need to create it again in the action layer.
            // This is to avoid duplicate action instances and make sure the module
            // state is shared.
            let remainingClientImportedActions = false;
            const remainingActionEntryImports = new Map();
            for (const [dep, actions] of actionEntryImports){
                const remainingActionNames = [];
                for (const action of actions){
                    // `action` is a [id, name] pair.
                    if (!createdActionIds.has(entryName + '@' + action[0])) {
                        remainingActionNames.push(action);
                    }
                }
                if (remainingActionNames.length > 0) {
                    remainingActionEntryImports.set(dep, remainingActionNames);
                    remainingClientImportedActions = true;
                }
            }
            if (remainingClientImportedActions) {
                addedClientActionEntryList.push(this.injectActionEntry({
                    compiler,
                    compilation,
                    actions: remainingActionEntryImports,
                    entryName,
                    bundlePath: entryName,
                    fromClient: true,
                    createdActionIds
                }));
            }
        }
        await Promise.all(addedClientActionEntryList);
    }
    collectClientActionsFromDependencies({ compilation, dependencies }) {
        // action file path -> action names
        const collectedActions = new Map();
        // Keep track of checked modules to avoid infinite loops with recursive imports.
        const visitedModule = new Set();
        const visitedEntry = new Set();
        const collectActions = ({ entryRequest, resolvedModule })=>{
            const collectActionsInDep = (mod)=>{
                if (!mod) return;
                const modResource = getModuleResource(mod);
                if (!modResource) return;
                if (visitedModule.has(modResource)) return;
                visitedModule.add(modResource);
                const actions = (0, _utils.getActionsFromBuildInfo)(mod);
                if (actions) {
                    collectedActions.set(modResource, Object.entries(actions));
                }
                // Collect used exported actions transversely.
                (0, _utils1.getModuleReferencesInOrder)(mod, compilation.moduleGraph).forEach((connection)=>{
                    collectActionsInDep(connection.resolvedModule);
                });
            };
            // Don't traverse the module graph anymore once hitting the action layer.
            if (entryRequest && !entryRequest.includes('next-flight-action-entry-loader')) {
                // Traverse the module graph to find all client components.
                collectActionsInDep(resolvedModule);
            }
        };
        for (const entryDependency of dependencies){
            const ssrEntryModule = compilation.moduleGraph.getResolvedModule(entryDependency);
            for (const connection of (0, _utils1.getModuleReferencesInOrder)(ssrEntryModule, compilation.moduleGraph)){
                const depModule = connection.dependency;
                const request = depModule.request;
                // It is possible that the same entry is added multiple times in the
                // connection graph. We can just skip these to speed up the process.
                if (visitedEntry.has(request)) continue;
                visitedEntry.add(request);
                collectActions({
                    entryRequest: request,
                    resolvedModule: connection.resolvedModule
                });
            }
        }
        return collectedActions;
    }
    collectComponentInfoFromServerEntryDependency({ entryRequest, compilation, resolvedModule }) {
        // Keep track of checked modules to avoid infinite loops with recursive imports.
        const visitedOfClientComponentsTraverse = new Set();
        // Info to collect.
        const clientComponentImports = {};
        const actionImports = [];
        const CSSImports = new Set();
        const filterClientComponents = (mod, importedIdentifiers)=>{
            if (!mod) return;
            const modResource = getModuleResource(mod);
            if (!modResource) return;
            if (visitedOfClientComponentsTraverse.has(modResource)) {
                if (clientComponentImports[modResource]) {
                    addClientImport(mod, modResource, clientComponentImports, importedIdentifiers, false);
                }
                return;
            }
            visitedOfClientComponentsTraverse.add(modResource);
            const actions = (0, _utils.getActionsFromBuildInfo)(mod);
            if (actions) {
                actionImports.push([
                    modResource,
                    Object.entries(actions)
                ]);
            }
            if ((0, _utils.isCSSMod)(mod)) {
                const sideEffectFree = mod.factoryMeta && mod.factoryMeta.sideEffectFree;
                if (sideEffectFree) {
                    const unused = !compilation.moduleGraph.getExportsInfo(mod).isModuleUsed(this.webpackRuntime);
                    if (unused) return;
                }
                CSSImports.add(modResource);
            } else if ((0, _utils.isClientComponentEntryModule)(mod)) {
                if (!clientComponentImports[modResource]) {
                    clientComponentImports[modResource] = new Set();
                }
                addClientImport(mod, modResource, clientComponentImports, importedIdentifiers, true);
                return;
            }
            (0, _utils1.getModuleReferencesInOrder)(mod, compilation.moduleGraph).forEach((connection)=>{
                var _connection_dependency;
                let dependencyIds = [];
                // `ids` are the identifiers that are imported from the dependency,
                // if it's present, it's an array of strings.
                if ((_connection_dependency = connection.dependency) == null ? void 0 : _connection_dependency.ids) {
                    dependencyIds.push(...connection.dependency.ids);
                } else {
                    dependencyIds = [
                        '*'
                    ];
                }
                filterClientComponents(connection.resolvedModule, dependencyIds);
            });
        };
        // Traverse the module graph to find all client components.
        filterClientComponents(resolvedModule, []);
        return {
            clientComponentImports,
            cssImports: CSSImports.size ? {
                [entryRequest]: Array.from(CSSImports)
            } : {},
            actionImports
        };
    }
    injectClientEntryAndSSRModules({ compiler, compilation, entryName, clientImports, bundlePath, absolutePagePath }) {
        let shouldInvalidate = false;
        const modules = Object.keys(clientImports).sort((a, b)=>_utils.regexCSS.test(b) ? 1 : a.localeCompare(b)).map((clientImportPath)=>({
                request: clientImportPath,
                ids: [
                    ...clientImports[clientImportPath]
                ]
            }));
        // For the client entry, we always use the CJS build of Next.js. If the
        // server is using the ESM build (when using the Edge runtime), we need to
        // replace them.
        const clientBrowserLoader = `next-flight-client-entry-loader?${(0, _querystring.stringify)({
            modules: (this.isEdgeServer ? modules.map(({ request, ids })=>({
                    request: request.replace(/[\\/]next[\\/]dist[\\/]esm[\\/]/, '/next/dist/'.replace(/\//g, _path.default.sep)),
                    ids
                })) : modules).map((x)=>JSON.stringify(x)),
            server: false
        })}!`;
        const clientServerLoader = `next-flight-client-entry-loader?${(0, _querystring.stringify)({
            modules: modules.map((x)=>JSON.stringify(x)),
            server: true
        })}!`;
        // Add for the client compilation
        // Inject the entry to the client compiler.
        if (this.dev) {
            const entries = (0, _ondemandentryhandler.getEntries)(compiler.outputPath);
            const pageKey = (0, _ondemandentryhandler.getEntryKey)(_constants1.COMPILER_NAMES.client, _pagetypes.PAGE_TYPES.APP, bundlePath);
            if (!entries[pageKey]) {
                entries[pageKey] = {
                    type: _ondemandentryhandler.EntryTypes.CHILD_ENTRY,
                    parentEntries: new Set([
                        entryName
                    ]),
                    absoluteEntryFilePath: absolutePagePath,
                    bundlePath,
                    request: clientBrowserLoader,
                    dispose: false,
                    lastActiveTime: Date.now()
                };
                shouldInvalidate = true;
            } else {
                const entryData = entries[pageKey];
                // New version of the client loader
                if (entryData.request !== clientBrowserLoader) {
                    entryData.request = clientBrowserLoader;
                    shouldInvalidate = true;
                }
                if (entryData.type === _ondemandentryhandler.EntryTypes.CHILD_ENTRY) {
                    entryData.parentEntries.add(entryName);
                }
                entryData.dispose = false;
                entryData.lastActiveTime = Date.now();
            }
        } else {
            pluginState.injectedClientEntries[bundlePath] = clientBrowserLoader;
        }
        const clientComponentSSREntryDep = _webpack.webpack.EntryPlugin.createDependency(clientServerLoader, {
            name: bundlePath
        });
        const clientComponentRSCEntryDep = _webpack.webpack.EntryPlugin.createDependency(clientServerLoader, {
            name: bundlePath
        });
        return [
            shouldInvalidate,
            // Add the entries to the server compiler for the SSR and RSC layers. The
            // promises are awaited later using `Promise.all` in order to parallelize
            // adding the entries.
            this.addEntry(compilation, compiler.context, clientComponentSSREntryDep, {
                name: entryName,
                layer: _constants.WEBPACK_LAYERS.serverSideRendering
            }),
            this.addEntry(compilation, compiler.context, clientComponentRSCEntryDep, {
                name: entryName,
                layer: _constants.WEBPACK_LAYERS.reactServerComponents
            }),
            clientComponentSSREntryDep
        ];
    }
    injectActionEntry({ compiler, compilation, actions, entryName, bundlePath, fromClient, createdActionIds }) {
        const actionsArray = Array.from(actions.entries());
        for (const [, actionsFromModule] of actions){
            for (const [id] of actionsFromModule){
                createdActionIds.add(entryName + '@' + id);
            }
        }
        if (actionsArray.length === 0) {
            return Promise.resolve();
        }
        const actionLoader = `next-flight-action-entry-loader?${(0, _querystring.stringify)({
            actions: JSON.stringify(actionsArray),
            __client_imported__: fromClient
        })}!`;
        const currentCompilerServerActions = this.isEdgeServer ? pluginState.edgeServerActions : pluginState.serverActions;
        for (const [, actionsFromModule] of actionsArray){
            for (const [id] of actionsFromModule){
                if (typeof currentCompilerServerActions[id] === 'undefined') {
                    currentCompilerServerActions[id] = {
                        workers: {},
                        layer: {}
                    };
                }
                currentCompilerServerActions[id].workers[bundlePath] = {
                    moduleId: '',
                    async: false
                };
                currentCompilerServerActions[id].layer[bundlePath] = fromClient ? _constants.WEBPACK_LAYERS.actionBrowser : _constants.WEBPACK_LAYERS.reactServerComponents;
            }
        }
        // Inject the entry to the server compiler
        const actionEntryDep = _webpack.webpack.EntryPlugin.createDependency(actionLoader, {
            name: bundlePath
        });
        return this.addEntry(compilation, compiler.context, actionEntryDep, {
            name: entryName,
            layer: fromClient ? _constants.WEBPACK_LAYERS.actionBrowser : _constants.WEBPACK_LAYERS.reactServerComponents
        });
    }
    addEntry(compilation, context, dependency, options) /* Promise<module> */ {
        return new Promise((resolve, reject)=>{
            const entry = compilation.entries.get(options.name);
            entry.includeDependencies.push(dependency);
            compilation.hooks.addEntry.call(entry, options);
            compilation.addModuleTree({
                context,
                dependency,
                contextInfo: {
                    issuerLayer: options.layer
                }
            }, (err, module)=>{
                if (err) {
                    compilation.hooks.failedEntry.call(dependency, options, err);
                    return reject(err);
                }
                compilation.hooks.succeedEntry.call(dependency, options, module);
                compilation.moduleGraph.getExportsInfo(module).setUsedInUnknownWay(this.isEdgeServer ? _constants1.EDGE_RUNTIME_WEBPACK : _constants1.DEFAULT_RUNTIME_WEBPACK);
                return resolve(module);
            });
        });
    }
    async createActionAssets(compilation, assets) {
        const serverActions = {};
        const edgeServerActions = {};
        (0, _utils1.traverseModules)(compilation, (mod, _chunk, chunkGroup, modId)=>{
            // Go through all action entries and record the module ID for each entry.
            if (chunkGroup.name && mod.request && modId && /next-flight-action-entry-loader/.test(mod.request)) {
                const fromClient = /&__client_imported__=true/.test(mod.request);
                const mapping = this.isEdgeServer ? pluginState.edgeServerActionModules : pluginState.serverActionModules;
                if (!mapping[chunkGroup.name]) {
                    mapping[chunkGroup.name] = {};
                }
                mapping[chunkGroup.name][fromClient ? 'client' : 'server'] = {
                    moduleId: modId,
                    async: compilation.moduleGraph.isAsync(mod)
                };
            }
        });
        for(let id in pluginState.serverActions){
            const action = pluginState.serverActions[id];
            for(let name in action.workers){
                const modId = pluginState.serverActionModules[name][action.layer[name] === _constants.WEBPACK_LAYERS.actionBrowser ? 'client' : 'server'];
                action.workers[name] = modId;
            }
            serverActions[id] = action;
        }
        for(let id in pluginState.edgeServerActions){
            const action = pluginState.edgeServerActions[id];
            for(let name in action.workers){
                const modId = pluginState.edgeServerActionModules[name][action.layer[name] === _constants.WEBPACK_LAYERS.actionBrowser ? 'client' : 'server'];
                action.workers[name] = modId;
            }
            edgeServerActions[id] = action;
        }
        const serverManifest = {
            node: serverActions,
            edge: edgeServerActions,
            encryptionKey: this.encryptionKey
        };
        const edgeServerManifest = {
            ...serverManifest,
            encryptionKey: 'process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY'
        };
        const json = JSON.stringify(serverManifest, null, this.dev ? 2 : undefined);
        const edgeJson = JSON.stringify(edgeServerManifest, null, this.dev ? 2 : undefined);
        assets[`${this.assetPrefix}${_constants1.SERVER_REFERENCE_MANIFEST}.js`] = new _webpack.sources.RawSource(`self.__RSC_SERVER_MANIFEST=${JSON.stringify(edgeJson)}`);
        assets[`${this.assetPrefix}${_constants1.SERVER_REFERENCE_MANIFEST}.json`] = new _webpack.sources.RawSource(json);
    }
}
function addClientImport(mod, modRequest, clientComponentImports, importedIdentifiers, isFirstVisitModule) {
    var _getModuleBuildInfo_rsc;
    const clientEntryType = (_getModuleBuildInfo_rsc = (0, _getmodulebuildinfo.getModuleBuildInfo)(mod).rsc) == null ? void 0 : _getModuleBuildInfo_rsc.clientEntryType;
    const isCjsModule = clientEntryType === 'cjs';
    const assumedSourceType = (0, _nextflightloader.getAssumedSourceType)(mod, isCjsModule ? 'commonjs' : 'auto');
    const clientImportsSet = clientComponentImports[modRequest];
    if (importedIdentifiers[0] === '*') {
        // If there's collected import path with named import identifiers,
        // or there's nothing in collected imports are empty.
        // we should include the whole module.
        if (!isFirstVisitModule && [
            ...clientImportsSet
        ][0] !== '*') {
            clientComponentImports[modRequest] = new Set([
                '*'
            ]);
        }
    } else {
        const isAutoModuleSourceType = assumedSourceType === 'auto';
        if (isAutoModuleSourceType) {
            clientComponentImports[modRequest] = new Set([
                '*'
            ]);
        } else {
            // If it's not analyzed as named ESM exports, e.g. if it's mixing `export *` with named exports,
            // We'll include all modules since it's not able to do tree-shaking.
            for (const name of importedIdentifiers){
                // For cjs module default import, we include the whole module since
                const isCjsDefaultImport = isCjsModule && name === 'default';
                // Always include __esModule along with cjs module default export,
                // to make sure it work with client module proxy from React.
                if (isCjsDefaultImport) {
                    clientComponentImports[modRequest].add('__esModule');
                }
                clientComponentImports[modRequest].add(name);
            }
        }
    }
}
function getModuleResource(mod) {
    var _mod_resourceResolveData, _mod_resourceResolveData1, _mod_matchResource;
    const modPath = ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path) || '';
    const modQuery = ((_mod_resourceResolveData1 = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData1.query) || '';
    // We have to always use the resolved request here to make sure the
    // server and client are using the same module path (required by RSC), as
    // the server compiler and client compiler have different resolve configs.
    let modResource = modPath + modQuery;
    // Context modules don't have a resource path, we use the identifier instead.
    if (mod.constructor.name === 'ContextModule') {
        modResource = mod.identifier();
    }
    // For the barrel optimization, we need to use the match resource instead
    // because there will be 2 modules for the same file (same resource path)
    // but they're different modules and can't be deduped via `visitedModule`.
    // The first module is a virtual re-export module created by the loader.
    if ((_mod_matchResource = mod.matchResource) == null ? void 0 : _mod_matchResource.startsWith(_constants1.BARREL_OPTIMIZATION_PREFIX)) {
        modResource = mod.matchResource + ':' + modResource;
    }
    return modResource;
} //# sourceMappingURL=flight-client-entry-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/next-types-plugin/shared.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// TODO: Eliminate this singleton in the future.
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "devPageFiles", {
    enumerable: true,
    get: function() {
        return devPageFiles;
    }
});
const devPageFiles = new Set(); //# sourceMappingURL=shared.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/next-types-plugin/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NextTypesPlugin", {
    enumerable: true,
    get: function() {
        return NextTypesPlugin;
    }
});
const _promises = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/fs/promises [external] (fs/promises, cjs)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _pathtoregexp = __turbopack_require__("[project]/node_modules/next/dist/compiled/path-to-regexp/index.js [app-rsc] (ecmascript)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _denormalizepagepath = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js [app-rsc] (ecmascript)");
const _ensureleadingslash = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/ensure-leading-slash.js [app-rsc] (ecmascript)");
const _normalizepathsep = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-path-sep.js [app-rsc] (ecmascript)");
const _http = __turbopack_require__("[project]/node_modules/next/dist/server/web/http.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/index.js [app-rsc] (ecmascript)");
const _apppaths = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/app-paths.js [app-rsc] (ecmascript)");
const _entries = __turbopack_require__("[project]/node_modules/next/dist/build/entries.js [app-rsc] (ecmascript)");
const _shared = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/next-types-plugin/shared.js [app-rsc] (ecmascript)");
const _buildcontext = __turbopack_require__("[project]/node_modules/next/dist/build/build-context.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'NextTypesPlugin';
function createTypeGuardFile(fullPath, relativePath, options) {
    return `// File: ${fullPath}
import * as entry from '${relativePath}.js'
${options.type === 'route' ? `import type { NextRequest } from 'next/server.js'` : `import type { ResolvingMetadata, ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'`}

type TEntry = typeof import('${relativePath}.js')

type SegmentParams<T extends Object = any> = T extends Record<string, any>
  ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }
  : T

// Check that the entry is a valid entry
checkFields<Diff<{
  ${options.type === 'route' ? _http.HTTP_METHODS.map((method)=>`${method}?: Function`).join('\n  ') : 'default: Function'}
  config?: {}
  generateStaticParams?: Function
  revalidate?: RevalidateRange<TEntry> | false
  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'
  dynamicParams?: boolean
  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'
  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]
  runtime?: 'nodejs' | 'experimental-edge' | 'edge'
  maxDuration?: number
  ${options.type === 'route' ? '' : `
  metadata?: any
  generateMetadata?: Function
  viewport?: any
  generateViewport?: Function
  experimental_ppr?: boolean
  `}
}, TEntry, ''>>()

${options.type === 'route' ? `type RouteContext = { params: Promise<SegmentParams> }` : ''}
${options.type === 'route' ? _http.HTTP_METHODS.map((method)=>`// Check the prop type of the entry function
if ('${method}' in entry) {
  checkFields<
    Diff<
      ParamCheck<Request | NextRequest>,
      {
        __tag__: '${method}'
        __param_position__: 'first'
        __param_type__: FirstArg<MaybeField<TEntry, '${method}'>>
      },
      '${method}'
    >
  >()
  checkFields<
    Diff<
      ParamCheck<RouteContext>,
      {
        __tag__: '${method}'
        __param_position__: 'second'
        __param_type__: SecondArg<MaybeField<TEntry, '${method}'>>
      },
      '${method}'
    >
  >()
  ${''}
  checkFields<
    Diff<
      {
        __tag__: '${method}',
        __return_type__: Response | void | never | Promise<Response | void | never>
      },
      {
        __tag__: '${method}',
        __return_type__: ReturnType<MaybeField<TEntry, '${method}'>>
      },
      '${method}'
    >
  >()
}
`).join('') : `// Check the prop type of the entry function
checkFields<Diff<${options.type === 'page' ? 'PageProps' : 'LayoutProps'}, FirstArg<TEntry['default']>, 'default'>>()

// Check the arguments and return type of the generateMetadata function
if ('generateMetadata' in entry) {
  checkFields<Diff<${options.type === 'page' ? 'PageProps' : 'LayoutProps'}, FirstArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()
  checkFields<Diff<ResolvingMetadata, SecondArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()
}

// Check the arguments and return type of the generateViewport function
if ('generateViewport' in entry) {
  checkFields<Diff<${options.type === 'page' ? 'PageProps' : 'LayoutProps'}, FirstArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()
  checkFields<Diff<ResolvingViewport, SecondArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()
}
`}
// Check the arguments and return type of the generateStaticParams function
if ('generateStaticParams' in entry) {
  checkFields<Diff<{ params: SegmentParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()
  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()
}

export interface PageProps {
  params?: Promise<SegmentParams>
  searchParams?: Promise<any>
}
export interface LayoutProps {
  children?: React.ReactNode
${options.slots ? options.slots.map((slot)=>`  ${slot}: React.ReactNode`).join('\n') : ''}
  params?: Promise<SegmentParams>
}

// =============
// Utility types
type RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never

// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.
type OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>
type Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>

type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never

${options.type === 'route' ? `type ParamCheck<T> = {
  __tag__: string
  __param_position__: string
  __param_type__: T
}` : ''}

function checkFields<_ extends { [k in keyof any]: never }>() {}

// https://github.com/sindresorhus/type-fest
type Numeric = number | bigint
type Zero = 0 | 0n
type Negative<T extends Numeric> = T extends Zero ? never : \`\${T}\` extends \`-\${string}\` ? T : never
type NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'
`;
}
async function collectNamedSlots(layoutPath) {
    const layoutDir = _path.default.dirname(layoutPath);
    const items = await _promises.default.readdir(layoutDir, {
        withFileTypes: true
    });
    const slots = [];
    for (const item of items){
        if (item.isDirectory() && item.name.startsWith('@') && // `@children slots are matched to the children prop, and should not be handled separately for type-checking
        item.name !== '@children') {
            slots.push(item.name.slice(1));
        }
    }
    return slots;
}
// By exposing the static route types separately as string literals,
// editors can provide autocompletion for them. However it's currently not
// possible to provide the same experience for dynamic routes.
const pluginState = (0, _buildcontext.getProxiedPluginState)({
    routeTypes: {
        edge: {
            static: '',
            dynamic: ''
        },
        node: {
            static: '',
            dynamic: ''
        },
        extra: {
            static: '',
            dynamic: ''
        }
    }
});
function formatRouteToRouteType(route) {
    const isDynamic = (0, _utils.isDynamicRoute)(route);
    if (isDynamic) {
        route = route.split('/').map((part)=>{
            if (part.startsWith('[') && part.endsWith(']')) {
                if (part.startsWith('[...')) {
                    // /[...slug]
                    return `\${CatchAllSlug<T>}`;
                } else if (part.startsWith('[[...') && part.endsWith(']]')) {
                    // /[[...slug]]
                    return `\${OptionalCatchAllSlug<T>}`;
                }
                // /[slug]
                return `\${SafeSlug<T>}`;
            }
            return part;
        }).join('/');
    }
    return {
        isDynamic,
        routeType: `\n    | \`${route}\``
    };
}
// Whether redirects and rewrites have been converted into routeTypes or not.
let redirectsRewritesTypesProcessed = false;
// Convert redirects and rewrites into routeTypes.
function addRedirectsRewritesRouteTypes(rewrites, redirects) {
    function addExtraRoute(source) {
        let tokens;
        try {
            tokens = (0, _pathtoregexp.parse)(source);
        } catch  {
        // Ignore invalid routes - they will be handled by other checks.
        }
        if (Array.isArray(tokens)) {
            const possibleNormalizedRoutes = [
                ''
            ];
            let slugCnt = 1;
            function append(suffix) {
                for(let i = 0; i < possibleNormalizedRoutes.length; i++){
                    possibleNormalizedRoutes[i] += suffix;
                }
            }
            function fork(suffix) {
                const currentLength = possibleNormalizedRoutes.length;
                for(let i = 0; i < currentLength; i++){
                    possibleNormalizedRoutes.push(possibleNormalizedRoutes[i] + suffix);
                }
            }
            for (const token of tokens){
                if (typeof token === 'object') {
                    // Make sure the slug is always named.
                    const slug = token.name || (slugCnt++ === 1 ? 'slug' : `slug${slugCnt}`);
                    if (token.modifier === '*') {
                        append(`${token.prefix}[[...${slug}]]`);
                    } else if (token.modifier === '+') {
                        append(`${token.prefix}[...${slug}]`);
                    } else if (token.modifier === '') {
                        if (token.pattern === '[^\\/#\\?]+?') {
                            // A safe slug
                            append(`${token.prefix}[${slug}]`);
                        } else if (token.pattern === '.*') {
                            // An optional catch-all slug
                            append(`${token.prefix}[[...${slug}]]`);
                        } else if (token.pattern === '.+') {
                            // A catch-all slug
                            append(`${token.prefix}[...${slug}]`);
                        } else {
                            // Other regex patterns are not supported. Skip this route.
                            return;
                        }
                    } else if (token.modifier === '?') {
                        if (/^[a-zA-Z0-9_/]*$/.test(token.pattern)) {
                            // An optional slug with plain text only, fork the route.
                            append(token.prefix);
                            fork(token.pattern);
                        } else {
                            // Optional modifier `?` and regex patterns are not supported.
                            return;
                        }
                    }
                } else if (typeof token === 'string') {
                    append(token);
                }
            }
            for (const normalizedRoute of possibleNormalizedRoutes){
                const { isDynamic, routeType } = formatRouteToRouteType(normalizedRoute);
                pluginState.routeTypes.extra[isDynamic ? 'dynamic' : 'static'] += routeType;
            }
        }
    }
    if (rewrites) {
        for (const rewrite of rewrites.beforeFiles){
            addExtraRoute(rewrite.source);
        }
        for (const rewrite of rewrites.afterFiles){
            addExtraRoute(rewrite.source);
        }
        for (const rewrite of rewrites.fallback){
            addExtraRoute(rewrite.source);
        }
    }
    if (redirects) {
        for (const redirect of redirects){
            // Skip internal redirects
            // https://github.com/vercel/next.js/blob/8ff3d7ff57836c24088474175d595b4d50b3f857/packages/next/src/lib/load-custom-routes.ts#L704-L710
            if (!('internal' in redirect)) {
                addExtraRoute(redirect.source);
            }
        }
    }
}
function createRouteDefinitions() {
    let staticRouteTypes = '';
    let dynamicRouteTypes = '';
    for (const type of [
        'edge',
        'node',
        'extra'
    ]){
        staticRouteTypes += pluginState.routeTypes[type].static;
        dynamicRouteTypes += pluginState.routeTypes[type].dynamic;
    }
    // If both StaticRoutes and DynamicRoutes are empty, fallback to type 'string'.
    const routeTypesFallback = !staticRouteTypes && !dynamicRouteTypes ? 'string' : '';
    return `// Type definitions for Next.js routes

/**
 * Internal types used by the Next.js router and Link component.
 * These types are not meant to be used directly.
 * @internal
 */
declare namespace __next_route_internal_types__ {
  type SearchOrHash = \`?\${string}\` | \`#\${string}\`
  type WithProtocol = \`\${string}:\${string}\`

  type Suffix = '' | SearchOrHash

  type SafeSlug<S extends string> = S extends \`\${string}/\${string}\`
    ? never
    : S extends \`\${string}\${SearchOrHash}\`
    ? never
    : S extends ''
    ? never
    : S

  type CatchAllSlug<S extends string> = S extends \`\${string}\${SearchOrHash}\`
    ? never
    : S extends ''
    ? never
    : S

  type OptionalCatchAllSlug<S extends string> =
    S extends \`\${string}\${SearchOrHash}\` ? never : S

  type StaticRoutes = ${staticRouteTypes || 'never'}
  type DynamicRoutes<T extends string = string> = ${dynamicRouteTypes || 'never'}

  type RouteImpl<T> = ${routeTypesFallback || `
    ${'| StaticRoutes'}
    | SearchOrHash
    | WithProtocol
    | \`\${StaticRoutes}\${SearchOrHash}\`
    | (T extends \`\${DynamicRoutes<infer _>}\${Suffix}\` ? T : never)
    `}
}

declare module 'next' {
  export { default } from 'next/types.js'
  export * from 'next/types.js'

  export type Route<T extends string = string> =
    __next_route_internal_types__.RouteImpl<T>
}

declare module 'next/link' {
  import type { LinkProps as OriginalLinkProps } from 'next/dist/client/link.js'
  import type { AnchorHTMLAttributes, DetailedHTMLProps } from 'react'
  import type { UrlObject } from 'url'

  type LinkRestProps = Omit<
    Omit<
      DetailedHTMLProps<
        AnchorHTMLAttributes<HTMLAnchorElement>,
        HTMLAnchorElement
      >,
      keyof OriginalLinkProps
    > &
      OriginalLinkProps,
    'href'
  >

  export type LinkProps<RouteInferType> = LinkRestProps & {
    /**
     * The path or URL to navigate to. This is the only required prop. It can also be an object.
     * @see https://nextjs.org/docs/api-reference/next/link
     */
    href: __next_route_internal_types__.RouteImpl<RouteInferType> | UrlObject
  }

  export default function Link<RouteType>(props: LinkProps<RouteType>): JSX.Element
}

declare module 'next/navigation' {
  export * from 'next/dist/client/components/navigation.js'

  import type { NavigateOptions, AppRouterInstance as OriginalAppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime.js'
  interface AppRouterInstance extends OriginalAppRouterInstance {
    /**
     * Navigate to the provided href.
     * Pushes a new history entry.
     */
    push<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>, options?: NavigateOptions): void
    /**
     * Navigate to the provided href.
     * Replaces the current history entry.
     */
    replace<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>, options?: NavigateOptions): void
    /**
     * Prefetch the provided href.
     */
    prefetch<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>): void
  }

  export function useRouter(): AppRouterInstance;
}

declare module 'next/form' {
  import type { FormProps as OriginalFormProps } from 'next/dist/client/form.js'

  type FormRestProps = Omit<OriginalFormProps, 'action'>

  export type FormProps<RouteInferType> = {
    /**
     * \`action\` can be either a \`string\` or a function.
     * - If \`action\` is a string, it will be interpreted as a path or URL to navigate to when the form is submitted.
     *   The path will be prefetched when the form becomes visible.
     * - If \`action\` is a function, it will be called when the form is submitted. See the [React docs](https://react.dev/reference/react-dom/components/form#props) for more.
     */
    action: __next_route_internal_types__.RouteImpl<RouteInferType> | ((formData: FormData) => void)
  } & FormRestProps

  export default function Form<RouteType>(props: FormProps<RouteType>): JSX.Element
}
`;
}
function formatTimespan(seconds) {
    if (seconds > 0) {
        if (seconds === 18748800) {
            return '1 month';
        }
        if (seconds === 18144000) {
            return '1 month';
        }
        if (seconds === 604800) {
            return '1 week';
        }
        if (seconds === 86400) {
            return '1 day';
        }
        if (seconds === 3600) {
            return '1 hour';
        }
        if (seconds === 60) {
            return '1 minute';
        }
        if (seconds % 18748800 === 0) {
            return seconds / 18748800 + ' months';
        }
        if (seconds % 18144000 === 0) {
            return seconds / 18144000 + ' months';
        }
        if (seconds % 604800 === 0) {
            return seconds / 604800 + ' weeks';
        }
        if (seconds % 86400 === 0) {
            return seconds / 86400 + ' days';
        }
        if (seconds % 3600 === 0) {
            return seconds / 3600 + ' hours';
        }
        if (seconds % 60 === 0) {
            return seconds / 60 + ' minutes';
        }
    }
    return seconds + ' seconds';
}
function formatTimespanWithSeconds(seconds) {
    if (seconds === undefined) {
        return 'default';
    }
    if (seconds >= 0xfffffffe) {
        return 'never';
    }
    const text = seconds + ' seconds';
    const descriptive = formatTimespan(seconds);
    if (descriptive === text) {
        return text;
    }
    return text + ' (' + descriptive + ')';
}
function createCustomCacheLifeDefinitions(cacheLife) {
    let overloads = '';
    const profileNames = Object.keys(cacheLife);
    for(let i = 0; i < profileNames.length; i++){
        const profileName = profileNames[i];
        const profile = cacheLife[profileName];
        if (typeof profile !== 'object' || profile === null) {
            continue;
        }
        let description = '';
        if (profile.stale === undefined) {
            description += `
     * This cache may be stale on clients for the default stale time of the scope before checking with the server.`;
        } else if (profile.stale >= 0xfffffffe) {
            description += `
     * This cache may be stale on clients indefinitely before checking with the server.`;
        } else {
            description += `
     * This cache may be stale on clients for ${formatTimespan(profile.stale)} before checking with the server.`;
        }
        if (profile.revalidate !== undefined && profile.expire !== undefined && profile.revalidate >= profile.expire) {
            description += `
     * This cache will expire after ${formatTimespan(profile.expire)}. The next request will recompute it.`;
        } else {
            if (profile.revalidate === undefined) {
                description += `
     * It will inherit the default revalidate time of its scope since it does not define its own.`;
            } else if (profile.revalidate >= 0xfffffffe) {
            // Nothing to mention.
            } else {
                description += `
     * If the server receives a new request after ${formatTimespan(profile.revalidate)}, start revalidating new values in the background.`;
            }
            if (profile.expire === undefined) {
                description += `
     * It will inherit the default expiration time of its scope since it does not define its own.`;
            } else if (profile.expire >= 0xfffffffe) {
                description += `
     * It lives for the maximum age of the server cache. If this entry has no traffic for a while, it may serve an old value the next request.`;
            } else {
                description += `
     * If this entry has no traffic for ${formatTimespan(profile.expire)} it will expire. The next request will recompute it.`;
            }
        }
        overloads += `
    /**
     * Cache this \`"use cache"\` for a timespan defined by the \`${JSON.stringify(profileName)}\` profile.
     * \`\`\`
     *   stale:      ${formatTimespanWithSeconds(profile.stale)}
     *   revalidate: ${formatTimespanWithSeconds(profile.revalidate)}
     *   expire:     ${formatTimespanWithSeconds(profile.expire)}
     * \`\`\`
     * ${description}
     */
    export function unstable_cacheLife(profile: ${JSON.stringify(profileName)}): void
    `;
    }
    overloads += `
    /**
     * Cache this \`"use cache"\` using a custom timespan.
     * \`\`\`
     *   stale: ... // seconds 
     *   revalidate: ... // seconds
     *   expire: ... // seconds
     * \`\`\`
     * 
     * This is similar to Cache-Control: max-age=\`stale\`,s-max-age=\`revalidate\`,stale-while-revalidate=\`expire-revalidate\`
     * 
     * If a value is left out, the lowest of other cacheLife() calls or the default, is used instead.
     */
    export function unstable_cacheLife(profile: {
      /**
       * This cache may be stale on clients for ... seconds before checking with the server.
       */
      stale?: number,
      /**
       * If the server receives a new request after ... seconds, start revalidating new values in the background.
       */
      revalidate?: number,
      /**
       * If this entry has no traffic for ... seconds it will expire. The next request will recompute it.
       */
      expire?: number
    }): void
  `;
    // Redefine the cacheLife() accepted arguments.
    return `// Type definitions for Next.js cacheLife configs

declare module 'next/cache' {
  export { unstable_cache } from 'next/dist/server/web/spec-extension/unstable-cache'
  export {
    revalidateTag,
    revalidatePath,
    unstable_expireTag,
    unstable_expirePath,
  } from 'next/dist/server/web/spec-extension/revalidate'
  export { unstable_noStore } from 'next/dist/server/web/spec-extension/unstable-no-store'

  ${overloads}

  export { cacheTag as unstable_cacheTag } from 'next/dist/server/use-cache/cache-tag'
}
`;
}
const appTypesBasePath = _path.default.join('types', 'app');
class NextTypesPlugin {
    constructor(options){
        this.dir = options.dir;
        this.distDir = options.distDir;
        this.appDir = options.appDir;
        this.dev = options.dev;
        this.isEdgeServer = options.isEdgeServer;
        this.pageExtensions = options.pageExtensions;
        this.pagesDir = _path.default.join(this.appDir, '..', 'pages');
        this.typedRoutes = options.typedRoutes;
        this.cacheLifeConfig = options.cacheLifeConfig;
        this.distDirAbsolutePath = _path.default.join(this.dir, this.distDir);
        if (this.typedRoutes && !redirectsRewritesTypesProcessed) {
            redirectsRewritesTypesProcessed = true;
            addRedirectsRewritesRouteTypes(options.originalRewrites, options.originalRedirects);
        }
    }
    getRelativePathFromAppTypesDir(moduleRelativePathToAppDir) {
        const moduleAbsolutePath = _path.default.join(this.appDir, moduleRelativePathToAppDir);
        const moduleInAppTypesAbsolutePath = _path.default.join(this.distDirAbsolutePath, appTypesBasePath, moduleRelativePathToAppDir);
        return _path.default.relative(moduleInAppTypesAbsolutePath + '/..', moduleAbsolutePath);
    }
    collectPage(filePath) {
        if (!this.typedRoutes) return;
        const isApp = filePath.startsWith(this.appDir + _path.default.sep);
        const isPages = !isApp && filePath.startsWith(this.pagesDir + _path.default.sep);
        if (!isApp && !isPages) {
            return;
        }
        // Filter out non-page and non-route files in app dir
        if (isApp && !/[/\\](?:page|route)\.[^.]+$/.test(filePath)) {
            return;
        }
        // Filter out non-page files in pages dir
        if (isPages && /[/\\](?:_app|_document|_error|404|500)\.[^.]+$/.test(filePath)) {
            return;
        }
        let route = (isApp ? _apppaths.normalizeAppPath : _denormalizepagepath.denormalizePagePath)((0, _ensureleadingslash.ensureLeadingSlash)((0, _entries.getPageFromPath)(_path.default.relative(isApp ? this.appDir : this.pagesDir, filePath), this.pageExtensions)));
        const { isDynamic, routeType } = formatRouteToRouteType(route);
        pluginState.routeTypes[this.isEdgeServer ? 'edge' : 'node'][isDynamic ? 'dynamic' : 'static'] += routeType;
    }
    apply(compiler) {
        // From asset root to dist root
        const assetDirRelative = this.dev ? '..' : this.isEdgeServer ? '..' : '../..';
        const handleModule = async (mod, assets)=>{
            if (!mod.resource) return;
            const pageExtensionsRegex = new RegExp(`\\.(${this.pageExtensions.join('|')})$`);
            if (!pageExtensionsRegex.test(mod.resource)) return;
            if (!mod.resource.startsWith(this.appDir + _path.default.sep)) {
                if (!this.dev) {
                    if (mod.resource.startsWith(this.pagesDir + _path.default.sep)) {
                        this.collectPage(mod.resource);
                    }
                }
                return;
            }
            if (mod.layer !== _constants.WEBPACK_LAYERS.reactServerComponents) return;
            // skip for /app/_private dir convention
            // matches <app-dir>/**/_*
            const IS_PRIVATE = /(?:\/[^/]+)*\/_.*$/.test(mod.resource.replace(this.appDir, ''));
            if (IS_PRIVATE) return;
            const IS_LAYOUT = /[/\\]layout\.[^./\\]+$/.test(mod.resource);
            const IS_PAGE = !IS_LAYOUT && /[/\\]page\.[^.]+$/.test(mod.resource);
            const IS_ROUTE = !IS_PAGE && /[/\\]route\.[^.]+$/.test(mod.resource);
            const IS_IMPORTABLE = /\.(js|jsx|ts|tsx|mjs|cjs)$/.test(mod.resource);
            const relativePathToApp = _path.default.relative(this.appDir, mod.resource);
            if (!this.dev) {
                if (IS_PAGE || IS_ROUTE) {
                    this.collectPage(mod.resource);
                }
            }
            const typePath = _path.default.join(appTypesBasePath, relativePathToApp.replace(pageExtensionsRegex, '.ts'));
            const relativeImportPath = (0, _normalizepathsep.normalizePathSep)(_path.default.join(this.getRelativePathFromAppTypesDir(relativePathToApp)).replace(pageExtensionsRegex, ''));
            const assetPath = _path.default.join(assetDirRelative, typePath);
            // Typescript won’t allow relative-importing (for example) a .mdx file using the .js extension
            // so for now we only generate “type guard files” for files that typescript can transform
            if (!IS_IMPORTABLE) return;
            if (IS_LAYOUT) {
                const slots = await collectNamedSlots(mod.resource);
                assets[assetPath] = new _webpack.sources.RawSource(createTypeGuardFile(mod.resource, relativeImportPath, {
                    type: 'layout',
                    slots
                }));
            } else if (IS_PAGE) {
                assets[assetPath] = new _webpack.sources.RawSource(createTypeGuardFile(mod.resource, relativeImportPath, {
                    type: 'page'
                }));
            } else if (IS_ROUTE) {
                assets[assetPath] = new _webpack.sources.RawSource(createTypeGuardFile(mod.resource, relativeImportPath, {
                    type: 'route'
                }));
            }
        };
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.processAssets.tapAsync({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH
            }, async (assets, callback)=>{
                const promises = [];
                // Clear routes
                if (this.isEdgeServer) {
                    pluginState.routeTypes.edge.dynamic = '';
                    pluginState.routeTypes.edge.static = '';
                } else {
                    pluginState.routeTypes.node.dynamic = '';
                    pluginState.routeTypes.node.static = '';
                }
                compilation.chunkGroups.forEach((chunkGroup)=>{
                    chunkGroup.chunks.forEach((chunk)=>{
                        if (!chunk.name) return;
                        // Here we only track page and route chunks.
                        if (!chunk.name.startsWith('pages/') && !(chunk.name.startsWith('app/') && (chunk.name.endsWith('/page') || chunk.name.endsWith('/route')))) {
                            return;
                        }
                        const chunkModules = compilation.chunkGraph.getChunkModulesIterable(chunk);
                        for (const mod of chunkModules){
                            promises.push(handleModule(mod, assets));
                            // If this is a concatenation, register each child to the parent ID.
                            const anyModule = mod;
                            if (anyModule.modules) {
                                anyModule.modules.forEach((concatenatedMod)=>{
                                    promises.push(handleModule(concatenatedMod, assets));
                                });
                            }
                        }
                    });
                });
                await Promise.all(promises);
                // Support `"moduleResolution": "Node16" | "NodeNext"` with `"type": "module"`
                const packageJsonAssetPath = _path.default.join(assetDirRelative, 'types/package.json');
                assets[packageJsonAssetPath] = new _webpack.sources.RawSource('{"type": "module"}');
                if (this.typedRoutes) {
                    if (this.dev && !this.isEdgeServer) {
                        _shared.devPageFiles.forEach((file)=>{
                            this.collectPage(file);
                        });
                    }
                    const linkAssetPath = _path.default.join(assetDirRelative, 'types/link.d.ts');
                    assets[linkAssetPath] = new _webpack.sources.RawSource(createRouteDefinitions());
                }
                if (this.cacheLifeConfig) {
                    const cacheLifeAssetPath = _path.default.join(assetDirRelative, 'types/cache-life.d.ts');
                    assets[cacheLifeAssetPath] = new _webpack.sources.RawSource(createCustomCacheLifeDefinitions(this.cacheLifeConfig));
                }
                callback();
            });
        });
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/app-build-manifest-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AppBuildManifestPlugin", {
    enumerable: true,
    get: function() {
        return AppBuildManifestPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _buildmanifestplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/build-manifest-plugin.js [app-rsc] (ecmascript)");
const _getapproutefromentrypoint = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/server/get-app-route-from-entrypoint.js [app-rsc] (ecmascript)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'AppBuildManifestPlugin';
class AppBuildManifestPlugin {
    constructor(options){
        this.dev = options.dev;
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, { normalModuleFactory })=>{
            compilation.dependencyFactories.set(_webpack.webpack.dependencies.ModuleDependency, normalModuleFactory);
            compilation.dependencyTemplates.set(_webpack.webpack.dependencies.ModuleDependency, new _webpack.webpack.dependencies.NullDependency.Template());
        });
        compiler.hooks.make.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.processAssets.tap({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, (assets)=>this.createAsset(assets, compilation));
        });
    }
    createAsset(assets, compilation) {
        const manifest = {
            pages: {}
        };
        const mainFiles = new Set((0, _buildmanifestplugin.getEntrypointFiles)(compilation.entrypoints.get(_constants.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP)));
        for (const entrypoint of compilation.entrypoints.values()){
            if (!entrypoint.name) {
                continue;
            }
            if (_constants.SYSTEM_ENTRYPOINTS.has(entrypoint.name)) {
                continue;
            }
            const pagePath = (0, _getapproutefromentrypoint.default)(entrypoint.name);
            if (!pagePath) {
                continue;
            }
            const filesForPage = (0, _buildmanifestplugin.getEntrypointFiles)(entrypoint);
            manifest.pages[pagePath] = [
                ...new Set([
                    ...mainFiles,
                    ...filesForPage
                ])
            ];
        }
        const json = JSON.stringify(manifest, null, 2);
        assets[_constants.APP_BUILD_MANIFEST] = new _webpack.sources.RawSource(json);
    }
} //# sourceMappingURL=app-build-manifest-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SubresourceIntegrityPlugin", {
    enumerable: true,
    get: function() {
        return SubresourceIntegrityPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _crypto = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/crypto [external] (crypto, cjs)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'SubresourceIntegrityPlugin';
class SubresourceIntegrityPlugin {
    constructor(algorithm){
        this.algorithm = algorithm;
    }
    apply(compiler) {
        compiler.hooks.make.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.afterOptimizeAssets.tap({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, (assets)=>{
                // Collect all the assets.
                let files = new Set();
                for (const asset of compilation.getAssets()){
                    files.add(asset.name);
                }
                // For each file, deduped, calculate the file hash.
                const hashes = {};
                for (const file of files.values()){
                    // Get the buffer for the asset.
                    const asset = assets[file];
                    if (!asset) {
                        throw new Error(`could not get asset: ${file}`);
                    }
                    // Get the buffer for the asset.
                    const buffer = asset.buffer();
                    // Create the hash for the content.
                    const hash = _crypto.default.createHash(this.algorithm).update(buffer).digest().toString('base64');
                    hashes[file] = `${this.algorithm}-${hash}`;
                }
                const json = JSON.stringify(hashes, null, 2);
                const file = 'server/' + _constants.SUBRESOURCE_INTEGRITY_MANIFEST;
                assets[file + '.js'] = new _webpack.sources.RawSource(`self.__SUBRESOURCE_INTEGRITY_MANIFEST=${JSON.stringify(json)}`);
                assets[file + '.json'] = new _webpack.sources.RawSource(json);
            });
        });
    }
} //# sourceMappingURL=subresource-integrity-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NextFontManifestPlugin", {
    enumerable: true,
    get: function() {
        return NextFontManifestPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _getroutefromentrypoint = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/server/get-route-from-entrypoint.js [app-rsc] (ecmascript)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/utils.js [app-rsc] (ecmascript)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'NextFontManifestPlugin';
/**
 * When calling font functions with next/font, you can specify if you'd like the font to be preloaded (true by default).
 * e.g.: const inter = Inter({ subsets: ['latin'], preload: true })
 *
 * In that case, next-font-loader will emit the font file as [name].p.[ext] instead of [name].[ext]
 * This function returns those files from an array that can include both preloaded and non-preloaded files.
 */ function getPreloadedFontFiles(fontFiles) {
    return fontFiles.filter((file)=>/\.p\.(woff|woff2|eot|ttf|otf)$/.test(file));
}
/**
 * Similarly to getPreloadedFontFiles, but returns true if some of the files includes -s in the name.
 * This means that a font is using size adjust in its fallback font.
 * This was added to enable adding data-size-adjust="true" to the dom, used by the Google Aurora team to collect statistics.
 */ function getPageIsUsingSizeAdjust(fontFiles) {
    return fontFiles.some((file)=>file.includes('-s'));
}
class NextFontManifestPlugin {
    constructor(options){
        this.appDir = options.appDir;
    }
    apply(compiler) {
        compiler.hooks.make.tap(PLUGIN_NAME, (compilation)=>{
            // In this stage the font files are emitted and we can collect all files emitted by each chunkGroup (entry).
            compilation.hooks.processAssets.tap({
                name: PLUGIN_NAME,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
            }, (assets)=>{
                const nextFontManifest = {
                    pages: {},
                    app: {},
                    appUsingSizeAdjust: false,
                    pagesUsingSizeAdjust: false
                };
                if (this.appDir) {
                    const appDirBase = _path.default.dirname(this.appDir) + _path.default.sep;
                    // After all modules are created, we collect the modules that was created by next-font-loader.
                    (0, _utils.traverseModules)(compilation, (mod, _chunk, chunkGroup)=>{
                        var _mod_request;
                        if (mod == null ? void 0 : (_mod_request = mod.request) == null ? void 0 : _mod_request.includes('/next-font-loader/index.js?')) {
                            var _mod_buildInfo;
                            if (!((_mod_buildInfo = mod.buildInfo) == null ? void 0 : _mod_buildInfo.assets)) return;
                            const chunkEntryName = (appDirBase + chunkGroup.name).replace(/[\\/]/g, _path.default.sep);
                            const modAssets = Object.keys(mod.buildInfo.assets);
                            const fontFiles = modAssets.filter((file)=>/\.(woff|woff2|eot|ttf|otf)$/.test(file));
                            // Look if size-adjust fallback font is being used
                            if (!nextFontManifest.appUsingSizeAdjust) {
                                nextFontManifest.appUsingSizeAdjust = getPageIsUsingSizeAdjust(fontFiles);
                            }
                            const preloadedFontFiles = getPreloadedFontFiles(fontFiles);
                            // Add an entry of the module's font files in the manifest.
                            // We'll add an entry even if no files should preload.
                            // When an entry is present but empty, instead of preloading the font files, a preconnect tag is added.
                            if (fontFiles.length > 0) {
                                if (!nextFontManifest.app[chunkEntryName]) {
                                    nextFontManifest.app[chunkEntryName] = [];
                                }
                                nextFontManifest.app[chunkEntryName].push(...preloadedFontFiles);
                            }
                        }
                    }, (chunkGroup)=>{
                        var _chunkGroup_name;
                        // Only loop through entrypoints that are under app/.
                        return !!((_chunkGroup_name = chunkGroup.name) == null ? void 0 : _chunkGroup_name.startsWith('app/'));
                    });
                }
                // Look at all the entrypoints created for pages/.
                for (const entrypoint of compilation.entrypoints.values()){
                    const pagePath = (0, _getroutefromentrypoint.default)(entrypoint.name);
                    if (!pagePath) {
                        continue;
                    }
                    // Get font files from the chunks included in the entrypoint.
                    const fontFiles = entrypoint.chunks.flatMap((chunk)=>[
                            ...chunk.auxiliaryFiles
                        ]).filter((file)=>/\.(woff|woff2|eot|ttf|otf)$/.test(file));
                    // Look if size-adjust fallback font is being used
                    if (!nextFontManifest.pagesUsingSizeAdjust) {
                        nextFontManifest.pagesUsingSizeAdjust = getPageIsUsingSizeAdjust(fontFiles);
                    }
                    const preloadedFontFiles = getPreloadedFontFiles(fontFiles);
                    // Add an entry of the route's font files in the manifest.
                    // We'll add an entry even if no files should preload.
                    // When an entry is present but empty, instead of preloading the font files, a preconnect tag is added.
                    if (fontFiles.length > 0) {
                        nextFontManifest.pages[pagePath] = preloadedFontFiles;
                    }
                }
                const manifest = JSON.stringify(nextFontManifest, null);
                // Create manifest for edge
                assets[`server/${_constants.NEXT_FONT_MANIFEST}.js`] = new _webpack.sources.RawSource(`self.__NEXT_FONT_MANIFEST=${JSON.stringify(manifest)}`);
                // Create manifest for server
                assets[`server/${_constants.NEXT_FONT_MANIFEST}.json`] = new _webpack.sources.RawSource(manifest);
            });
        });
        return;
    }
} //# sourceMappingURL=next-font-manifest-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/memory-with-gc-cache-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*
This plugin is based on the internal one in webpack but heavily modified to use a different caching heuristic.
https://github.com/webpack/webpack/blob/853bfda35a0080605c09e1bdeb0103bcb9367a10/lib/cache/MemoryWithGcCachePlugin.js#L15

https://github.com/webpack/webpack/blob/main/LICENSE
Copyright JS Foundation and other contributors

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/ /*
The change in this plugin compared to the built-in one in webpack is that this plugin always cleans up after 5 compilations.
The built-in plugin only cleans up "total modules / max generations".
The default for max generations is 5, so 1/5th of the modules would be marked for deletion.
This plugin instead always checks the cache and decreases the time to live of all entries. That way memory is cleaned up earlier.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MemoryWithGcCachePlugin", {
    enumerable: true,
    get: function() {
        return MemoryWithGcCachePlugin;
    }
});
// Used to hook into the memory stage of the webpack caching
const CACHE_STAGE_MEMORY = -10 // TODO: Somehow webpack.Cache.STAGE_MEMORY doesn't work.
;
const PLUGIN_NAME = 'NextJsMemoryWithGcCachePlugin';
class MemoryWithGcCachePlugin {
    constructor({ maxGenerations }){
        this.maxGenerations = maxGenerations;
    }
    apply(compiler) {
        const maxGenerations = this.maxGenerations;
        /**
     * The memory cache
     */ const cache = new Map();
        /**
     * Cache cleanup implementation
     */ function decreaseTTLAndEvict() {
            for (const [identifier, entry] of cache){
                // Decrease item time to live
                entry.ttl--;
                // if ttl is 0 or below, evict entry from the cache
                if (entry.ttl <= 0) {
                    cache.delete(identifier);
                }
            }
        }
        compiler.hooks.afterDone.tap(PLUGIN_NAME, decreaseTTLAndEvict);
        compiler.cache.hooks.store.tap({
            name: PLUGIN_NAME,
            stage: CACHE_STAGE_MEMORY
        }, (identifier, etag, data)=>{
            cache.set(identifier, {
                etag,
                data,
                ttl: maxGenerations
            });
        });
        compiler.cache.hooks.get.tap({
            name: PLUGIN_NAME,
            stage: CACHE_STAGE_MEMORY
        }, (identifier, etag, gotHandlers)=>{
            const cacheEntry = cache.get(identifier);
            // Item found
            if (cacheEntry !== undefined) {
                // When cache entry is hit we reset the counter.
                cacheEntry.ttl = maxGenerations;
                // Handles `null` separately as it doesn't have an etag.
                if (cacheEntry.data === null) {
                    return null;
                }
                return cacheEntry.etag === etag ? cacheEntry.data : null;
            }
            // Handle case where other cache does have the identifier, puts it into the memory cache
            gotHandlers.push((result, callback)=>{
                cache.set(identifier, {
                    // Handles `null` separately as it doesn't have an etag.
                    etag: result === null ? null : etag,
                    data: result,
                    ttl: maxGenerations
                });
                return callback();
            });
            // No item found
            return undefined;
        });
        compiler.cache.hooks.shutdown.tap({
            name: PLUGIN_NAME,
            stage: CACHE_STAGE_MEMORY
        }, ()=>{
            cache.clear();
        });
    }
} //# sourceMappingURL=memory-with-gc-cache-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/get-babel-config-file.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getBabelConfigFile", {
    enumerable: true,
    get: function() {
        return getBabelConfigFile;
    }
});
const _path = __turbopack_require__("[externals]/path [external] (path, cjs)");
const _fs = __turbopack_require__("[externals]/fs [external] (fs, cjs)");
const BABEL_CONFIG_FILES = [
    '.babelrc',
    '.babelrc.json',
    '.babelrc.js',
    '.babelrc.mjs',
    '.babelrc.cjs',
    'babel.config.js',
    'babel.config.json',
    'babel.config.mjs',
    'babel.config.cjs'
];
function getBabelConfigFile(dir) {
    for (const filename of BABEL_CONFIG_FILES){
        const configFilePath = (0, _path.join)(dir, filename);
        const exists = (0, _fs.existsSync)(configFilePath);
        if (!exists) {
            continue;
        }
        return configFilePath;
    }
} //# sourceMappingURL=get-babel-config-file.js.map
}}),
"[project]/node_modules/next/dist/build/handle-externals.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    isResourceInPackages: null,
    makeExternalHandler: null,
    resolveExternal: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isResourceInPackages: function() {
        return isResourceInPackages;
    },
    makeExternalHandler: function() {
        return makeExternalHandler;
    },
    resolveExternal: function() {
        return resolveExternal;
    }
});
const _requirehook = __turbopack_require__("[project]/node_modules/next/dist/server/require-hook.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/shared/lib/isomorphic/path.js [app-rsc] (ecmascript)"));
const _webpackconfig = __turbopack_require__("[project]/node_modules/next/dist/build/webpack-config.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)");
const _normalizepathsep = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/page-path/normalize-path-sep.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const reactPackagesRegex = /^(react|react-dom|react-server-dom-webpack)($|\/)/;
const pathSeparators = '[/\\\\]';
const optionalEsmPart = `((${pathSeparators}esm)?${pathSeparators})`;
const externalFileEnd = '(\\.external(\\.js)?)$';
const nextDist = `next${pathSeparators}dist`;
const externalPattern = new RegExp(`${nextDist}${optionalEsmPart}.*${externalFileEnd}`);
const nodeModulesRegex = /node_modules[/\\].*\.[mc]?js$/;
function isResourceInPackages(resource, packageNames, packageDirMapping) {
    if (!packageNames) return false;
    return packageNames.some((p)=>packageDirMapping && packageDirMapping.has(p) ? resource.startsWith(packageDirMapping.get(p) + _path.default.sep) : resource.includes(_path.default.sep + _path.default.join('node_modules', p.replace(/\//g, _path.default.sep)) + _path.default.sep));
}
async function resolveExternal(dir, esmExternalsConfig, context, request, isEsmRequested, _optOutBundlingPackages, getResolve, isLocalCallback, baseResolveCheck = true, esmResolveOptions = _webpackconfig.NODE_ESM_RESOLVE_OPTIONS, nodeResolveOptions = _webpackconfig.NODE_RESOLVE_OPTIONS, baseEsmResolveOptions = _webpackconfig.NODE_BASE_ESM_RESOLVE_OPTIONS, baseResolveOptions = _webpackconfig.NODE_BASE_RESOLVE_OPTIONS) {
    const esmExternals = !!esmExternalsConfig;
    const looseEsmExternals = esmExternalsConfig === 'loose';
    let res = null;
    let isEsm = false;
    const preferEsmOptions = esmExternals && isEsmRequested ? [
        true,
        false
    ] : [
        false
    ];
    for (const preferEsm of preferEsmOptions){
        const resolveOptions = preferEsm ? esmResolveOptions : nodeResolveOptions;
        const resolve = getResolve(resolveOptions);
        // Resolve the import with the webpack provided context, this
        // ensures we're resolving the correct version when multiple
        // exist.
        try {
            ;
            [res, isEsm] = await resolve(context, request);
        } catch (err) {
            res = null;
        }
        if (!res) {
            continue;
        }
        // ESM externals can only be imported (and not required).
        // Make an exception in loose mode.
        if (!isEsmRequested && isEsm && !looseEsmExternals) {
            continue;
        }
        if (isLocalCallback) {
            return {
                localRes: isLocalCallback(res)
            };
        }
        // Bundled Node.js code is relocated without its node_modules tree.
        // This means we need to make sure its request resolves to the same
        // package that'll be available at runtime. If it's not identical,
        // we need to bundle the code (even if it _should_ be external).
        if (baseResolveCheck) {
            let baseRes;
            let baseIsEsm;
            try {
                const baseResolve = getResolve(isEsm ? baseEsmResolveOptions : baseResolveOptions);
                [baseRes, baseIsEsm] = await baseResolve(dir, request);
            } catch (err) {
                baseRes = null;
                baseIsEsm = false;
            }
            // Same as above: if the package, when required from the root,
            // would be different from what the real resolution would use, we
            // cannot externalize it.
            // if request is pointing to a symlink it could point to the same file,
            // the resolver will resolve symlinks so this is handled
            if (baseRes !== res || isEsm !== baseIsEsm) {
                res = null;
                continue;
            }
        }
        break;
    }
    return {
        res,
        isEsm
    };
}
function makeExternalHandler({ config, optOutBundlingPackages, optOutBundlingPackageRegex, transpiledPackages, dir }) {
    var _config_experimental;
    let resolvedExternalPackageDirs;
    const looseEsmExternals = ((_config_experimental = config.experimental) == null ? void 0 : _config_experimental.esmExternals) === 'loose';
    return async function handleExternals(context, request, dependencyType, layer, getResolve) {
        // We need to externalize internal requests for files intended to
        // not be bundled.
        const isLocal = request.startsWith('.') || // Always check for unix-style path, as webpack sometimes
        // normalizes as posix.
        _path.default.posix.isAbsolute(request) || // When on Windows, we also want to check for Windows-specific
        // absolute paths.
        process.platform === 'win32' && _path.default.win32.isAbsolute(request);
        // make sure import "next" shows a warning when imported
        // in pages/components
        if (request === 'next') {
            return `commonjs next/dist/lib/import-next-warning`;
        }
        const isAppLayer = (0, _utils.isWebpackBundledLayer)(layer);
        // Relative requires don't need custom resolution, because they
        // are relative to requests we've already resolved here.
        // Absolute requires (require('/foo')) are extremely uncommon, but
        // also have no need for customization as they're already resolved.
        if (!isLocal) {
            if (/^next$/.test(request)) {
                return `commonjs ${request}`;
            }
            if (reactPackagesRegex.test(request) && !isAppLayer) {
                return `commonjs ${request}`;
            }
            const notExternalModules = /^(?:private-next-pages\/|next\/(?:dist\/pages\/|(?:app|document|link|form|image|legacy\/image|constants|dynamic|script|navigation|headers|router)$)|string-hash|private-next-rsc-action-validate|private-next-rsc-action-client-wrapper|private-next-rsc-server-reference|private-next-rsc-cache-wrapper$)/;
            if (notExternalModules.test(request)) {
                return;
            }
        }
        // @swc/helpers should not be external as it would
        // require hoisting the package which we can't rely on
        if (request.includes('@swc/helpers')) {
            return;
        }
        // BARREL_OPTIMIZATION_PREFIX is a special marker that tells Next.js to
        // optimize the import by removing unused exports. This has to be compiled.
        if (request.startsWith(_constants.BARREL_OPTIMIZATION_PREFIX)) {
            return;
        }
        // When in esm externals mode, and using import, we resolve with
        // ESM resolving options.
        // Also disable esm request when appDir is enabled
        const isEsmRequested = dependencyType === 'esm';
        // Don't bundle @vercel/og nodejs bundle for nodejs runtime.
        // TODO-APP: bundle route.js with different layer that externals common node_module deps.
        // Make sure @vercel/og is loaded as ESM for Node.js runtime
        if ((0, _utils.isWebpackServerOnlyLayer)(layer) && request === 'next/dist/compiled/@vercel/og/index.node.js') {
            return `module ${request}`;
        }
        // Specific Next.js imports that should remain external
        // TODO-APP: Investigate if we can remove this.
        if (request.startsWith('next/dist/')) {
            // Non external that needs to be transpiled
            // Image loader needs to be transpiled
            if (/^next[\\/]dist[\\/]shared[\\/]lib[\\/]image-loader/.test(request)) {
                return;
            }
            if (/^next[\\/]dist[\\/]compiled[\\/]next-server/.test(request)) {
                return `commonjs ${request}`;
            }
            if (/^next[\\/]dist[\\/]shared[\\/](?!lib[\\/]router[\\/]router)/.test(request) || /^next[\\/]dist[\\/]compiled[\\/].*\.c?js$/.test(request)) {
                return `commonjs ${request}`;
            }
            if (/^next[\\/]dist[\\/]esm[\\/]shared[\\/](?!lib[\\/]router[\\/]router)/.test(request) || /^next[\\/]dist[\\/]compiled[\\/].*\.mjs$/.test(request)) {
                return `module ${request}`;
            }
            return resolveNextExternal(request);
        }
        // TODO-APP: Let's avoid this resolve call as much as possible, and eventually get rid of it.
        const resolveResult = await resolveExternal(dir, config.experimental.esmExternals, context, request, isEsmRequested, optOutBundlingPackages, getResolve, isLocal ? resolveNextExternal : undefined);
        if ('localRes' in resolveResult) {
            return resolveResult.localRes;
        }
        // Forcedly resolve the styled-jsx installed by next.js,
        // since `resolveExternal` cannot find the styled-jsx dep with pnpm
        if (request === 'styled-jsx/style') {
            resolveResult.res = _requirehook.defaultOverrides['styled-jsx/style'];
        }
        const { res, isEsm } = resolveResult;
        // If the request cannot be resolved we need to have
        // webpack "bundle" it so it surfaces the not found error.
        if (!res) {
            return;
        }
        const isOptOutBundling = optOutBundlingPackageRegex.test(res);
        // Apply bundling rules to all app layers.
        // Since handleExternals only handle the server layers, we don't need to exclude client here
        if (!isOptOutBundling && isAppLayer) {
            return;
        }
        // ESM externals can only be imported (and not required).
        // Make an exception in loose mode.
        if (!isEsmRequested && isEsm && !looseEsmExternals && !isLocal) {
            throw new Error(`ESM packages (${request}) need to be imported. Use 'import' to reference the package instead. https://nextjs.org/docs/messages/import-esm-externals`);
        }
        const externalType = isEsm ? 'module' : 'commonjs';
        // Default pages have to be transpiled
        if (/node_modules[/\\]@babel[/\\]runtime[/\\]/.test(res)) {
            return;
        }
        // Webpack itself has to be compiled because it doesn't always use module relative paths
        if (/node_modules[/\\]webpack/.test(res) || /node_modules[/\\]css-loader/.test(res)) {
            return;
        }
        // If a package should be transpiled by Next.js, we skip making it external.
        // It doesn't matter what the extension is, as we'll transpile it anyway.
        if (transpiledPackages && !resolvedExternalPackageDirs) {
            resolvedExternalPackageDirs = new Map();
            // We need to resolve all the external package dirs initially.
            for (const pkg of transpiledPackages){
                const pkgRes = await resolveExternal(dir, config.experimental.esmExternals, context, pkg + '/package.json', isEsmRequested, optOutBundlingPackages, getResolve, isLocal ? resolveNextExternal : undefined);
                if (pkgRes.res) {
                    resolvedExternalPackageDirs.set(pkg, _path.default.dirname(pkgRes.res));
                }
            }
        }
        const resolvedBundlingOptOutRes = resolveBundlingOptOutPackages({
            resolvedRes: res,
            config,
            resolvedExternalPackageDirs,
            isAppLayer,
            externalType,
            isOptOutBundling,
            request,
            transpiledPackages
        });
        if (resolvedBundlingOptOutRes) {
            return resolvedBundlingOptOutRes;
        }
        // if here, we default to bundling the file
        return;
    };
}
function resolveBundlingOptOutPackages({ resolvedRes, config, resolvedExternalPackageDirs, isAppLayer, externalType, isOptOutBundling, request, transpiledPackages }) {
    if (nodeModulesRegex.test(resolvedRes)) {
        const shouldBundlePages = !isAppLayer && config.bundlePagesRouterDependencies && !isOptOutBundling;
        const shouldBeBundled = shouldBundlePages || isResourceInPackages(resolvedRes, transpiledPackages, resolvedExternalPackageDirs);
        if (!shouldBeBundled) {
            return `${externalType} ${request}` // Externalize if not bundled or opted out
            ;
        }
    }
}
/**
 * @param localRes the full path to the file
 * @returns the externalized path
 * @description returns an externalized path if the file is a Next.js file and ends with either `.shared-runtime.js` or `.external.js`
 * This is used to ensure that files used across the rendering runtime(s) and the user code are one and the same. The logic in this function
 * will rewrite the require to the correct bundle location depending on the layer at which the file is being used.
 */ function resolveNextExternal(localRes) {
    const isExternal = externalPattern.test(localRes);
    // if the file ends with .external, we need to make it a commonjs require in all cases
    // this is used mainly to share the async local storage across the routing, rendering and user layers.
    if (isExternal) {
        // it's important we return the path that starts with `next/dist/` here instead of the absolute path
        // otherwise NFT will get tripped up
        return `commonjs ${(0, _normalizepathsep.normalizePathSep)(localRes.replace(/.*?next[/\\]dist/, 'next/dist'))}`;
    }
} //# sourceMappingURL=handle-externals.js.map
}}),
"[project]/node_modules/next/dist/build/webpack-config-rules/resolve.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    edgeConditionNames: null,
    getMainField: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    edgeConditionNames: function() {
        return edgeConditionNames;
    },
    getMainField: function() {
        return getMainField;
    }
});
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const edgeConditionNames = [
    'edge-light',
    // inherits the default conditions
    '...'
];
const mainFieldsPerCompiler = {
    // For default case, prefer CJS over ESM on server side. e.g. pages dir SSR
    [_constants.COMPILER_NAMES.server]: [
        'main',
        'module'
    ],
    [_constants.COMPILER_NAMES.client]: [
        'browser',
        'module',
        'main'
    ],
    // For bundling-all strategy, prefer ESM over CJS
    'server-esm': [
        'module',
        'main'
    ]
};
function getMainField(compilerType, preferEsm) {
    if (compilerType === _constants.COMPILER_NAMES.edgeServer) {
        return edgeConditionNames;
    } else if (compilerType === _constants.COMPILER_NAMES.client) {
        return mainFieldsPerCompiler[_constants.COMPILER_NAMES.client];
    }
    // Prefer module fields over main fields for isomorphic packages on server layer
    return preferEsm ? mainFieldsPerCompiler['server-esm'] : mainFieldsPerCompiler[_constants.COMPILER_NAMES.server];
} //# sourceMappingURL=resolve.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/optional-peer-dependency-resolve-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "OptionalPeerDependencyResolverPlugin", {
    enumerable: true,
    get: function() {
        return OptionalPeerDependencyResolverPlugin;
    }
});
const pluginSymbol = Symbol('OptionalPeerDependencyResolverPlugin');
class OptionalPeerDependencyResolverPlugin {
    apply(resolver) {
        const target = resolver.ensureHook('raw-module');
        target.tapAsync('OptionalPeerDependencyResolverPlugin', (request, resolveContext, callback)=>{
            var _resolveContext_stack;
            // if we've already recursed into this plugin, we want to skip it
            if (request[pluginSymbol]) {
                return callback();
            }
            (_resolveContext_stack = resolveContext.stack) == null ? void 0 : _resolveContext_stack.delete(Array.from(resolveContext.stack).pop());
            resolver.doResolve(target, // recurse into this plugin again
            {
                ...request,
                [pluginSymbol]: true
            }, null, resolveContext, (err, result)=>{
                var _request_descriptionFileData;
                if (!result && (request == null ? void 0 : (_request_descriptionFileData = request.descriptionFileData) == null ? void 0 : _request_descriptionFileData.peerDependenciesMeta) && request.request) {
                    const peerDependenciesMeta = request.descriptionFileData.peerDependenciesMeta;
                    const isOptional = peerDependenciesMeta && peerDependenciesMeta[request.request] && peerDependenciesMeta[request.request].optional;
                    if (isOptional) {
                        return callback(null, {
                            path: false
                        });
                    }
                }
                return callback(err, result);
            });
        });
    }
} //# sourceMappingURL=optional-peer-dependency-resolve-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/next-dir-paths.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    NEXT_PROJECT_ROOT: null,
    NEXT_PROJECT_ROOT_DIST: null,
    NEXT_PROJECT_ROOT_DIST_CLIENT: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NEXT_PROJECT_ROOT: function() {
        return NEXT_PROJECT_ROOT;
    },
    NEXT_PROJECT_ROOT_DIST: function() {
        return NEXT_PROJECT_ROOT_DIST;
    },
    NEXT_PROJECT_ROOT_DIST_CLIENT: function() {
        return NEXT_PROJECT_ROOT_DIST_CLIENT;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const NEXT_PROJECT_ROOT = _path.default.join(__dirname, '..', '..');
const NEXT_PROJECT_ROOT_DIST = _path.default.join(NEXT_PROJECT_ROOT, 'dist');
const NEXT_PROJECT_ROOT_DIST_CLIENT = _path.default.join(NEXT_PROJECT_ROOT_DIST, 'client'); //# sourceMappingURL=next-dir-paths.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/fetch/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* globals self */ "use strict";
const fetchModule = self.fetch.bind(self);
module.exports = fetchModule;
module.exports.default = module.exports; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/fetch/whatwg-fetch.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* globals self */ "use strict";
exports.Headers = self.Headers;
exports.Request = self.Request;
exports.Response = self.Response;
exports.fetch = self.fetch; //# sourceMappingURL=whatwg-fetch.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/object-assign.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var assign = Object.assign.bind(Object);
module.exports = assign;
module.exports.default = module.exports; //# sourceMappingURL=object-assign.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/object.assign/auto.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// noop
"use strict"; //# sourceMappingURL=auto.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/object.assign/implementation.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
module.exports = Object.assign; //# sourceMappingURL=implementation.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/object.assign/polyfill.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
module.exports = function() {
    return Object.assign;
}; //# sourceMappingURL=polyfill.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/object.assign/shim.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
module.exports = function() {
    return Object.assign;
}; //# sourceMappingURL=shim.js.map
}}),
"[project]/node_modules/next/dist/build/create-compiler-aliases.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    createAppRouterApiAliases: null,
    createNextApiEsmAliases: null,
    createRSCAliases: null,
    createServerOnlyClientOnlyAliases: null,
    createWebpackAliases: null,
    getOptimizedModuleAliases: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createAppRouterApiAliases: function() {
        return createAppRouterApiAliases;
    },
    createNextApiEsmAliases: function() {
        return createNextApiEsmAliases;
    },
    createRSCAliases: function() {
        return createRSCAliases;
    },
    createServerOnlyClientOnlyAliases: function() {
        return createServerOnlyClientOnlyAliases;
    },
    createWebpackAliases: function() {
        return createWebpackAliases;
    },
    getOptimizedModuleAliases: function() {
        return getOptimizedModuleAliases;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _react = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)"));
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _requirehook = __turbopack_require__("[project]/node_modules/next/dist/server/require-hook.js [app-rsc] (ecmascript)");
const _webpackconfig = __turbopack_require__("[project]/node_modules/next/dist/build/webpack-config.js [app-rsc] (ecmascript)");
const _nextdirpaths = __turbopack_require__("[project]/node_modules/next/dist/build/next-dir-paths.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const isReact19 = typeof _react.use === 'function';
function createWebpackAliases({ distDir, isClient, isEdgeServer, isNodeServer, dev, config, pagesDir, appDir, dir, reactProductionProfiling, hasRewrites }) {
    const pageExtensions = config.pageExtensions;
    const clientResolveRewrites = "[project]/node_modules/next/dist/shared/lib/router/utils/resolve-rewrites.js [app-rsc] (ecmascript)";
    const customAppAliases = {};
    const customDocumentAliases = {};
    // tell webpack where to look for _app and _document
    // using aliases to allow falling back to the default
    // version when removed or not present
    if (dev) {
        const nextDistPath = 'next/dist/' + (isEdgeServer ? 'esm/' : '');
        customAppAliases[`${_constants.PAGES_DIR_ALIAS}/_app`] = [
            ...pagesDir ? pageExtensions.reduce((prev, ext)=>{
                prev.push(_path.default.join(pagesDir, `_app.${ext}`));
                return prev;
            }, []) : [],
            `${nextDistPath}pages/_app.js`
        ];
        customAppAliases[`${_constants.PAGES_DIR_ALIAS}/_error`] = [
            ...pagesDir ? pageExtensions.reduce((prev, ext)=>{
                prev.push(_path.default.join(pagesDir, `_error.${ext}`));
                return prev;
            }, []) : [],
            `${nextDistPath}pages/_error.js`
        ];
        customDocumentAliases[`${_constants.PAGES_DIR_ALIAS}/_document`] = [
            ...pagesDir ? pageExtensions.reduce((prev, ext)=>{
                prev.push(_path.default.join(pagesDir, `_document.${ext}`));
                return prev;
            }, []) : [],
            `${nextDistPath}pages/_document.js`
        ];
    }
    return {
        '@vercel/og$': 'next/dist/server/og/image-response',
        // Avoid bundling both entrypoints in React 19 when we just need one.
        // Also avoids bundler warnings in React 18 where react-dom/server.edge doesn't exist.
        'next/dist/server/ReactDOMServerPages': isReact19 ? 'react-dom/server.edge' : 'react-dom/server.browser',
        // Alias next/dist imports to next/dist/esm assets,
        // let this alias hit before `next` alias.
        ...isEdgeServer ? {
            'next/dist/api': 'next/dist/esm/api',
            'next/dist/build': 'next/dist/esm/build',
            'next/dist/client': 'next/dist/esm/client',
            'next/dist/shared': 'next/dist/esm/shared',
            'next/dist/pages': 'next/dist/esm/pages',
            'next/dist/lib': 'next/dist/esm/lib',
            'next/dist/server': 'next/dist/esm/server',
            ...createNextApiEsmAliases()
        } : undefined,
        // For RSC server bundle
        ...!(0, _webpackconfig.hasExternalOtelApiPackage)() && {
            '@opentelemetry/api': 'next/dist/compiled/@opentelemetry/api'
        },
        ...config.images.loaderFile ? {
            'next/dist/shared/lib/image-loader': config.images.loaderFile,
            ...isEdgeServer && {
                'next/dist/esm/shared/lib/image-loader': config.images.loaderFile
            }
        } : undefined,
        'styled-jsx/style$': _requirehook.defaultOverrides['styled-jsx/style'],
        'styled-jsx$': _requirehook.defaultOverrides['styled-jsx'],
        ...customAppAliases,
        ...customDocumentAliases,
        ...pagesDir ? {
            [_constants.PAGES_DIR_ALIAS]: pagesDir
        } : {},
        ...appDir ? {
            [_constants.APP_DIR_ALIAS]: appDir
        } : {},
        [_constants.ROOT_DIR_ALIAS]: dir,
        [_constants.DOT_NEXT_ALIAS]: distDir,
        ...isClient || isEdgeServer ? getOptimizedModuleAliases() : {},
        ...reactProductionProfiling ? getReactProfilingInProduction() : {},
        // For Node server, we need to re-alias the package imports to prefer to
        // resolve to the ESM export.
        ...isNodeServer ? getBarrelOptimizationAliases(config.experimental.optimizePackageImports || []) : {},
        [_constants.RSC_ACTION_VALIDATE_ALIAS]: 'next/dist/build/webpack/loaders/next-flight-loader/action-validate',
        [_constants.RSC_ACTION_CLIENT_WRAPPER_ALIAS]: 'next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper',
        [_constants.RSC_ACTION_PROXY_ALIAS]: 'next/dist/build/webpack/loaders/next-flight-loader/server-reference',
        [_constants.RSC_ACTION_ENCRYPTION_ALIAS]: 'next/dist/server/app-render/encryption',
        [_constants.RSC_CACHE_WRAPPER_ALIAS]: 'next/dist/build/webpack/loaders/next-flight-loader/cache-wrapper',
        ...isClient || isEdgeServer ? {
            [clientResolveRewrites]: hasRewrites ? clientResolveRewrites : false
        } : {},
        '@swc/helpers/_': _path.default.join(_path.default.dirname("[project]/node_modules/@swc/helpers/package.json (json)"), '_'),
        setimmediate: 'next/dist/compiled/setimmediate'
    };
}
function createServerOnlyClientOnlyAliases(isServer) {
    return isServer ? {
        'server-only$': 'next/dist/compiled/server-only/empty',
        'client-only$': 'next/dist/compiled/client-only/error',
        'next/dist/compiled/server-only$': 'next/dist/compiled/server-only/empty',
        'next/dist/compiled/client-only$': 'next/dist/compiled/client-only/error'
    } : {
        'server-only$': 'next/dist/compiled/server-only/index',
        'client-only$': 'next/dist/compiled/client-only/index',
        'next/dist/compiled/client-only$': 'next/dist/compiled/client-only/index',
        'next/dist/compiled/server-only': 'next/dist/compiled/server-only/index'
    };
}
function createNextApiEsmAliases() {
    const mapping = {
        head: 'next/dist/api/head',
        image: 'next/dist/api/image',
        constants: 'next/dist/api/constants',
        router: 'next/dist/api/router',
        dynamic: 'next/dist/api/dynamic',
        script: 'next/dist/api/script',
        link: 'next/dist/api/link',
        form: 'next/dist/api/form',
        navigation: 'next/dist/api/navigation',
        headers: 'next/dist/api/headers',
        og: 'next/dist/api/og',
        server: 'next/dist/api/server',
        // pages api
        document: 'next/dist/api/document',
        app: 'next/dist/api/app'
    };
    const aliasMap = {};
    // Handle fully specified imports like `next/image.js`
    for (const [key, value] of Object.entries(mapping)){
        const nextApiFilePath = _path.default.join(_nextdirpaths.NEXT_PROJECT_ROOT, key);
        aliasMap[nextApiFilePath + '.js'] = value;
    }
    return aliasMap;
}
function createAppRouterApiAliases(isServerOnlyLayer) {
    const mapping = {
        head: 'next/dist/client/components/noop-head',
        dynamic: 'next/dist/api/app-dynamic',
        link: 'next/dist/client/app-dir/link'
    };
    if (isServerOnlyLayer) {
        mapping['navigation'] = 'next/dist/api/navigation.react-server';
    }
    const aliasMap = {};
    for (const [key, value] of Object.entries(mapping)){
        const nextApiFilePath = _path.default.join(_nextdirpaths.NEXT_PROJECT_ROOT, key);
        aliasMap[nextApiFilePath + '.js'] = value;
    }
    return aliasMap;
}
function createRSCAliases(bundledReactChannel, { layer, isEdgeServer, reactProductionProfiling }) {
    const isServerOnlyLayer = (0, _utils.isWebpackServerOnlyLayer)(layer);
    // For middleware, instrumentation layers, treat them as rsc layer.
    // Since we only built the runtime package for rsc, convert everything to rsc
    // to ensure the runtime modules path existed.
    if (isServerOnlyLayer) {
        layer = _constants.WEBPACK_LAYERS.reactServerComponents;
    }
    let alias = {
        react$: `next/dist/compiled/react${bundledReactChannel}`,
        'react-dom$': `next/dist/compiled/react-dom${bundledReactChannel}`,
        'react/jsx-runtime$': `next/dist/compiled/react${bundledReactChannel}/jsx-runtime`,
        'react/jsx-dev-runtime$': `next/dist/compiled/react${bundledReactChannel}/jsx-dev-runtime`,
        'react/compiler-runtime$': `next/dist/compiled/react${bundledReactChannel}/compiler-runtime`,
        'react-dom/client$': `next/dist/compiled/react-dom${bundledReactChannel}/client`,
        'react-dom/server$': `next/dist/compiled/react-dom${bundledReactChannel}/server`,
        'react-dom/server.browser$': `next/dist/compiled/react-dom${bundledReactChannel}/server.browser`,
        'react-dom/static$': `next/dist/compiled/react-dom${bundledReactChannel}/static`,
        'react-dom/static.edge$': `next/dist/compiled/react-dom${bundledReactChannel}/static.edge`,
        'react-dom/static.browser$': `next/dist/compiled/react-dom${bundledReactChannel}/static.browser`,
        // optimizations to ignore the legacy build of react-dom/server in `server.edge` build
        'react-dom/server.edge$': `next/dist/build/webpack/alias/react-dom-server-edge${bundledReactChannel}.js`,
        // react-server-dom-webpack alias
        'react-server-dom-webpack/client$': `next/dist/compiled/react-server-dom-webpack${bundledReactChannel}/client`,
        'react-server-dom-webpack/client.edge$': `next/dist/compiled/react-server-dom-webpack${bundledReactChannel}/client.edge`,
        'react-server-dom-webpack/server.edge$': `next/dist/compiled/react-server-dom-webpack${bundledReactChannel}/server.edge`,
        'react-server-dom-webpack/server.node$': `next/dist/compiled/react-server-dom-webpack${bundledReactChannel}/server.node`,
        'react-server-dom-webpack/static.edge$': `next/dist/compiled/react-server-dom-webpack${bundledReactChannel}/static.edge`
    };
    if (!isEdgeServer) {
        if (layer === _constants.WEBPACK_LAYERS.serverSideRendering) {
            alias = Object.assign(alias, {
                'react/jsx-runtime$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-jsx-runtime`,
                'react/jsx-dev-runtime$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-jsx-dev-runtime`,
                'react/compiler-runtime$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-compiler-runtime`,
                react$: `next/dist/server/route-modules/app-page/vendored/${layer}/react`,
                'react-dom$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-dom`,
                'react-server-dom-webpack/client.edge$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-server-dom-webpack-client-edge`
            });
        } else if (layer === _constants.WEBPACK_LAYERS.reactServerComponents) {
            alias = Object.assign(alias, {
                'react/jsx-runtime$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-jsx-runtime`,
                'react/jsx-dev-runtime$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-jsx-dev-runtime`,
                'react/compiler-runtime$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-compiler-runtime`,
                react$: `next/dist/server/route-modules/app-page/vendored/${layer}/react`,
                'react-dom$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-dom`,
                'react-server-dom-webpack/server.edge$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-server-dom-webpack-server-edge`,
                'react-server-dom-webpack/server.node$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-server-dom-webpack-server-node`,
                'react-server-dom-webpack/static.edge$': `next/dist/server/route-modules/app-page/vendored/${layer}/react-server-dom-webpack-static-edge`
            });
        }
    }
    if (isEdgeServer) {
        if (layer === _constants.WEBPACK_LAYERS.reactServerComponents) {
            alias = Object.assign(alias, {
                react$: `next/dist/compiled/react${bundledReactChannel}/react.react-server`,
                'next/dist/compiled/react$': `next/dist/compiled/react${bundledReactChannel}/react.react-server`,
                'next/dist/compiled/react-experimental$': `next/dist/compiled/react-experimental/react.react-server`,
                'react/jsx-runtime$': `next/dist/compiled/react${bundledReactChannel}/jsx-runtime.react-server`,
                'react/compiler-runtime$': `next/dist/compiled/react${bundledReactChannel}/compiler-runtime`,
                'next/dist/compiled/react/jsx-runtime$': `next/dist/compiled/react${bundledReactChannel}/jsx-runtime.react-server`,
                'next/dist/compiled/react-experimental/jsx-runtime$': `next/dist/compiled/react-experimental/jsx-runtime.react-server`,
                'react/jsx-dev-runtime$': `next/dist/compiled/react${bundledReactChannel}/jsx-dev-runtime.react-server`,
                'next/dist/compiled/react/jsx-dev-runtime$': `next/dist/compiled/react${bundledReactChannel}/jsx-dev-runtime.react-server`,
                'next/dist/compiled/react-experimental/jsx-dev-runtime$': `next/dist/compiled/react-experimental/jsx-dev-runtime.react-server`,
                'react-dom$': `next/dist/compiled/react-dom${bundledReactChannel}/react-dom.react-server`,
                'next/dist/compiled/react-dom$': `next/dist/compiled/react-dom${bundledReactChannel}/react-dom.react-server`,
                'next/dist/compiled/react-dom-experimental$': `next/dist/compiled/react-dom-experimental/react-dom.react-server`
            });
        }
    }
    if (reactProductionProfiling) {
        alias['react-dom/client$'] = `next/dist/compiled/react-dom${bundledReactChannel}/profiling`;
    }
    alias['@vercel/turbopack-ecmascript-runtime/browser/dev/hmr-client/hmr-client.ts'] = `next/dist/client/dev/noop-turbopack-hmr`;
    return alias;
}
function getOptimizedModuleAliases() {
    return {
        unfetch: "[project]/node_modules/next/dist/build/polyfills/fetch/index.js [app-rsc] (ecmascript)",
        'isomorphic-unfetch': "[project]/node_modules/next/dist/build/polyfills/fetch/index.js [app-rsc] (ecmascript)",
        'whatwg-fetch': "[project]/node_modules/next/dist/build/polyfills/fetch/whatwg-fetch.js [app-rsc] (ecmascript)",
        'object-assign': "[project]/node_modules/next/dist/build/polyfills/object-assign.js [app-rsc] (ecmascript)",
        'object.assign/auto': "[project]/node_modules/next/dist/build/polyfills/object.assign/auto.js [app-rsc] (ecmascript)",
        'object.assign/implementation': "[project]/node_modules/next/dist/build/polyfills/object.assign/implementation.js [app-rsc] (ecmascript)",
        'object.assign/polyfill': "[project]/node_modules/next/dist/build/polyfills/object.assign/polyfill.js [app-rsc] (ecmascript)",
        'object.assign/shim': "[project]/node_modules/next/dist/build/polyfills/object.assign/shim.js [app-rsc] (ecmascript)",
        url: "[project]/node_modules/next/dist/compiled/native-url/index.js [app-rsc] (ecmascript)"
    };
}
// Alias these modules to be resolved with "module" if possible.
function getBarrelOptimizationAliases(packages) {
    const aliases = {};
    const mainFields = [
        'module',
        'main'
    ];
    for (const pkg of packages){
        try {
            const descriptionFileData = (()=>{
                const e = new Error("Cannot find module 'unknown'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })();
            const descriptionFilePath = (()=>{
                const e = new Error("Cannot find module 'unknown'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })();
            for (const field of mainFields){
                if (descriptionFileData.hasOwnProperty(field)) {
                    aliases[pkg + '$'] = _path.default.join(_path.default.dirname(descriptionFilePath), descriptionFileData[field]);
                    break;
                }
            }
        } catch  {}
    }
    return aliases;
}
function getReactProfilingInProduction() {
    return {
        'react-dom/client$': 'react-dom/profiling'
    };
} //# sourceMappingURL=create-compiler-aliases.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/css-chunking-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CssChunkingPlugin", {
    enumerable: true,
    get: function() {
        return CssChunkingPlugin;
    }
});
const PLUGIN_NAME = 'CssChunkingPlugin';
/**
 * Merge chunks until they are bigger than the target size.
 */ const MIN_CSS_CHUNK_SIZE = 30 * 1024;
/**
 * Avoid merging chunks when they would be bigger than this size.
 */ const MAX_CSS_CHUNK_SIZE = 100 * 1024;
function isGlobalCss(module) {
    return !/\.module\.(css|scss|sass)$/.test(module.nameForCondition() || '');
}
class CssChunkingPlugin {
    constructor(strict){
        this.strict = strict;
    }
    apply(compiler) {
        const strict = this.strict;
        const summary = !!process.env.CSS_CHUNKING_SUMMARY;
        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation)=>{
            let once = false;
            compilation.hooks.optimizeChunks.tap({
                name: PLUGIN_NAME,
                stage: 5
            }, ()=>{
                if (once) {
                    return;
                }
                once = true;
                const chunkGraph = compilation.chunkGraph;
                let changed = undefined;
                const chunkStates = new Map();
                const chunkStatesByModule = new Map();
                // Collect all css modules in chunks and the execpted order of them
                for (const chunk of compilation.chunks){
                    var _chunk_name;
                    if ((_chunk_name = chunk.name) == null ? void 0 : _chunk_name.startsWith('pages/')) continue;
                    const modules = [];
                    for (const module of chunkGraph.getChunkModulesIterable(chunk)){
                        var _module_type;
                        if (!((_module_type = module.type) == null ? void 0 : _module_type.startsWith('css'))) continue;
                        modules.push(module);
                    }
                    if (!modules.length) continue;
                    const chunkState = {
                        chunk,
                        modules,
                        order: 0,
                        requests: modules.length
                    };
                    chunkStates.set(chunk, chunkState);
                    for(let i = 0; i < modules.length; i++){
                        const module = modules[i];
                        let moduleChunkStates = chunkStatesByModule.get(module);
                        if (!moduleChunkStates) {
                            moduleChunkStates = new Map();
                            chunkStatesByModule.set(module, moduleChunkStates);
                        }
                        moduleChunkStates.set(chunkState, i);
                        chunkStatesByModule.set(module, moduleChunkStates);
                    }
                }
                // Sort modules by their index sum
                const orderedModules = [];
                for (const [module, moduleChunkStates] of chunkStatesByModule){
                    let sum = 0;
                    for (const i of moduleChunkStates.values()){
                        sum += i;
                    }
                    orderedModules.push({
                        module,
                        sum
                    });
                }
                orderedModules.sort((a, b)=>a.sum - b.sum);
                // A queue of modules that still need to be processed
                const remainingModules = new Set(orderedModules.map(({ module })=>module));
                // In loose mode we guess the dependents of modules from the order
                // assuming that when a module is a dependency of another module
                // it will always appear before it in every chunk.
                const allDependents = new Map();
                if (!this.strict) {
                    for (const b of remainingModules){
                        const dependent = new Set();
                        loop: for (const a of remainingModules){
                            if (a === b) continue;
                            // check if a depends on b
                            for (const [chunkState, ia] of chunkStatesByModule.get(a)){
                                const bChunkStates = chunkStatesByModule.get(b);
                                const ib = bChunkStates.get(chunkState);
                                if (ib === undefined) {
                                    continue loop;
                                }
                                if (ib > ia) {
                                    continue loop;
                                }
                            }
                            dependent.add(a);
                        }
                        if (dependent.size > 0) allDependents.set(b, dependent);
                    }
                }
                // Stores the new chunk for every module
                const newChunksByModule = new Map();
                // Process through all modules
                for (const startModule of remainingModules){
                    let globalCssMode = isGlobalCss(startModule);
                    // The current position of processing in all selected chunks
                    let allChunkStates = new Map(chunkStatesByModule.get(startModule));
                    // The list of modules that goes into the new chunk
                    const newChunkModules = new Set([
                        startModule
                    ]);
                    // The current size of the new chunk
                    let currentSize = startModule.size();
                    // A pool of potential modules where the next module is selected from.
                    // It's filled from the next module of the selected modules in every chunk.
                    // It also keeps some metadata to improve performance [size, chunkStates].
                    const potentialNextModules = new Map();
                    for (const [chunkState, i] of allChunkStates){
                        const nextModule = chunkState.modules[i + 1];
                        if (nextModule && remainingModules.has(nextModule)) {
                            potentialNextModules.set(nextModule, [
                                nextModule.size(),
                                chunkStatesByModule.get(nextModule)
                            ]);
                        }
                    }
                    // Try to add modules to the chunk until a break condition is met
                    let cont;
                    do {
                        cont = false;
                        // We try to select a module that reduces request count and
                        // has the highest number of requests
                        const orderedPotentialNextModules = [];
                        for (const [nextModule, [size, nextChunkStates]] of potentialNextModules){
                            let maxRequests = 0;
                            for (const chunkState of nextChunkStates.keys()){
                                // There is always some overlap
                                if (allChunkStates.has(chunkState)) {
                                    maxRequests = Math.max(maxRequests, chunkState.requests);
                                }
                            }
                            orderedPotentialNextModules.push([
                                nextModule,
                                size,
                                nextChunkStates,
                                maxRequests
                            ]);
                        }
                        orderedPotentialNextModules.sort((a, b)=>b[3] - a[3] || (a[0].identifier() < b[0].identifier() ? -1 : 1));
                        // Try every potential module
                        loop: for (const [nextModule, size, nextChunkStates] of orderedPotentialNextModules){
                            if (currentSize + size > MAX_CSS_CHUNK_SIZE) {
                                continue;
                            }
                            if (!strict) {
                                // In loose mode we only check if the dependencies are not violated
                                const dependent = allDependents.get(nextModule);
                                if (dependent) {
                                    for (const dep of dependent){
                                        if (newChunkModules.has(dep)) {
                                            continue loop;
                                        }
                                    }
                                }
                            } else {
                                // In strict mode we check that none of the order in any chunk is changed by adding the module
                                for (const [chunkState, i] of nextChunkStates){
                                    const prevState = allChunkStates.get(chunkState);
                                    if (prevState === undefined) {
                                        // New chunk group, can add it, but should we?
                                        // We only add that if below min size
                                        if (currentSize < MIN_CSS_CHUNK_SIZE) {
                                            continue;
                                        } else {
                                            continue loop;
                                        }
                                    } else if (prevState + 1 === i) {
                                        continue;
                                    } else {
                                        continue loop;
                                    }
                                }
                            }
                            // Global CSS must not leak into unrelated chunks
                            const nextIsGlobalCss = isGlobalCss(nextModule);
                            if (nextIsGlobalCss && globalCssMode) {
                                if (allChunkStates.size !== nextChunkStates.size) {
                                    continue;
                                }
                            }
                            if (globalCssMode) {
                                for (const chunkState of nextChunkStates.keys()){
                                    if (!allChunkStates.has(chunkState)) {
                                        continue loop;
                                    }
                                }
                            }
                            if (nextIsGlobalCss) {
                                for (const chunkState of allChunkStates.keys()){
                                    if (!nextChunkStates.has(chunkState)) {
                                        continue loop;
                                    }
                                }
                            }
                            potentialNextModules.delete(nextModule);
                            currentSize += size;
                            if (nextIsGlobalCss) {
                                globalCssMode = true;
                            }
                            for (const [chunkState, i] of nextChunkStates){
                                if (allChunkStates.has(chunkState)) {
                                    // This reduces the request count of the chunk group
                                    chunkState.requests--;
                                }
                                allChunkStates.set(chunkState, i);
                                const newNextModule = chunkState.modules[i + 1];
                                if (newNextModule && remainingModules.has(newNextModule) && !newChunkModules.has(newNextModule)) {
                                    potentialNextModules.set(newNextModule, [
                                        newNextModule.size(),
                                        chunkStatesByModule.get(newNextModule)
                                    ]);
                                }
                            }
                            newChunkModules.add(nextModule);
                            cont = true;
                            break;
                        }
                    }while (cont)
                    const newChunk = compilation.addChunk();
                    newChunk.preventIntegration = true;
                    newChunk.idNameHints.add('css');
                    for (const module of newChunkModules){
                        remainingModules.delete(module);
                        chunkGraph.connectChunkAndModule(newChunk, module);
                        newChunksByModule.set(module, newChunk);
                    }
                    changed = true;
                }
                for (const { chunk, modules } of chunkStates.values()){
                    const chunks = new Set();
                    for (const module of modules){
                        const newChunk = newChunksByModule.get(module);
                        if (newChunk) {
                            chunkGraph.disconnectChunkAndModule(chunk, module);
                            if (chunks.has(newChunk)) continue;
                            chunks.add(newChunk);
                            chunk.split(newChunk);
                        }
                    }
                }
                if (summary) {
                    console.log('Top 20 chunks by request count:');
                    const orderedChunkStates = [
                        ...chunkStates.values()
                    ];
                    orderedChunkStates.sort((a, b)=>b.requests - a.requests);
                    for (const { chunk, modules, requests } of orderedChunkStates.slice(0, 20)){
                        console.log(`- ${requests} requests for ${chunk.name} (has ${modules.length} modules)`);
                    }
                }
                return changed;
            });
        });
    }
} //# sourceMappingURL=css-chunking-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/process.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var _global_process, _global_process1;
module.exports = ((_global_process = global.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = global.process) == null ? void 0 : _global_process1.env) === 'object' ? global.process : __turbopack_require__("[project]/node_modules/next/dist/compiled/process/browser.js [app-rsc] (ecmascript)"); //# sourceMappingURL=process.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/minify-webpack-plugin/src/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MinifyPlugin", {
    enumerable: true,
    get: function() {
        return MinifyPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _plimit = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/p-limit/index.js [app-rsc] (ecmascript)"));
const _profilingplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/profiling-plugin.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function buildError(error, file) {
    if (error.line) {
        return new Error(`${file} from Minifier\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\n${error.stack.split('\n').slice(1).join('\n')}` : ''}`);
    }
    if (error.stack) {
        return new Error(`${file} from Minifier\n${error.message}\n${error.stack}`);
    }
    return new Error(`${file} from Minifier\n${error.message}`);
}
const debugMinify = process.env.NEXT_DEBUG_MINIFY;
class MinifyPlugin {
    async optimize(compiler, compilation, assets, cache, { SourceMapSource, RawSource }) {
        const compilationSpan = _profilingplugin.spans.get(compilation) || _profilingplugin.spans.get(compiler);
        const MinifierSpan = compilationSpan.traceChild('minify-webpack-plugin-optimize');
        MinifierSpan.setAttribute('compilationName', compilation.name);
        return MinifierSpan.traceAsyncFn(async ()=>{
            const assetsList = Object.keys(assets);
            const assetsForMinify = await Promise.all(assetsList.filter((name)=>{
                if (!_webpack.ModuleFilenameHelpers.matchObject.bind(undefined, {
                    test: /\.[cm]?js(\?.*)?$/i
                })(name)) {
                    return false;
                }
                const res = compilation.getAsset(name);
                if (!res) {
                    console.log(name);
                    return false;
                }
                const { info } = res;
                // Skip double minimize assets from child compilation
                if (info.minimized) {
                    return false;
                }
                return true;
            }).map(async (name)=>{
                const { info, source } = compilation.getAsset(name);
                const eTag = cache.getLazyHashedEtag(source);
                const output = await cache.getPromise(name, eTag);
                if (debugMinify && debugMinify === '1') {
                    console.log(JSON.stringify({
                        name,
                        source: source.source().toString()
                    }), {
                        breakLength: Infinity,
                        maxStringLength: Infinity
                    });
                }
                return {
                    name,
                    info,
                    inputSource: source,
                    output,
                    eTag
                };
            }));
            let initializedWorker;
            // eslint-disable-next-line consistent-return
            const getWorker = ()=>{
                return {
                    minify: async (options)=>{
                        const result = await __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)").minify(options.input, {
                            ...options.inputSourceMap ? {
                                sourceMap: {
                                    content: JSON.stringify(options.inputSourceMap)
                                }
                            } : {},
                            compress: true,
                            mangle: true,
                            module: 'unknown',
                            output: {
                                comments: false
                            }
                        });
                        return result;
                    }
                };
            };
            // The limit in the SWC minifier will be handled by Node.js
            const limit = (0, _plimit.default)(Infinity);
            const scheduledTasks = [];
            for (const asset of assetsForMinify){
                scheduledTasks.push(limit(async ()=>{
                    const { name, inputSource, eTag } = asset;
                    let { output } = asset;
                    const minifySpan = MinifierSpan.traceChild('minify-js');
                    minifySpan.setAttribute('name', name);
                    minifySpan.setAttribute('cache', typeof output === 'undefined' ? 'MISS' : 'HIT');
                    return minifySpan.traceAsyncFn(async ()=>{
                        if (!output) {
                            const { source: sourceFromInputSource, map: inputSourceMap } = inputSource.sourceAndMap();
                            const input = Buffer.isBuffer(sourceFromInputSource) ? sourceFromInputSource.toString() : sourceFromInputSource;
                            const options = {
                                name,
                                input,
                                inputSourceMap
                            };
                            try {
                                output = await getWorker().minify(options);
                            } catch (error) {
                                compilation.errors.push(buildError(error, name));
                                return;
                            }
                            if (output.map) {
                                output.source = new SourceMapSource(output.code, name, output.map, input, inputSourceMap, true);
                            } else {
                                output.source = new RawSource(output.code);
                            }
                            await cache.storePromise(name, eTag, {
                                source: output.source
                            });
                        }
                        const newInfo = {
                            minimized: true
                        };
                        const { source } = output;
                        compilation.updateAsset(name, source, newInfo);
                    });
                }));
            }
            await Promise.all(scheduledTasks);
            if (initializedWorker) {
                await initializedWorker.end();
            }
        });
    }
    apply(compiler) {
        var _compiler_webpack;
        const { SourceMapSource, RawSource } = (compiler == null ? void 0 : (_compiler_webpack = compiler.webpack) == null ? void 0 : _compiler_webpack.sources) || _webpack.sources;
        const pluginName = this.constructor.name;
        compiler.hooks.thisCompilation.tap(pluginName, (compilation)=>{
            const cache = compilation.getCache('MinifierWebpackPlugin');
            const handleHashForChunk = (hash, _chunk)=>{
                // increment 'c' to invalidate cache
                hash.update('c');
            };
            const JSModulesHooks = _webpack.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);
            JSModulesHooks.chunkHash.tap(pluginName, (chunk, hash)=>{
                if (!chunk.hasRuntime()) return;
                return handleHashForChunk(hash, chunk);
            });
            compilation.hooks.processAssets.tapPromise({
                name: pluginName,
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE
            }, (assets)=>this.optimize(compiler, compilation, assets, cache, {
                    SourceMapSource,
                    RawSource
                }));
            compilation.hooks.statsPrinter.tap(pluginName, (stats)=>{
                stats.hooks.print.for('asset.info.minimized').tap('minify-webpack-plugin', (minimized, { green, formatFlag })=>minimized ? green(formatFlag('minimized')) : undefined);
            });
        });
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/css-minimizer-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CssMinimizerPlugin", {
    enumerable: true,
    get: function() {
        return CssMinimizerPlugin;
    }
});
const _cssnanosimple = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/cssnano-simple/index.js [app-rsc] (ecmascript)"));
const _postcssscss = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/postcss-scss/scss-syntax.js [app-rsc] (ecmascript)"));
const _postcss = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/node_modules/postcss/lib/postcss.js [app-rsc] (ecmascript)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _profilingplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/profiling-plugin.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20
const CSS_REGEX = /\.css(\?.*)?$/i;
class CssMinimizerPlugin {
    constructor(options){
        this.__next_css_remove = true;
        this.options = options;
    }
    optimizeAsset(file, asset) {
        const postcssOptions = {
            ...this.options.postcssOptions,
            to: file,
            from: file,
            // We don't actually add this parser to support Sass. It can also be used
            // for inline comment support. See the README:
            // https://github.com/postcss/postcss-scss/blob/master/README.md#2-inline-comments-for-postcss
            parser: _postcssscss.default
        };
        let input;
        if (postcssOptions.map && asset.sourceAndMap) {
            const { source, map } = asset.sourceAndMap();
            input = source;
            postcssOptions.map.prev = map ? map : false;
        } else {
            input = asset.source();
        }
        return (0, _postcss.default)([
            (0, _cssnanosimple.default)({}, _postcss.default)
        ]).process(input, postcssOptions).then((res)=>{
            if (res.map) {
                return new _webpack.sources.SourceMapSource(res.css, file, res.map.toJSON());
            } else {
                return new _webpack.sources.RawSource(res.css);
            }
        });
    }
    apply(compiler) {
        compiler.hooks.compilation.tap('CssMinimizerPlugin', (compilation)=>{
            const cache = compilation.getCache('CssMinimizerPlugin');
            compilation.hooks.processAssets.tapPromise({
                name: 'CssMinimizerPlugin',
                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE
            }, async (assets)=>{
                const compilationSpan = _profilingplugin.spans.get(compilation) || _profilingplugin.spans.get(compiler);
                const cssMinimizerSpan = compilationSpan.traceChild('css-minimizer-plugin');
                return cssMinimizerSpan.traceAsyncFn(async ()=>{
                    const files = Object.keys(assets);
                    await Promise.all(files.filter((file)=>CSS_REGEX.test(file)).map(async (file)=>{
                        const assetSpan = cssMinimizerSpan.traceChild('minify-css');
                        assetSpan.setAttribute('file', file);
                        return assetSpan.traceAsyncFn(async ()=>{
                            const asset = assets[file];
                            const etag = cache.getLazyHashedEtag(asset);
                            const cachedResult = await cache.getPromise(file, etag);
                            assetSpan.setAttribute('cache', cachedResult ? 'HIT' : 'MISS');
                            if (cachedResult) {
                                assets[file] = cachedResult;
                                return;
                            }
                            const result = await this.optimizeAsset(file, asset);
                            await cache.storePromise(file, etag, result);
                            assets[file] = result;
                        });
                    }));
                });
            });
        });
    }
} //# sourceMappingURL=css-minimizer-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/next-trace-entrypoints-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    TRACE_IGNORES: null,
    TraceEntryPointsPlugin: null,
    getFilesMapFromReasons: null,
    getHash: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TRACE_IGNORES: function() {
        return TRACE_IGNORES;
    },
    TraceEntryPointsPlugin: function() {
        return TraceEntryPointsPlugin;
    },
    getFilesMapFromReasons: function() {
        return getFilesMapFromReasons;
    },
    getHash: function() {
        return getHash;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _crypto = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/crypto [external] (crypto, cjs)"));
const _profilingplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/profiling-plugin.js [app-rsc] (ecmascript)");
const _iserror = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/lib/is-error.js [app-rsc] (ecmascript)"));
const _nft = __turbopack_require__("[project]/node_modules/next/dist/compiled/@vercel/nft/index.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _webpackconfig = __turbopack_require__("[project]/node_modules/next/dist/build/webpack-config.js [app-rsc] (ecmascript)");
const _picomatch = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/picomatch/index.js [app-rsc] (ecmascript)"));
const _getmodulebuildinfo = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/loaders/get-module-build-info.js [app-rsc] (ecmascript)");
const _entries = __turbopack_require__("[project]/node_modules/next/dist/build/entries.js [app-rsc] (ecmascript)");
const _handleexternals = __turbopack_require__("[project]/node_modules/next/dist/build/handle-externals.js [app-rsc] (ecmascript)");
const _ismetadataroute = __turbopack_require__("[project]/node_modules/next/dist/lib/metadata/is-metadata-route.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const PLUGIN_NAME = 'TraceEntryPointsPlugin';
const TRACE_IGNORES = [
    '**/*/next/dist/server/next.js',
    '**/*/next/dist/bin/next'
];
const NOT_TRACEABLE = [
    '.wasm',
    '.png',
    '.jpg',
    '.jpeg',
    '.gif',
    '.webp',
    '.avif',
    '.ico',
    '.bmp',
    '.svg'
];
function getModuleFromDependency(compilation, dep) {
    return compilation.moduleGraph.getModule(dep);
}
function getFilesMapFromReasons(fileList, reasons, ignoreFn) {
    // this uses the reasons tree to collect files specific to a
    // certain parent allowing us to not have to trace each parent
    // separately
    const parentFilesMap = new Map();
    function propagateToParents(parents, file, seen = new Set()) {
        for (const parent of parents || []){
            if (!seen.has(parent)) {
                seen.add(parent);
                let parentFiles = parentFilesMap.get(parent);
                if (!parentFiles) {
                    parentFiles = new Map();
                    parentFilesMap.set(parent, parentFiles);
                }
                const ignored = Boolean(ignoreFn == null ? void 0 : ignoreFn(file, parent));
                parentFiles.set(file, {
                    ignored
                });
                const parentReason = reasons.get(parent);
                if (parentReason == null ? void 0 : parentReason.parents) {
                    propagateToParents(parentReason.parents, file, seen);
                }
            }
        }
    }
    for (const file of fileList){
        const reason = reasons.get(file);
        const isInitial = (reason == null ? void 0 : reason.type.length) === 1 && reason.type.includes('initial');
        if (!reason || !reason.parents || isInitial && reason.parents.size === 0) {
            continue;
        }
        propagateToParents(reason.parents, file);
    }
    return parentFilesMap;
}
function getHash(content) {
    return _crypto.default.createHash('sha1').update(content).digest('hex');
}
class TraceEntryPointsPlugin {
    constructor({ rootDir, appDir, pagesDir, compilerType, optOutBundlingPackages, appDirEnabled, traceIgnores, esmExternals, outputFileTracingRoot, swcLoaderConfig }){
        this.buildTraceContext = {};
        this.rootDir = rootDir;
        this.appDir = appDir;
        this.pagesDir = pagesDir;
        this.entryTraces = new Map();
        this.esmExternals = esmExternals;
        this.appDirEnabled = appDirEnabled;
        this.traceIgnores = traceIgnores || [];
        this.tracingRoot = outputFileTracingRoot || rootDir;
        this.optOutBundlingPackages = optOutBundlingPackages;
        this.traceHashes = new Map();
        this.compilerType = compilerType;
        this.swcLoaderConfig = swcLoaderConfig;
    }
    // Here we output all traced assets and webpack chunks to a
    // ${page}.js.nft.json file
    async createTraceAssets(compilation, assets, span) {
        const outputPath = compilation.outputOptions.path || '';
        await span.traceChild('create-trace-assets').traceAsyncFn(async ()=>{
            const entryFilesMap = new Map();
            const chunksToTrace = new Set();
            const entryNameFilesMap = new Map();
            const isTraceable = (file)=>!NOT_TRACEABLE.some((suffix)=>{
                    return file.endsWith(suffix);
                });
            for (const entrypoint of compilation.entrypoints.values()){
                const entryFiles = new Set();
                for (const chunk of entrypoint.getEntrypointChunk().getAllReferencedChunks()){
                    for (const file of chunk.files){
                        if (isTraceable(file)) {
                            const filePath = _path.default.join(outputPath, file);
                            chunksToTrace.add(filePath);
                            entryFiles.add(filePath);
                        }
                    }
                    for (const file of chunk.auxiliaryFiles){
                        if (isTraceable(file)) {
                            const filePath = _path.default.join(outputPath, file);
                            chunksToTrace.add(filePath);
                            entryFiles.add(filePath);
                        }
                    }
                }
                entryFilesMap.set(entrypoint, entryFiles);
                entryNameFilesMap.set(entrypoint.name || '', [
                    ...entryFiles
                ]);
            }
            // startTrace existed and callable
            this.buildTraceContext.chunksTrace = {
                action: {
                    action: 'annotate',
                    input: [
                        ...chunksToTrace
                    ],
                    contextDirectory: this.tracingRoot,
                    processCwd: this.rootDir
                },
                outputPath,
                entryNameFilesMap: Object.fromEntries(entryNameFilesMap)
            };
            // server compiler outputs to `server/chunks` so we traverse up
            // one, but edge-server does not so don't for that one
            const outputPrefix = this.compilerType === 'server' ? '../' : '';
            for (const [entrypoint, entryFiles] of entryFilesMap){
                var _this_entryTraces_get;
                const traceOutputName = `${outputPrefix}${entrypoint.name}.js.nft.json`;
                const traceOutputPath = _path.default.dirname(_path.default.join(outputPath, traceOutputName));
                // don't include the entry itself in the trace
                entryFiles.delete(_path.default.join(outputPath, `${outputPrefix}${entrypoint.name}.js`));
                if (entrypoint.name.startsWith('app/')) {
                    // Include the client reference manifest for pages and route handlers,
                    // excluding metadata route handlers.
                    const clientManifestsForEntrypoint = (0, _ismetadataroute.isMetadataRoute)(entrypoint.name) ? null : _path.default.join(outputPath, outputPrefix, entrypoint.name.replace(/%5F/g, '_') + '_' + _constants.CLIENT_REFERENCE_MANIFEST + '.js');
                    if (clientManifestsForEntrypoint !== null) {
                        entryFiles.add(clientManifestsForEntrypoint);
                    }
                }
                const finalFiles = [];
                await Promise.all([
                    ...new Set([
                        ...entryFiles,
                        ...((_this_entryTraces_get = this.entryTraces.get(entrypoint.name)) == null ? void 0 : _this_entryTraces_get.keys()) || []
                    ])
                ].map(async (file)=>{
                    var _this_entryTraces_get;
                    const fileInfo = (_this_entryTraces_get = this.entryTraces.get(entrypoint.name)) == null ? void 0 : _this_entryTraces_get.get(file);
                    const relativeFile = _path.default.relative(traceOutputPath, file).replace(/\\/g, '/');
                    if (file) {
                        if (!(fileInfo == null ? void 0 : fileInfo.bundled)) {
                            finalFiles.push(relativeFile);
                        }
                    }
                }));
                assets[traceOutputName] = new _webpack.sources.RawSource(JSON.stringify({
                    version: _constants.TRACE_OUTPUT_VERSION,
                    files: finalFiles
                }));
            }
        });
    }
    tapfinishModules(compilation, traceEntrypointsPluginSpan, doResolve, readlink, stat) {
        compilation.hooks.finishModules.tapAsync(PLUGIN_NAME, async (_stats, callback)=>{
            const finishModulesSpan = traceEntrypointsPluginSpan.traceChild('finish-modules');
            await finishModulesSpan.traceAsyncFn(async ()=>{
                // we create entry -> module maps so that we can
                // look them up faster instead of having to iterate
                // over the compilation modules list
                const entryNameMap = new Map();
                const entryModMap = new Map();
                const additionalEntries = new Map();
                const depModMap = new Map();
                await finishModulesSpan.traceChild('get-entries').traceAsyncFn(async ()=>{
                    for (const [name, entry] of compilation.entries.entries()){
                        const normalizedName = name == null ? void 0 : name.replace(/\\/g, '/');
                        const isPage = normalizedName.startsWith('pages/');
                        const isApp = this.appDirEnabled && normalizedName.startsWith('app/');
                        if (isApp || isPage) {
                            for (const dep of entry.dependencies){
                                if (!dep) continue;
                                const entryMod = getModuleFromDependency(compilation, dep);
                                // Handle case where entry is a loader coming from Next.js.
                                // For example edge-loader or app-loader.
                                if (entryMod && entryMod.resource === '') {
                                    const moduleBuildInfo = (0, _getmodulebuildinfo.getModuleBuildInfo)(entryMod);
                                    // All loaders that are used to create entries have a `route` property on the buildInfo.
                                    if (moduleBuildInfo.route) {
                                        const absolutePath = (0, _entries.getPageFilePath)({
                                            absolutePagePath: moduleBuildInfo.route.absolutePagePath,
                                            rootDir: this.rootDir,
                                            appDir: this.appDir,
                                            pagesDir: this.pagesDir
                                        });
                                        // Ensures we don't handle non-pages.
                                        if (this.pagesDir && absolutePath.startsWith(this.pagesDir) || this.appDir && absolutePath.startsWith(this.appDir)) {
                                            entryModMap.set(absolutePath, entryMod);
                                            entryNameMap.set(absolutePath, name);
                                        }
                                    }
                                    // If there was no `route` property, we can assume that it was something custom instead.
                                    // In order to trace these we add them to the additionalEntries map.
                                    if (entryMod.request) {
                                        let curMap = additionalEntries.get(name);
                                        if (!curMap) {
                                            curMap = new Map();
                                            additionalEntries.set(name, curMap);
                                        }
                                        depModMap.set(entryMod.request, entryMod);
                                        curMap.set(entryMod.resource, entryMod);
                                    }
                                }
                                if (entryMod && entryMod.resource) {
                                    entryNameMap.set(entryMod.resource, name);
                                    entryModMap.set(entryMod.resource, entryMod);
                                    let curMap = additionalEntries.get(name);
                                    if (!curMap) {
                                        curMap = new Map();
                                        additionalEntries.set(name, curMap);
                                    }
                                    depModMap.set(entryMod.resource, entryMod);
                                    curMap.set(entryMod.resource, entryMod);
                                }
                            }
                        }
                    }
                });
                const readFile = async (path)=>{
                    var _mod_originalSource, _mod_originalSource1;
                    const mod = depModMap.get(path) || entryModMap.get(path);
                    // map the transpiled source when available to avoid
                    // parse errors in node-file-trace
                    let source = mod == null ? void 0 : (_mod_originalSource1 = mod.originalSource) == null ? void 0 : (_mod_originalSource = _mod_originalSource1.call(mod)) == null ? void 0 : _mod_originalSource.buffer();
                    return source || '';
                };
                const entryPaths = Array.from(entryModMap.keys());
                const collectDependencies = async (mod, parent)=>{
                    if (!mod || !mod.dependencies) return;
                    for (const dep of mod.dependencies){
                        const depMod = getModuleFromDependency(compilation, dep);
                        if ((depMod == null ? void 0 : depMod.resource) && !depModMap.get(depMod.resource)) {
                            depModMap.set(depMod.resource, depMod);
                            await collectDependencies(depMod, parent);
                        }
                    }
                };
                const entriesToTrace = [
                    ...entryPaths
                ];
                for (const entry of entryPaths){
                    await collectDependencies(entryModMap.get(entry), entry);
                    const entryName = entryNameMap.get(entry);
                    const curExtraEntries = additionalEntries.get(entryName);
                    if (curExtraEntries) {
                        entriesToTrace.push(...curExtraEntries.keys());
                    }
                }
                const contextDirectory = this.tracingRoot;
                const chunks = [
                    ...entriesToTrace
                ];
                this.buildTraceContext.entriesTrace = {
                    action: {
                        action: 'print',
                        input: chunks,
                        contextDirectory,
                        processCwd: this.rootDir
                    },
                    appDir: this.rootDir,
                    depModArray: Array.from(depModMap.keys()),
                    entryNameMap: Object.fromEntries(entryNameMap),
                    outputPath: compilation.outputOptions.path
                };
                let fileList;
                let reasons;
                const ignores = [
                    ...TRACE_IGNORES,
                    ...this.traceIgnores,
                    '**/node_modules/**'
                ];
                // pre-compile the ignore matcher to avoid repeating on every ignoreFn call
                const isIgnoreMatcher = (0, _picomatch.default)(ignores, {
                    contains: true,
                    dot: true
                });
                const ignoreFn = (path)=>{
                    return isIgnoreMatcher(path);
                };
                await finishModulesSpan.traceChild('node-file-trace-plugin', {
                    traceEntryCount: entriesToTrace.length + ''
                }).traceAsyncFn(async ()=>{
                    const result = await (0, _nft.nodeFileTrace)(entriesToTrace, {
                        base: this.tracingRoot,
                        processCwd: this.rootDir,
                        readFile,
                        readlink,
                        stat,
                        resolve: doResolve ? async (id, parent, job, isCjs)=>{
                            return doResolve(id, parent, job, !isCjs);
                        } : undefined,
                        ignore: ignoreFn,
                        mixedModules: true
                    });
                    // @ts-ignore
                    fileList = result.fileList;
                    result.esmFileList.forEach((file)=>fileList.add(file));
                    reasons = result.reasons;
                });
                await finishModulesSpan.traceChild('collect-traced-files').traceAsyncFn(()=>{
                    const parentFilesMap = getFilesMapFromReasons(fileList, reasons, (file)=>{
                        var _reasons_get;
                        // if a file was imported and a loader handled it
                        // we don't include it in the trace e.g.
                        // static image imports, CSS imports
                        file = _path.default.join(this.tracingRoot, file);
                        const depMod = depModMap.get(file);
                        const isAsset = (_reasons_get = reasons.get(_path.default.relative(this.tracingRoot, file))) == null ? void 0 : _reasons_get.type.includes('asset');
                        return !isAsset && Array.isArray(depMod == null ? void 0 : depMod.loaders) && depMod.loaders.length > 0;
                    });
                    for (const entry of entryPaths){
                        var _parentFilesMap_get;
                        const entryName = entryNameMap.get(entry);
                        const normalizedEntry = _path.default.relative(this.tracingRoot, entry);
                        const curExtraEntries = additionalEntries.get(entryName);
                        const finalDeps = new Map();
                        // ensure we include entry source file as well for
                        // hash comparison
                        finalDeps.set(entry, {
                            bundled: true
                        });
                        for (const [dep, info] of ((_parentFilesMap_get = parentFilesMap.get(normalizedEntry)) == null ? void 0 : _parentFilesMap_get.entries()) || []){
                            finalDeps.set(_path.default.join(this.tracingRoot, dep), {
                                bundled: info.ignored
                            });
                        }
                        if (curExtraEntries) {
                            for (const extraEntry of curExtraEntries.keys()){
                                var _parentFilesMap_get1;
                                const normalizedExtraEntry = _path.default.relative(this.tracingRoot, extraEntry);
                                finalDeps.set(extraEntry, {
                                    bundled: false
                                });
                                for (const [dep, info] of ((_parentFilesMap_get1 = parentFilesMap.get(normalizedExtraEntry)) == null ? void 0 : _parentFilesMap_get1.entries()) || []){
                                    finalDeps.set(_path.default.join(this.tracingRoot, dep), {
                                        bundled: info.ignored
                                    });
                                }
                            }
                        }
                        this.entryTraces.set(entryName, finalDeps);
                    }
                });
            }).then(()=>callback(), (err)=>callback(err));
        });
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation)=>{
            const readlink = async (path)=>{
                try {
                    return await new Promise((resolve, reject)=>{
                        ;
                        compilation.inputFileSystem.readlink(path, (err, link)=>{
                            if (err) return reject(err);
                            resolve(link);
                        });
                    });
                } catch (e) {
                    if ((0, _iserror.default)(e) && (e.code === 'EINVAL' || e.code === 'ENOENT' || e.code === 'UNKNOWN')) {
                        return null;
                    }
                    throw e;
                }
            };
            const stat = async (path)=>{
                try {
                    return await new Promise((resolve, reject)=>{
                        ;
                        compilation.inputFileSystem.stat(path, (err, stats)=>{
                            if (err) return reject(err);
                            resolve(stats);
                        });
                    });
                } catch (e) {
                    if ((0, _iserror.default)(e) && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {
                        return null;
                    }
                    throw e;
                }
            };
            const compilationSpan = _profilingplugin.spans.get(compilation) || _profilingplugin.spans.get(compiler);
            const traceEntrypointsPluginSpan = compilationSpan.traceChild('next-trace-entrypoint-plugin');
            traceEntrypointsPluginSpan.traceFn(()=>{
                compilation.hooks.processAssets.tapAsync({
                    name: PLUGIN_NAME,
                    stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE
                }, (assets, callback)=>{
                    this.createTraceAssets(compilation, assets, traceEntrypointsPluginSpan).then(()=>callback()).catch((err)=>callback(err));
                });
                let resolver = compilation.resolverFactory.get('normal');
                function getPkgName(name) {
                    const segments = name.split('/');
                    if (name[0] === '@' && segments.length > 1) return segments.length > 1 ? segments.slice(0, 2).join('/') : null;
                    return segments.length ? segments[0] : null;
                }
                const getResolve = (options)=>{
                    const curResolver = resolver.withOptions(options);
                    return (parent, request, job)=>new Promise((resolve, reject)=>{
                            const context = _path.default.dirname(parent);
                            curResolver.resolve({}, context, request, {
                                fileDependencies: compilation.fileDependencies,
                                missingDependencies: compilation.missingDependencies,
                                contextDependencies: compilation.contextDependencies
                            }, async (err, result, resContext)=>{
                                if (err) return reject(err);
                                if (!result) {
                                    return reject(new Error('module not found'));
                                }
                                // webpack resolver doesn't strip loader query info
                                // from the result so use path instead
                                if (result.includes('?') || result.includes('!')) {
                                    result = (resContext == null ? void 0 : resContext.path) || result;
                                }
                                try {
                                    // we need to collect all parent package.json's used
                                    // as webpack's resolve doesn't expose this and parent
                                    // package.json could be needed for resolving e.g. stylis
                                    // stylis/package.json -> stylis/dist/umd/package.json
                                    if (result.includes('node_modules')) {
                                        let requestPath = result.replace(/\\/g, '/').replace(/\0/g, '');
                                        if (!_path.default.isAbsolute(request) && request.includes('/') && (resContext == null ? void 0 : resContext.descriptionFileRoot)) {
                                            var _getPkgName;
                                            requestPath = (resContext.descriptionFileRoot + request.slice(((_getPkgName = getPkgName(request)) == null ? void 0 : _getPkgName.length) || 0) + _path.default.sep + 'package.json').replace(/\\/g, '/').replace(/\0/g, '');
                                        }
                                        const rootSeparatorIndex = requestPath.indexOf('/');
                                        let separatorIndex;
                                        while((separatorIndex = requestPath.lastIndexOf('/')) > rootSeparatorIndex){
                                            requestPath = requestPath.slice(0, separatorIndex);
                                            const curPackageJsonPath = `${requestPath}/package.json`;
                                            if (await job.isFile(curPackageJsonPath)) {
                                                await job.emitFile(await job.realpath(curPackageJsonPath), 'resolve', parent);
                                            }
                                        }
                                    }
                                } catch (_err) {
                                // we failed to resolve the package.json boundary,
                                // we don't block emitting the initial asset from this
                                }
                                resolve([
                                    result,
                                    options.dependencyType === 'esm'
                                ]);
                            });
                        });
                };
                const CJS_RESOLVE_OPTIONS = {
                    ..._webpackconfig.NODE_RESOLVE_OPTIONS,
                    fullySpecified: undefined,
                    modules: undefined,
                    extensions: undefined
                };
                const BASE_CJS_RESOLVE_OPTIONS = {
                    ...CJS_RESOLVE_OPTIONS,
                    alias: false
                };
                const ESM_RESOLVE_OPTIONS = {
                    ..._webpackconfig.NODE_ESM_RESOLVE_OPTIONS,
                    fullySpecified: undefined,
                    modules: undefined,
                    extensions: undefined
                };
                const BASE_ESM_RESOLVE_OPTIONS = {
                    ...ESM_RESOLVE_OPTIONS,
                    alias: false
                };
                const doResolve = async (request, parent, job, isEsmRequested)=>{
                    const context = _path.default.dirname(parent);
                    // When in esm externals mode, and using import, we resolve with
                    // ESM resolving options.
                    const { res } = await (0, _handleexternals.resolveExternal)(this.rootDir, this.esmExternals, context, request, isEsmRequested, this.optOutBundlingPackages, (options)=>(_, resRequest)=>{
                            return getResolve(options)(parent, resRequest, job);
                        }, undefined, undefined, ESM_RESOLVE_OPTIONS, CJS_RESOLVE_OPTIONS, BASE_ESM_RESOLVE_OPTIONS, BASE_CJS_RESOLVE_OPTIONS);
                    if (!res) {
                        throw new Error(`failed to resolve ${request} from ${parent}`);
                    }
                    return res.replace(/\0/g, '');
                };
                this.tapfinishModules(compilation, traceEntrypointsPluginSpan, doResolve, readlink, stat);
            });
        });
    }
} //# sourceMappingURL=next-trace-entrypoints-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/nextjs-require-cache-hot-reloader.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NextJsRequireCacheHotReloader", {
    enumerable: true,
    get: function() {
        return NextJsRequireCacheHotReloader;
    }
});
const _requirecache = __turbopack_require__("[project]/node_modules/next/dist/server/dev/require-cache.js [app-rsc] (ecmascript)");
const _sandbox = __turbopack_require__("[project]/node_modules/next/dist/server/web/sandbox/index.js [app-rsc] (ecmascript)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const RUNTIME_NAMES = [
    'webpack-runtime',
    'webpack-api-runtime'
];
const PLUGIN_NAME = 'NextJsRequireCacheHotReloader';
class NextJsRequireCacheHotReloader {
    constructor(opts){
        this.prevAssets = null;
        this.serverComponents = opts.serverComponents;
    }
    apply(compiler) {
        compiler.hooks.assetEmitted.tap(PLUGIN_NAME, (_file, { targetPath })=>{
            // Clear module context in this process
            (0, _sandbox.clearModuleContext)(targetPath);
            (0, _requirecache.deleteCache)(targetPath);
        });
        compiler.hooks.afterEmit.tapPromise(PLUGIN_NAME, async (compilation)=>{
            for (const name of RUNTIME_NAMES){
                const runtimeChunkPath = _path.default.join(compilation.outputOptions.path, `${name}.js`);
                (0, _requirecache.deleteCache)(runtimeChunkPath);
            }
            // we need to make sure to clear all server entries from cache
            // since they can have a stale webpack-runtime cache
            // which needs to always be in-sync
            const entries = [
                ...compilation.entries.keys()
            ].filter((entry)=>{
                const isAppPath = entry.toString().startsWith('app/');
                return entry.toString().startsWith('pages/') || isAppPath;
            });
            for (const page of entries){
                const outputPath = _path.default.join(compilation.outputOptions.path, page + '.js');
                (0, _requirecache.deleteCache)(outputPath);
            }
        });
    }
} //# sourceMappingURL=nextjs-require-cache-hot-reloader.js.map
}}),
"[project]/node_modules/next/dist/build/polyfills/polyfill-nomodule.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
!function() {
    var t = "undefined" != typeof globalThis ? globalThis : ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    function e(t) {
        var e = {
            exports: {}
        };
        return t(e, e.exports), e.exports;
    }
    var r, n, o = function(t) {
        return t && t.Math === Math && t;
    }, i = o("object" == typeof globalThis && globalThis) || o("object" == "undefined" && window) || o("object" == typeof self && self) || o("object" == typeof t && t) || o("object" == typeof t && t) || function() {
        return this;
    }() || Function("return this")(), a = function(t) {
        try {
            return !!t();
        } catch (t) {
            return !0;
        }
    }, u = !a(function() {
        return 7 !== Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), s = !a(function() {
        var t = (function() {}).bind();
        return "function" != typeof t || t.hasOwnProperty("prototype");
    }), c = Function.prototype.call, f = s ? c.bind(c) : function() {
        return c.apply(c, arguments);
    }, l = {}.propertyIsEnumerable, h = Object.getOwnPropertyDescriptor, p = h && !l.call({
        1: 2
    }, 1) ? function(t) {
        var e = h(this, t);
        return !!e && e.enumerable;
    } : l, v = {
        f: p
    }, d = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, g = Function.prototype, y = g.call, m = s && g.bind.bind(y, y), b = s ? m : function(t) {
        return function() {
            return y.apply(t, arguments);
        };
    }, w = b({}.toString), S = b("".slice), E = function(t) {
        return S(w(t), 8, -1);
    }, O = Object, x = b("".split), R = a(function() {
        return !O("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" === E(t) ? x(t, "") : O(t);
    } : O, P = function(t) {
        return null == t;
    }, A = TypeError, j = function(t) {
        if (P(t)) throw new A("Can't call method on " + t);
        return t;
    }, k = function(t) {
        return R(j(t));
    }, I = "object" == typeof document && document.all, T = void 0 === I && void 0 !== I ? function(t) {
        return "function" == typeof t || t === I;
    } : function(t) {
        return "function" == typeof t;
    }, M = function(t) {
        return "object" == typeof t ? null !== t : T(t);
    }, L = function(t, e) {
        return arguments.length < 2 ? T(r = i[t]) ? r : void 0 : i[t] && i[t][e];
        "TURBOPACK unreachable";
        var r;
    }, U = b({}.isPrototypeOf), N = i.navigator, C = N && N.userAgent, _ = C ? String(C) : "", F = i.process, B = i.Deno, D = F && F.versions || B && B.version, z = D && D.v8;
    z && (n = (r = z.split("."))[0] > 0 && r[0] < 4 ? 1 : +(r[0] + r[1])), !n && _ && (!(r = _.match(/Edge\/(\d+)/)) || r[1] >= 74) && (r = _.match(/Chrome\/(\d+)/)) && (n = +r[1]);
    var W = n, q = i.String, H = !!Object.getOwnPropertySymbols && !a(function() {
        var t = Symbol("symbol detection");
        return !q(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && W && W < 41;
    }), $ = H && !Symbol.sham && "symbol" == typeof Symbol.iterator, K = Object, G = $ ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        var e = L("Symbol");
        return T(e) && U(e.prototype, K(t));
    }, V = String, Y = function(t) {
        try {
            return V(t);
        } catch (t) {
            return "Object";
        }
    }, X = TypeError, J = function(t) {
        if (T(t)) return t;
        throw new X(Y(t) + " is not a function");
    }, Q = function(t, e) {
        var r = t[e];
        return P(r) ? void 0 : J(r);
    }, Z = TypeError, tt = Object.defineProperty, et = function(t, e) {
        try {
            tt(i, t, {
                value: e,
                configurable: !0,
                writable: !0
            });
        } catch (r) {
            i[t] = e;
        }
        return e;
    }, rt = e(function(t) {
        var e = "__core-js_shared__", r = t.exports = i[e] || et(e, {});
        (r.versions || (r.versions = [])).push({
            version: "3.38.1",
            mode: "global",
            copyright: "© 2014-2024 Denis Pushkarev (zloirock.ru)",
            license: "https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE",
            source: "https://github.com/zloirock/core-js"
        });
    }), nt = function(t, e) {
        return rt[t] || (rt[t] = e || {});
    }, ot = Object, it = function(t) {
        return ot(j(t));
    }, at = b({}.hasOwnProperty), ut = Object.hasOwn || function(t, e) {
        return at(it(t), e);
    }, st = 0, ct = Math.random(), ft = b(1..toString), lt = function(t) {
        return "Symbol(" + (void 0 === t ? "" : t) + ")_" + ft(++st + ct, 36);
    }, ht = i.Symbol, pt = nt("wks"), vt = $ ? ht.for || ht : ht && ht.withoutSetter || lt, dt = function(t) {
        return ut(pt, t) || (pt[t] = H && ut(ht, t) ? ht[t] : vt("Symbol." + t)), pt[t];
    }, gt = TypeError, yt = dt("toPrimitive"), mt = function(t, e) {
        if (!M(t) || G(t)) return t;
        var r, n = Q(t, yt);
        if (n) {
            if (void 0 === e && (e = "default"), r = f(n, t, e), !M(r) || G(r)) return r;
            throw new gt("Can't convert object to primitive value");
        }
        return void 0 === e && (e = "number"), function(t, e) {
            var r, n;
            if ("string" === e && T(r = t.toString) && !M(n = f(r, t))) return n;
            if (T(r = t.valueOf) && !M(n = f(r, t))) return n;
            if ("string" !== e && T(r = t.toString) && !M(n = f(r, t))) return n;
            throw new Z("Can't convert object to primitive value");
        }(t, e);
    }, bt = function(t) {
        var e = mt(t, "string");
        return G(e) ? e : e + "";
    }, wt = i.document, St = M(wt) && M(wt.createElement), Et = function(t) {
        return St ? wt.createElement(t) : {};
    }, Ot = !u && !a(function() {
        return 7 !== Object.defineProperty(Et("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), xt = Object.getOwnPropertyDescriptor, Rt = {
        f: u ? xt : function(t, e) {
            if (t = k(t), e = bt(e), Ot) try {
                return xt(t, e);
            } catch (t) {}
            if (ut(t, e)) return d(!f(v.f, t, e), t[e]);
        }
    }, Pt = u && a(function() {
        return 42 !== Object.defineProperty(function() {}, "prototype", {
            value: 42,
            writable: !1
        }).prototype;
    }), At = String, jt = TypeError, kt = function(t) {
        if (M(t)) return t;
        throw new jt(At(t) + " is not an object");
    }, It = TypeError, Tt = Object.defineProperty, Mt = Object.getOwnPropertyDescriptor, Lt = "enumerable", Ut = "configurable", Nt = "writable", Ct = {
        f: u ? Pt ? function(t, e, r) {
            if (kt(t), e = bt(e), kt(r), "function" == typeof t && "prototype" === e && "value" in r && Nt in r && !r[Nt]) {
                var n = Mt(t, e);
                n && n[Nt] && (t[e] = r.value, r = {
                    configurable: Ut in r ? r[Ut] : n[Ut],
                    enumerable: Lt in r ? r[Lt] : n[Lt],
                    writable: !1
                });
            }
            return Tt(t, e, r);
        } : Tt : function(t, e, r) {
            if (kt(t), e = bt(e), kt(r), Ot) try {
                return Tt(t, e, r);
            } catch (t) {}
            if ("get" in r || "set" in r) throw new It("Accessors not supported");
            return "value" in r && (t[e] = r.value), t;
        }
    }, _t = u ? function(t, e, r) {
        return Ct.f(t, e, d(1, r));
    } : function(t, e, r) {
        return t[e] = r, t;
    }, Ft = Function.prototype, Bt = u && Object.getOwnPropertyDescriptor, Dt = ut(Ft, "name"), zt = {
        EXISTS: Dt,
        PROPER: Dt && "something" === (function() {}).name,
        CONFIGURABLE: Dt && (!u || u && Bt(Ft, "name").configurable)
    }, Wt = b(Function.toString);
    T(rt.inspectSource) || (rt.inspectSource = function(t) {
        return Wt(t);
    });
    var qt, Ht, $t, Kt = rt.inspectSource, Gt = i.WeakMap, Vt = T(Gt) && /native code/.test(String(Gt)), Yt = nt("keys"), Xt = function(t) {
        return Yt[t] || (Yt[t] = lt(t));
    }, Jt = {}, Qt = "Object already initialized", Zt = i.TypeError;
    if (Vt || rt.state) {
        var te = rt.state || (rt.state = new (0, i.WeakMap));
        te.get = te.get, te.has = te.has, te.set = te.set, qt = function(t, e) {
            if (te.has(t)) throw new Zt(Qt);
            return e.facade = t, te.set(t, e), e;
        }, Ht = function(t) {
            return te.get(t) || {};
        }, $t = function(t) {
            return te.has(t);
        };
    } else {
        var ee = Xt("state");
        Jt[ee] = !0, qt = function(t, e) {
            if (ut(t, ee)) throw new Zt(Qt);
            return e.facade = t, _t(t, ee, e), e;
        }, Ht = function(t) {
            return ut(t, ee) ? t[ee] : {};
        }, $t = function(t) {
            return ut(t, ee);
        };
    }
    var re, ne = {
        set: qt,
        get: Ht,
        has: $t,
        enforce: function(t) {
            return $t(t) ? Ht(t) : qt(t, {});
        },
        getterFor: function(t) {
            return function(e) {
                var r;
                if (!M(e) || (r = Ht(e)).type !== t) throw new Zt("Incompatible receiver, " + t + " required");
                return r;
            };
        }
    }, oe = e(function(t) {
        var e = zt.CONFIGURABLE, r = ne.enforce, n = ne.get, o = String, i = Object.defineProperty, s = b("".slice), c = b("".replace), f = b([].join), l = u && !a(function() {
            return 8 !== i(function() {}, "length", {
                value: 8
            }).length;
        }), h = String(String).split("String"), p = t.exports = function(t, n, a) {
            "Symbol(" === s(o(n), 0, 7) && (n = "[" + c(o(n), /^Symbol\(([^)]*)\).*$/, "$1") + "]"), a && a.getter && (n = "get " + n), a && a.setter && (n = "set " + n), (!ut(t, "name") || e && t.name !== n) && (u ? i(t, "name", {
                value: n,
                configurable: !0
            }) : t.name = n), l && a && ut(a, "arity") && t.length !== a.arity && i(t, "length", {
                value: a.arity
            });
            try {
                a && ut(a, "constructor") && a.constructor ? u && i(t, "prototype", {
                    writable: !1
                }) : t.prototype && (t.prototype = void 0);
            } catch (t) {}
            var p = r(t);
            return ut(p, "source") || (p.source = f(h, "string" == typeof n ? n : "")), t;
        };
        Function.prototype.toString = p(function() {
            return T(this) && n(this).source || Kt(this);
        }, "toString");
    }), ie = function(t, e, r, n) {
        n || (n = {});
        var o = n.enumerable, i = void 0 !== n.name ? n.name : e;
        if (T(r) && oe(r, i, n), n.global) o ? t[e] = r : et(e, r);
        else {
            try {
                n.unsafe ? t[e] && (o = !0) : delete t[e];
            } catch (t) {}
            o ? t[e] = r : Ct.f(t, e, {
                value: r,
                enumerable: !1,
                configurable: !n.nonConfigurable,
                writable: !n.nonWritable
            });
        }
        return t;
    }, ae = Math.ceil, ue = Math.floor, se = Math.trunc || function(t) {
        var e = +t;
        return (e > 0 ? ue : ae)(e);
    }, ce = function(t) {
        var e = +t;
        return e != e || 0 === e ? 0 : se(e);
    }, fe = Math.max, le = Math.min, he = function(t, e) {
        var r = ce(t);
        return r < 0 ? fe(r + e, 0) : le(r, e);
    }, pe = Math.min, ve = function(t) {
        var e = ce(t);
        return e > 0 ? pe(e, 9007199254740991) : 0;
    }, de = function(t) {
        return ve(t.length);
    }, ge = function(t) {
        return function(e, r, n) {
            var o = k(e), i = de(o);
            if (0 === i) return !t && -1;
            var a, u = he(n, i);
            if (t && r != r) {
                for(; i > u;)if ((a = o[u++]) != a) return !0;
            } else for(; i > u; u++)if ((t || u in o) && o[u] === r) return t || u || 0;
            return !t && -1;
        };
    }, ye = {
        includes: ge(!0),
        indexOf: ge(!1)
    }, me = ye.indexOf, be = b([].push), we = function(t, e) {
        var r, n = k(t), o = 0, i = [];
        for(r in n)!ut(Jt, r) && ut(n, r) && be(i, r);
        for(; e.length > o;)ut(n, r = e[o++]) && (~me(i, r) || be(i, r));
        return i;
    }, Se = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], Ee = Se.concat("length", "prototype"), Oe = {
        f: Object.getOwnPropertyNames || function(t) {
            return we(t, Ee);
        }
    }, xe = {
        f: Object.getOwnPropertySymbols
    }, Re = b([].concat), Pe = L("Reflect", "ownKeys") || function(t) {
        var e = Oe.f(kt(t)), r = xe.f;
        return r ? Re(e, r(t)) : e;
    }, Ae = function(t, e, r) {
        for(var n = Pe(e), o = Ct.f, i = Rt.f, a = 0; a < n.length; a++){
            var u = n[a];
            ut(t, u) || r && ut(r, u) || o(t, u, i(e, u));
        }
    }, je = /#|\.prototype\./, ke = function(t, e) {
        var r = Te[Ie(t)];
        return r === Le || r !== Me && (T(e) ? a(e) : !!e);
    }, Ie = ke.normalize = function(t) {
        return String(t).replace(je, ".").toLowerCase();
    }, Te = ke.data = {}, Me = ke.NATIVE = "N", Le = ke.POLYFILL = "P", Ue = ke, Ne = Rt.f, Ce = function(t, e) {
        var r, n, o, a, u, s = t.target, c = t.global, f = t.stat;
        if (r = c ? i : f ? i[s] || et(s, {}) : i[s] && i[s].prototype) for(n in e){
            if (a = e[n], o = t.dontCallGetSet ? (u = Ne(r, n)) && u.value : r[n], !Ue(c ? n : s + (f ? "." : "#") + n, t.forced) && void 0 !== o) {
                if (typeof a == typeof o) continue;
                Ae(a, o);
            }
            (t.sham || o && o.sham) && _t(a, "sham", !0), ie(r, n, a, t);
        }
    }, _e = Object.keys || function(t) {
        return we(t, Se);
    }, Fe = u && !Pt ? Object.defineProperties : function(t, e) {
        kt(t);
        for(var r, n = k(e), o = _e(e), i = o.length, a = 0; i > a;)Ct.f(t, r = o[a++], n[r]);
        return t;
    }, Be = {
        f: Fe
    }, De = L("document", "documentElement"), ze = "prototype", We = "script", qe = Xt("IE_PROTO"), He = function() {}, $e = function(t) {
        return "<" + We + ">" + t + "</" + We + ">";
    }, Ke = function(t) {
        t.write($e("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
    }, Ge = function() {
        try {
            re = new ActiveXObject("htmlfile");
        } catch (t) {}
        var t, e, r;
        Ge = "undefined" != typeof document ? document.domain && re ? Ke(re) : (e = Et("iframe"), r = "java" + We + ":", e.style.display = "none", De.appendChild(e), e.src = String(r), (t = e.contentWindow.document).open(), t.write($e("document.F=Object")), t.close(), t.F) : Ke(re);
        for(var n = Se.length; n--;)delete Ge[ze][Se[n]];
        return Ge();
    };
    Jt[qe] = !0;
    var Ve = Object.create || function(t, e) {
        var r;
        return null !== t ? (He[ze] = kt(t), r = new He, He[ze] = null, r[qe] = t) : r = Ge(), void 0 === e ? r : Be.f(r, e);
    }, Ye = Ct.f, Xe = dt("unscopables"), Je = Array.prototype;
    void 0 === Je[Xe] && Ye(Je, Xe, {
        configurable: !0,
        value: Ve(null)
    });
    var Qe = function(t) {
        Je[Xe][t] = !0;
    };
    Ce({
        target: "Array",
        proto: !0
    }, {
        at: function(t) {
            var e = it(this), r = de(e), n = ce(t), o = n >= 0 ? n : r + n;
            return o < 0 || o >= r ? void 0 : e[o];
        }
    }), Qe("at");
    var Ze = function(t, e) {
        return b(i[t].prototype[e]);
    }, tr = (Ze("Array", "at"), TypeError), er = function(t, e) {
        if (!delete t[e]) throw new tr("Cannot delete property " + Y(e) + " of " + Y(t));
    }, rr = Math.min, nr = [].copyWithin || function(t, e) {
        var r = it(this), n = de(r), o = he(t, n), i = he(e, n), a = arguments.length > 2 ? arguments[2] : void 0, u = rr((void 0 === a ? n : he(a, n)) - i, n - o), s = 1;
        for(i < o && o < i + u && (s = -1, i += u - 1, o += u - 1); u-- > 0;)i in r ? r[o] = r[i] : er(r, o), o += s, i += s;
        return r;
    };
    Ce({
        target: "Array",
        proto: !0
    }, {
        copyWithin: nr
    }), Qe("copyWithin"), Ze("Array", "copyWithin"), Ce({
        target: "Array",
        proto: !0
    }, {
        fill: function(t) {
            for(var e = it(this), r = de(e), n = arguments.length, o = he(n > 1 ? arguments[1] : void 0, r), i = n > 2 ? arguments[2] : void 0, a = void 0 === i ? r : he(i, r); a > o;)e[o++] = t;
            return e;
        }
    }), Qe("fill"), Ze("Array", "fill");
    var or = function(t) {
        if ("Function" === E(t)) return b(t);
    }, ir = or(or.bind), ar = function(t, e) {
        return J(t), void 0 === e ? t : s ? ir(t, e) : function() {
            return t.apply(e, arguments);
        };
    }, ur = Array.isArray || function(t) {
        return "Array" === E(t);
    }, sr = {};
    sr[dt("toStringTag")] = "z";
    var cr = "[object z]" === String(sr), fr = dt("toStringTag"), lr = Object, hr = "Arguments" === E(function() {
        return arguments;
    }()), pr = cr ? E : function(t) {
        var e, r, n;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function(t, e) {
            try {
                return t[e];
            } catch (t) {}
        }(e = lr(t), fr)) ? r : hr ? E(e) : "Object" === (n = E(e)) && T(e.callee) ? "Arguments" : n;
    }, vr = function() {}, dr = L("Reflect", "construct"), gr = /^\s*(?:class|function)\b/, yr = b(gr.exec), mr = !gr.test(vr), br = function(t) {
        if (!T(t)) return !1;
        try {
            return dr(vr, [], t), !0;
        } catch (t) {
            return !1;
        }
    }, wr = function(t) {
        if (!T(t)) return !1;
        switch(pr(t)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return !1;
        }
        try {
            return mr || !!yr(gr, Kt(t));
        } catch (t) {
            return !0;
        }
    };
    wr.sham = !0;
    var Sr = !dr || a(function() {
        var t;
        return br(br.call) || !br(Object) || !br(function() {
            t = !0;
        }) || t;
    }) ? wr : br, Er = dt("species"), Or = Array, xr = function(t, e) {
        return new (function(t) {
            var e;
            return ur(t) && (Sr(e = t.constructor) && (e === Or || ur(e.prototype)) || M(e) && null === (e = e[Er])) && (e = void 0), void 0 === e ? Or : e;
        }(t))(0 === e ? 0 : e);
    }, Rr = b([].push), Pr = function(t) {
        var e = 1 === t, r = 2 === t, n = 3 === t, o = 4 === t, i = 6 === t, a = 7 === t, u = 5 === t || i;
        return function(s, c, f, l) {
            for(var h, p, v = it(s), d = R(v), g = de(d), y = ar(c, f), m = 0, b = l || xr, w = e ? b(s, g) : r || a ? b(s, 0) : void 0; g > m; m++)if ((u || m in d) && (p = y(h = d[m], m, v), t)) if (e) w[m] = p;
            else if (p) switch(t){
                case 3:
                    return !0;
                case 5:
                    return h;
                case 6:
                    return m;
                case 2:
                    Rr(w, h);
            }
            else switch(t){
                case 4:
                    return !1;
                case 7:
                    Rr(w, h);
            }
            return i ? -1 : n || o ? o : w;
        };
    }, Ar = {
        forEach: Pr(0),
        map: Pr(1),
        filter: Pr(2),
        some: Pr(3),
        every: Pr(4),
        find: Pr(5),
        findIndex: Pr(6),
        filterReject: Pr(7)
    }, jr = Ar.find, kr = "find", Ir = !0;
    kr in [] && Array(1)[kr](function() {
        Ir = !1;
    }), Ce({
        target: "Array",
        proto: !0,
        forced: Ir
    }, {
        find: function(t) {
            return jr(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Qe(kr), Ze("Array", "find");
    var Tr = Ar.findIndex, Mr = "findIndex", Lr = !0;
    Mr in [] && Array(1)[Mr](function() {
        Lr = !1;
    }), Ce({
        target: "Array",
        proto: !0,
        forced: Lr
    }, {
        findIndex: function(t) {
            return Tr(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Qe(Mr), Ze("Array", "findIndex");
    var Ur = TypeError, Nr = function(t) {
        if (t > 9007199254740991) throw Ur("Maximum allowed index exceeded");
        return t;
    }, Cr = function(t, e, r, n, o, i, a, u) {
        for(var s, c, f = o, l = 0, h = !!a && ar(a, u); l < n;)l in r && (s = h ? h(r[l], l, e) : r[l], i > 0 && ur(s) ? (c = de(s), f = Cr(t, e, s, c, f, i - 1) - 1) : (Nr(f + 1), t[f] = s), f++), l++;
        return f;
    }, _r = Cr;
    Ce({
        target: "Array",
        proto: !0
    }, {
        flatMap: function(t) {
            var e, r = it(this), n = de(r);
            return J(t), (e = xr(r, 0)).length = _r(e, r, r, n, 0, 1, t, arguments.length > 1 ? arguments[1] : void 0), e;
        }
    }), Qe("flatMap"), Ze("Array", "flatMap"), Ce({
        target: "Array",
        proto: !0
    }, {
        flat: function() {
            var t = arguments.length ? arguments[0] : void 0, e = it(this), r = de(e), n = xr(e, 0);
            return n.length = _r(n, e, e, r, 0, void 0 === t ? 1 : ce(t)), n;
        }
    }), Qe("flat"), Ze("Array", "flat");
    var Fr, Br, Dr, zr = String, Wr = function(t) {
        if ("Symbol" === pr(t)) throw new TypeError("Cannot convert a Symbol value to a string");
        return zr(t);
    }, qr = b("".charAt), Hr = b("".charCodeAt), $r = b("".slice), Kr = function(t) {
        return function(e, r) {
            var n, o, i = Wr(j(e)), a = ce(r), u = i.length;
            return a < 0 || a >= u ? t ? "" : void 0 : (n = Hr(i, a)) < 55296 || n > 56319 || a + 1 === u || (o = Hr(i, a + 1)) < 56320 || o > 57343 ? t ? qr(i, a) : n : t ? $r(i, a, a + 2) : o - 56320 + (n - 55296 << 10) + 65536;
        };
    }, Gr = {
        codeAt: Kr(!1),
        charAt: Kr(!0)
    }, Vr = !a(function() {
        function t() {}
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), Yr = Xt("IE_PROTO"), Xr = Object, Jr = Xr.prototype, Qr = Vr ? Xr.getPrototypeOf : function(t) {
        var e = it(t);
        if (ut(e, Yr)) return e[Yr];
        var r = e.constructor;
        return T(r) && e instanceof r ? r.prototype : e instanceof Xr ? Jr : null;
    }, Zr = dt("iterator"), tn = !1;
    [].keys && ("next" in (Dr = [].keys()) ? (Br = Qr(Qr(Dr))) !== Object.prototype && (Fr = Br) : tn = !0);
    var en = !M(Fr) || a(function() {
        var t = {};
        return Fr[Zr].call(t) !== t;
    });
    en && (Fr = {}), T(Fr[Zr]) || ie(Fr, Zr, function() {
        return this;
    });
    var rn = {
        IteratorPrototype: Fr,
        BUGGY_SAFARI_ITERATORS: tn
    }, nn = Ct.f, on = dt("toStringTag"), an = function(t, e, r) {
        t && !r && (t = t.prototype), t && !ut(t, on) && nn(t, on, {
            configurable: !0,
            value: e
        });
    }, un = {}, sn = rn.IteratorPrototype, cn = function() {
        return this;
    }, fn = function(t, e, r, n) {
        var o = e + " Iterator";
        return t.prototype = Ve(sn, {
            next: d(+!n, r)
        }), an(t, o, !1), un[o] = cn, t;
    }, ln = function(t, e, r) {
        try {
            return b(J(Object.getOwnPropertyDescriptor(t, e)[r]));
        } catch (t) {}
    }, hn = String, pn = TypeError, vn = function(t) {
        if (function(t) {
            return M(t) || null === t;
        }(t)) return t;
        throw new pn("Can't set " + hn(t) + " as a prototype");
    }, dn = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var t, e = !1, r = {};
        try {
            (t = ln(Object.prototype, "__proto__", "set"))(r, []), e = r instanceof Array;
        } catch (t) {}
        return function(r, n) {
            return j(r), vn(n), M(r) ? (e ? t(r, n) : r.__proto__ = n, r) : r;
        };
    }() : void 0), gn = zt.PROPER, yn = zt.CONFIGURABLE, mn = rn.IteratorPrototype, bn = rn.BUGGY_SAFARI_ITERATORS, wn = dt("iterator"), Sn = "keys", En = "values", On = "entries", xn = function() {
        return this;
    }, Rn = function(t, e, r, n, o, i, a) {
        fn(r, e, n);
        var u, s, c, l = function(t) {
            if (t === o && g) return g;
            if (!bn && t && t in v) return v[t];
            switch(t){
                case Sn:
                case En:
                case On:
                    return function() {
                        return new r(this, t);
                    };
            }
            return function() {
                return new r(this);
            };
        }, h = e + " Iterator", p = !1, v = t.prototype, d = v[wn] || v["@@iterator"] || o && v[o], g = !bn && d || l(o), y = "Array" === e && v.entries || d;
        if (y && (u = Qr(y.call(new t))) !== Object.prototype && u.next && (Qr(u) !== mn && (dn ? dn(u, mn) : T(u[wn]) || ie(u, wn, xn)), an(u, h, !0)), gn && o === En && d && d.name !== En && (yn ? _t(v, "name", En) : (p = !0, g = function() {
            return f(d, this);
        })), o) if (s = {
            values: l(En),
            keys: i ? g : l(Sn),
            entries: l(On)
        }, a) for(c in s)(bn || p || !(c in v)) && ie(v, c, s[c]);
        else Ce({
            target: e,
            proto: !0,
            forced: bn || p
        }, s);
        return v[wn] !== g && ie(v, wn, g, {
            name: o
        }), un[e] = g, s;
    }, Pn = function(t, e) {
        return {
            value: t,
            done: e
        };
    }, An = Gr.charAt, jn = "String Iterator", kn = ne.set, In = ne.getterFor(jn);
    Rn(String, "String", function(t) {
        kn(this, {
            type: jn,
            string: Wr(t),
            index: 0
        });
    }, function() {
        var t, e = In(this), r = e.string, n = e.index;
        return n >= r.length ? Pn(void 0, !0) : (t = An(r, n), e.index += t.length, Pn(t, !1));
    });
    var Tn = function(t, e, r) {
        var n, o;
        kt(t);
        try {
            if (!(n = Q(t, "return"))) {
                if ("throw" === e) throw r;
                return r;
            }
            n = f(n, t);
        } catch (t) {
            o = !0, n = t;
        }
        if ("throw" === e) throw r;
        if (o) throw n;
        return kt(n), r;
    }, Mn = function(t, e, r, n) {
        try {
            return n ? e(kt(r)[0], r[1]) : e(r);
        } catch (e) {
            Tn(t, "throw", e);
        }
    }, Ln = dt("iterator"), Un = Array.prototype, Nn = function(t) {
        return void 0 !== t && (un.Array === t || Un[Ln] === t);
    }, Cn = function(t, e, r) {
        u ? Ct.f(t, e, d(0, r)) : t[e] = r;
    }, _n = dt("iterator"), Fn = function(t) {
        if (!P(t)) return Q(t, _n) || Q(t, "@@iterator") || un[pr(t)];
    }, Bn = TypeError, Dn = function(t, e) {
        var r = arguments.length < 2 ? Fn(t) : e;
        if (J(r)) return kt(f(r, t));
        throw new Bn(Y(t) + " is not iterable");
    }, zn = Array, Wn = function(t) {
        var e = it(t), r = Sr(this), n = arguments.length, o = n > 1 ? arguments[1] : void 0, i = void 0 !== o;
        i && (o = ar(o, n > 2 ? arguments[2] : void 0));
        var a, u, s, c, l, h, p = Fn(e), v = 0;
        if (!p || this === zn && Nn(p)) for(a = de(e), u = r ? new this(a) : zn(a); a > v; v++)h = i ? o(e[v], v) : e[v], Cn(u, v, h);
        else for(u = r ? new this : [], l = (c = Dn(e, p)).next; !(s = f(l, c)).done; v++)h = i ? Mn(c, o, [
            s.value,
            v
        ], !0) : s.value, Cn(u, v, h);
        return u.length = v, u;
    }, qn = dt("iterator"), Hn = !1;
    try {
        var $n = 0, Kn = {
            next: function() {
                return {
                    done: !!$n++
                };
            },
            return: function() {
                Hn = !0;
            }
        };
        Kn[qn] = function() {
            return this;
        }, Array.from(Kn, function() {
            throw 2;
        });
    } catch (t) {}
    var Gn = function(t, e) {
        try {
            if (!e && !Hn) return !1;
        } catch (t) {
            return !1;
        }
        var r = !1;
        try {
            var n = {};
            n[qn] = function() {
                return {
                    next: function() {
                        return {
                            done: r = !0
                        };
                    }
                };
            }, t(n);
        } catch (t) {}
        return r;
    }, Vn = !Gn(function(t) {
        Array.from(t);
    });
    Ce({
        target: "Array",
        stat: !0,
        forced: Vn
    }, {
        from: Wn
    });
    var Yn = i, Xn = ye.includes, Jn = a(function() {
        return !Array(1).includes();
    });
    Ce({
        target: "Array",
        proto: !0,
        forced: Jn
    }, {
        includes: function(t) {
            return Xn(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Qe("includes"), Ze("Array", "includes");
    var Qn = Ct.f, Zn = "Array Iterator", to = ne.set, eo = ne.getterFor(Zn), ro = Rn(Array, "Array", function(t, e) {
        to(this, {
            type: Zn,
            target: k(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = eo(this), e = t.target, r = t.index++;
        if (!e || r >= e.length) return t.target = null, Pn(void 0, !0);
        switch(t.kind){
            case "keys":
                return Pn(r, !1);
            case "values":
                return Pn(e[r], !1);
        }
        return Pn([
            r,
            e[r]
        ], !1);
    }, "values"), no = un.Arguments = un.Array;
    if (Qe("keys"), Qe("values"), Qe("entries"), u && "values" !== no.name) try {
        Qn(no, "name", {
            value: "values"
        });
    } catch (t) {}
    cr || ie(Object.prototype, "toString", cr ? ({}).toString : function() {
        return "[object " + pr(this) + "]";
    }, {
        unsafe: !0
    }), Ze("Array", "values");
    var oo = Array, io = a(function() {
        function t() {}
        return !(oo.of.call(t) instanceof t);
    });
    Ce({
        target: "Array",
        stat: !0,
        forced: io
    }, {
        of: function() {
            for(var t = 0, e = arguments.length, r = new (Sr(this) ? this : oo)(e); e > t;)Cn(r, t, arguments[t++]);
            return r.length = e, r;
        }
    });
    var ao = dt("hasInstance"), uo = Function.prototype;
    ao in uo || Ct.f(uo, ao, {
        value: oe(function(t) {
            if (!T(this) || !M(t)) return !1;
            var e = this.prototype;
            return M(e) ? U(e, t) : t instanceof this;
        }, ao)
    }), dt("hasInstance");
    var so = function(t, e, r) {
        return r.get && oe(r.get, e, {
            getter: !0
        }), r.set && oe(r.set, e, {
            setter: !0
        }), Ct.f(t, e, r);
    }, co = zt.EXISTS, fo = Function.prototype, lo = b(fo.toString), ho = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/, po = b(ho.exec);
    u && !co && so(fo, "name", {
        configurable: !0,
        get: function() {
            try {
                return po(ho, lo(this))[1];
            } catch (t) {
                return "";
            }
        }
    });
    var vo = b([].slice), go = Oe.f, yo = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : [], mo = {
        f: function(t) {
            return yo && "Window" === E(t) ? function(t) {
                try {
                    return go(t);
                } catch (t) {
                    return vo(yo);
                }
            }(t) : go(k(t));
        }
    }, bo = a(function() {
        if ("function" == typeof ArrayBuffer) {
            var t = new ArrayBuffer(8);
            Object.isExtensible(t) && Object.defineProperty(t, "a", {
                value: 8
            });
        }
    }), wo = Object.isExtensible, So = a(function() {
        wo(1);
    }) || bo ? function(t) {
        return !!M(t) && (!bo || "ArrayBuffer" !== E(t)) && (!wo || wo(t));
    } : wo, Eo = !a(function() {
        return Object.isExtensible(Object.preventExtensions({}));
    }), Oo = e(function(t) {
        var e = Ct.f, r = !1, n = lt("meta"), o = 0, i = function(t) {
            e(t, n, {
                value: {
                    objectID: "O" + o++,
                    weakData: {}
                }
            });
        }, a = t.exports = {
            enable: function() {
                a.enable = function() {}, r = !0;
                var t = Oe.f, e = b([].splice), o = {};
                o[n] = 1, t(o).length && (Oe.f = function(r) {
                    for(var o = t(r), i = 0, a = o.length; i < a; i++)if (o[i] === n) {
                        e(o, i, 1);
                        break;
                    }
                    return o;
                }, Ce({
                    target: "Object",
                    stat: !0,
                    forced: !0
                }, {
                    getOwnPropertyNames: mo.f
                }));
            },
            fastKey: function(t, e) {
                if (!M(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
                if (!ut(t, n)) {
                    if (!So(t)) return "F";
                    if (!e) return "E";
                    i(t);
                }
                return t[n].objectID;
            },
            getWeakData: function(t, e) {
                if (!ut(t, n)) {
                    if (!So(t)) return !0;
                    if (!e) return !1;
                    i(t);
                }
                return t[n].weakData;
            },
            onFreeze: function(t) {
                return Eo && r && So(t) && !ut(t, n) && i(t), t;
            }
        };
        Jt[n] = !0;
    }), xo = TypeError, Ro = function(t, e) {
        this.stopped = t, this.result = e;
    }, Po = Ro.prototype, Ao = function(t, e, r) {
        var n, o, i, a, u, s, c, l = !(!r || !r.AS_ENTRIES), h = !(!r || !r.IS_RECORD), p = !(!r || !r.IS_ITERATOR), v = !(!r || !r.INTERRUPTED), d = ar(e, r && r.that), g = function(t) {
            return n && Tn(n, "normal", t), new Ro(!0, t);
        }, y = function(t) {
            return l ? (kt(t), v ? d(t[0], t[1], g) : d(t[0], t[1])) : v ? d(t, g) : d(t);
        };
        if (h) n = t.iterator;
        else if (p) n = t;
        else {
            if (!(o = Fn(t))) throw new xo(Y(t) + " is not iterable");
            if (Nn(o)) {
                for(i = 0, a = de(t); a > i; i++)if ((u = y(t[i])) && U(Po, u)) return u;
                return new Ro(!1);
            }
            n = Dn(t, o);
        }
        for(s = h ? t.next : n.next; !(c = f(s, n)).done;){
            try {
                u = y(c.value);
            } catch (t) {
                Tn(n, "throw", t);
            }
            if ("object" == typeof u && u && U(Po, u)) return u;
        }
        return new Ro(!1);
    }, jo = TypeError, ko = function(t, e) {
        if (U(e, t)) return t;
        throw new jo("Incorrect invocation");
    }, Io = function(t, e, r) {
        var n, o;
        return dn && T(n = e.constructor) && n !== r && M(o = n.prototype) && o !== r.prototype && dn(t, o), t;
    }, To = function(t, e, r) {
        var n = -1 !== t.indexOf("Map"), o = -1 !== t.indexOf("Weak"), u = n ? "set" : "add", s = i[t], c = s && s.prototype, f = s, l = {}, h = function(t) {
            var e = b(c[t]);
            ie(c, t, "add" === t ? function(t) {
                return e(this, 0 === t ? 0 : t), this;
            } : "delete" === t ? function(t) {
                return !(o && !M(t)) && e(this, 0 === t ? 0 : t);
            } : "get" === t ? function(t) {
                return o && !M(t) ? void 0 : e(this, 0 === t ? 0 : t);
            } : "has" === t ? function(t) {
                return !(o && !M(t)) && e(this, 0 === t ? 0 : t);
            } : function(t, r) {
                return e(this, 0 === t ? 0 : t, r), this;
            });
        };
        if (Ue(t, !T(s) || !(o || c.forEach && !a(function() {
            (new s).entries().next();
        })))) f = r.getConstructor(e, t, n, u), Oo.enable();
        else if (Ue(t, !0)) {
            var p = new f, v = p[u](o ? {} : -0, 1) !== p, d = a(function() {
                p.has(1);
            }), g = Gn(function(t) {
                new s(t);
            }), y = !o && a(function() {
                for(var t = new s, e = 5; e--;)t[u](e, e);
                return !t.has(-0);
            });
            g || ((f = e(function(t, e) {
                ko(t, c);
                var r = Io(new s, t, f);
                return P(e) || Ao(e, r[u], {
                    that: r,
                    AS_ENTRIES: n
                }), r;
            })).prototype = c, c.constructor = f), (d || y) && (h("delete"), h("has"), n && h("get")), (y || v) && h(u), o && c.clear && delete c.clear;
        }
        return l[t] = f, Ce({
            global: !0,
            constructor: !0,
            forced: f !== s
        }, l), an(f, t), o || r.setStrong(f, t, n), f;
    }, Mo = function(t, e, r) {
        for(var n in e)ie(t, n, e[n], r);
        return t;
    }, Lo = dt("species"), Uo = function(t) {
        var e = L(t);
        u && e && !e[Lo] && so(e, Lo, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, No = Oo.fastKey, Co = ne.set, _o = ne.getterFor, Fo = {
        getConstructor: function(t, e, r, n) {
            var o = t(function(t, o) {
                ko(t, i), Co(t, {
                    type: e,
                    index: Ve(null),
                    first: null,
                    last: null,
                    size: 0
                }), u || (t.size = 0), P(o) || Ao(o, t[n], {
                    that: t,
                    AS_ENTRIES: r
                });
            }), i = o.prototype, a = _o(e), s = function(t, e, r) {
                var n, o, i = a(t), s = c(t, e);
                return s ? s.value = r : (i.last = s = {
                    index: o = No(e, !0),
                    key: e,
                    value: r,
                    previous: n = i.last,
                    next: null,
                    removed: !1
                }, i.first || (i.first = s), n && (n.next = s), u ? i.size++ : t.size++, "F" !== o && (i.index[o] = s)), t;
            }, c = function(t, e) {
                var r, n = a(t), o = No(e);
                if ("F" !== o) return n.index[o];
                for(r = n.first; r; r = r.next)if (r.key === e) return r;
            };
            return Mo(i, {
                clear: function() {
                    for(var t = a(this), e = t.first; e;)e.removed = !0, e.previous && (e.previous = e.previous.next = null), e = e.next;
                    t.first = t.last = null, t.index = Ve(null), u ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, r = a(e), n = c(e, t);
                    if (n) {
                        var o = n.next, i = n.previous;
                        delete r.index[n.index], n.removed = !0, i && (i.next = o), o && (o.previous = i), r.first === n && (r.first = o), r.last === n && (r.last = i), u ? r.size-- : e.size--;
                    }
                    return !!n;
                },
                forEach: function(t) {
                    for(var e, r = a(this), n = ar(t, arguments.length > 1 ? arguments[1] : void 0); e = e ? e.next : r.first;)for(n(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!c(this, t);
                }
            }), Mo(i, r ? {
                get: function(t) {
                    var e = c(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return s(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return s(this, t = 0 === t ? 0 : t, t);
                }
            }), u && so(i, "size", {
                configurable: !0,
                get: function() {
                    return a(this).size;
                }
            }), o;
        },
        setStrong: function(t, e, r) {
            var n = e + " Iterator", o = _o(e), i = _o(n);
            Rn(t, e, function(t, e) {
                Co(this, {
                    type: n,
                    target: t,
                    state: o(t),
                    kind: e,
                    last: null
                });
            }, function() {
                for(var t = i(this), e = t.kind, r = t.last; r && r.removed;)r = r.previous;
                return t.target && (t.last = r = r ? r.next : t.state.first) ? Pn("keys" === e ? r.key : "values" === e ? r.value : [
                    r.key,
                    r.value
                ], !1) : (t.target = null, Pn(void 0, !0));
            }, r ? "entries" : "values", !r, !0), Uo(e);
        }
    };
    To("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, Fo);
    var Bo = Map.prototype, Do = {
        Map: Map,
        set: b(Bo.set),
        get: b(Bo.get),
        has: b(Bo.has),
        remove: b(Bo.delete),
        proto: Bo
    }, zo = Do.Map, Wo = Do.has, qo = Do.get, Ho = Do.set, $o = b([].push), Ko = a(function() {
        return 1 !== zo.groupBy("ab", function(t) {
            return t;
        }).get("a").length;
    });
    Ce({
        target: "Map",
        stat: !0,
        forced: Ko
    }, {
        groupBy: function(t, e) {
            j(t), J(e);
            var r = new zo, n = 0;
            return Ao(t, function(t) {
                var o = e(t, n++);
                Wo(r, o) ? $o(qo(r, o), t) : Ho(r, o, [
                    t
                ]);
            }), r;
        }
    });
    var Go = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, Vo = Et("span").classList, Yo = Vo && Vo.constructor && Vo.constructor.prototype, Xo = Yo === Object.prototype ? void 0 : Yo, Jo = dt("iterator"), Qo = ro.values, Zo = function(t, e) {
        if (t) {
            if (t[Jo] !== Qo) try {
                _t(t, Jo, Qo);
            } catch (e) {
                t[Jo] = Qo;
            }
            if (an(t, e, !0), Go[e]) {
                for(var r in ro)if (t[r] !== ro[r]) try {
                    _t(t, r, ro[r]);
                } catch (e) {
                    t[r] = ro[r];
                }
            }
        }
    };
    for(var ti in Go)Zo(i[ti] && i[ti].prototype, ti);
    Zo(Xo, "DOMTokenList");
    var ei = function(t, e, r) {
        return function(n) {
            var o = it(n), i = arguments.length, a = i > 1 ? arguments[1] : void 0, u = void 0 !== a, s = u ? ar(a, i > 2 ? arguments[2] : void 0) : void 0, c = new t, f = 0;
            return Ao(o, function(t) {
                var n = u ? s(t, f++) : t;
                r ? e(c, kt(n)[0], n[1]) : e(c, n);
            }), c;
        };
    };
    Ce({
        target: "Map",
        stat: !0,
        forced: !0
    }, {
        from: ei(Do.Map, Do.set, !0)
    });
    var ri = function(t, e, r) {
        return function() {
            for(var n = new t, o = arguments.length, i = 0; i < o; i++){
                var a = arguments[i];
                r ? e(n, kt(a)[0], a[1]) : e(n, a);
            }
            return n;
        };
    };
    Ce({
        target: "Map",
        stat: !0,
        forced: !0
    }, {
        of: ri(Do.Map, Do.set, !0)
    });
    var ni = Do.has, oi = function(t) {
        return ni(t), t;
    }, ii = Do.remove;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        deleteAll: function() {
            for(var t, e = oi(this), r = !0, n = 0, o = arguments.length; n < o; n++)t = ii(e, arguments[n]), r = r && t;
            return !!r;
        }
    });
    var ai = Do.get, ui = Do.has, si = Do.set;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        emplace: function(t, e) {
            var r, n, o = oi(this);
            return ui(o, t) ? (r = ai(o, t), "update" in e && (r = e.update(r, t, o), si(o, t, r)), r) : (n = e.insert(t, o), si(o, t, n), n);
        }
    });
    var ci = function(t, e, r) {
        for(var n, o, i = r ? t : t.iterator, a = t.next; !(n = f(a, i)).done;)if (void 0 !== (o = e(n.value))) return o;
    }, fi = Do.Map, li = Do.proto, hi = b(li.forEach), pi = b(li.entries), vi = pi(new fi).next, di = function(t, e, r) {
        return r ? ci({
            iterator: pi(t),
            next: vi
        }, function(t) {
            return e(t[1], t[0]);
        }) : hi(t, e);
    };
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        every: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0);
            return !1 !== di(e, function(t, n) {
                if (!r(t, n, e)) return !1;
            }, !0);
        }
    });
    var gi = Do.Map, yi = Do.set;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        filter: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = new gi;
            return di(e, function(t, o) {
                r(t, o, e) && yi(n, o, t);
            }), n;
        }
    }), Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        find: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = di(e, function(t, n) {
                if (r(t, n, e)) return {
                    value: t
                };
            }, !0);
            return n && n.value;
        }
    }), Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        findKey: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = di(e, function(t, n) {
                if (r(t, n, e)) return {
                    key: n
                };
            }, !0);
            return n && n.key;
        }
    }), Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        includes: function(t) {
            return !0 === di(oi(this), function(e) {
                if ((r = e) === (n = t) || r != r && n != n) return !0;
                var r, n;
            }, !0);
        }
    });
    var mi = Do.Map;
    Ce({
        target: "Map",
        stat: !0,
        forced: !0
    }, {
        keyBy: function(t, e) {
            var r = new (T(this) ? this : mi);
            J(e);
            var n = J(r.set);
            return Ao(t, function(t) {
                f(n, r, e(t), t);
            }), r;
        }
    }), Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        keyOf: function(t) {
            var e = di(oi(this), function(e, r) {
                if (e === t) return {
                    key: r
                };
            }, !0);
            return e && e.key;
        }
    });
    var bi = Do.Map, wi = Do.set;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        mapKeys: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = new bi;
            return di(e, function(t, o) {
                wi(n, r(t, o, e), t);
            }), n;
        }
    });
    var Si = Do.Map, Ei = Do.set;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        mapValues: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = new Si;
            return di(e, function(t, o) {
                Ei(n, o, r(t, o, e));
            }), n;
        }
    });
    var Oi = Do.set;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        arity: 1,
        forced: !0
    }, {
        merge: function(t) {
            for(var e = oi(this), r = arguments.length, n = 0; n < r;)Ao(arguments[n++], function(t, r) {
                Oi(e, t, r);
            }, {
                AS_ENTRIES: !0
            });
            return e;
        }
    });
    var xi = TypeError;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        reduce: function(t) {
            var e = oi(this), r = arguments.length < 2, n = r ? void 0 : arguments[1];
            if (J(t), di(e, function(o, i) {
                r ? (r = !1, n = o) : n = t(n, o, i, e);
            }), r) throw new xi("Reduce of empty map with no initial value");
            return n;
        }
    }), Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        some: function(t) {
            var e = oi(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0);
            return !0 === di(e, function(t, n) {
                if (r(t, n, e)) return !0;
            }, !0);
        }
    });
    var Ri = TypeError, Pi = Do.get, Ai = Do.has, ji = Do.set;
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        update: function(t, e) {
            var r = oi(this), n = arguments.length;
            J(e);
            var o = Ai(r, t);
            if (!o && n < 3) throw new Ri("Updating absent value");
            var i = o ? Pi(r, t) : J(n > 2 ? arguments[2] : void 0)(t, r);
            return ji(r, t, e(i, t, r)), r;
        }
    });
    var ki = TypeError, Ii = function(t, e) {
        var r, n = kt(this), o = J(n.get), i = J(n.has), a = J(n.set), u = arguments.length > 2 ? arguments[2] : void 0;
        if (!T(e) && !T(u)) throw new ki("At least one callback required");
        return f(i, n, t) ? (r = f(o, n, t), T(e) && (r = e(r), f(a, n, t, r))) : T(u) && (r = u(), f(a, n, t, r)), r;
    };
    Ce({
        target: "Map",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        upsert: Ii
    }), Ce({
        target: "Map",
        proto: !0,
        real: !0,
        name: "upsert",
        forced: !0
    }, {
        updateOrInsert: Ii
    });
    var Ti = b(1..valueOf), Mi = "\t\n\v\f\r                　\u2028\u2029\ufeff", Li = b("".replace), Ui = RegExp("^[" + Mi + "]+"), Ni = RegExp("(^|[^" + Mi + "])[" + Mi + "]+$"), Ci = function(t) {
        return function(e) {
            var r = Wr(j(e));
            return 1 & t && (r = Li(r, Ui, "")), 2 & t && (r = Li(r, Ni, "$1")), r;
        };
    }, _i = {
        start: Ci(1),
        end: Ci(2),
        trim: Ci(3)
    }, Fi = Oe.f, Bi = Rt.f, Di = Ct.f, zi = _i.trim, Wi = "Number", qi = i[Wi], Hi = qi.prototype, $i = i.TypeError, Ki = b("".slice), Gi = b("".charCodeAt), Vi = Ue(Wi, !qi(" 0o1") || !qi("0b1") || qi("+0x1")), Yi = function(t) {
        var e, r = arguments.length < 1 ? 0 : qi(function(t) {
            var e = mt(t, "number");
            return "bigint" == typeof e ? e : function(t) {
                var e, r, n, o, i, a, u, s, c = mt(t, "number");
                if (G(c)) throw new $i("Cannot convert a Symbol value to a number");
                if ("string" == typeof c && c.length > 2) {
                    if (c = zi(c), 43 === (e = Gi(c, 0)) || 45 === e) {
                        if (88 === (r = Gi(c, 2)) || 120 === r) return NaN;
                    } else if (48 === e) {
                        switch(Gi(c, 1)){
                            case 66:
                            case 98:
                                n = 2, o = 49;
                                break;
                            case 79:
                            case 111:
                                n = 8, o = 55;
                                break;
                            default:
                                return +c;
                        }
                        for(a = (i = Ki(c, 2)).length, u = 0; u < a; u++)if ((s = Gi(i, u)) < 48 || s > o) return NaN;
                        return parseInt(i, n);
                    }
                }
                return +c;
            }(e);
        }(t));
        return U(Hi, e = this) && a(function() {
            Ti(e);
        }) ? Io(Object(r), this, Yi) : r;
    };
    Yi.prototype = Hi, Vi && (Hi.constructor = Yi), Ce({
        global: !0,
        constructor: !0,
        wrap: !0,
        forced: Vi
    }, {
        Number: Yi
    }), Vi && function(t, e) {
        for(var r, n = u ? Fi(e) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","), o = 0; n.length > o; o++)ut(e, r = n[o]) && !ut(t, r) && Di(t, r, Bi(e, r));
    }(Yn[Wi], qi), Ce({
        target: "Number",
        stat: !0,
        nonConfigurable: !0,
        nonWritable: !0
    }, {
        EPSILON: Math.pow(2, -52)
    });
    var Xi = i.isFinite;
    Ce({
        target: "Number",
        stat: !0
    }, {
        isFinite: Number.isFinite || function(t) {
            return "number" == typeof t && Xi(t);
        }
    });
    var Ji = Math.floor, Qi = Number.isInteger || function(t) {
        return !M(t) && isFinite(t) && Ji(t) === t;
    };
    Ce({
        target: "Number",
        stat: !0
    }, {
        isInteger: Qi
    }), Ce({
        target: "Number",
        stat: !0
    }, {
        isNaN: function(t) {
            return t != t;
        }
    });
    var Zi = Math.abs;
    Ce({
        target: "Number",
        stat: !0
    }, {
        isSafeInteger: function(t) {
            return Qi(t) && Zi(t) <= 9007199254740991;
        }
    }), Ce({
        target: "Number",
        stat: !0,
        nonConfigurable: !0,
        nonWritable: !0
    }, {
        MAX_SAFE_INTEGER: 9007199254740991
    }), Ce({
        target: "Number",
        stat: !0,
        nonConfigurable: !0,
        nonWritable: !0
    }, {
        MIN_SAFE_INTEGER: -9007199254740991
    });
    var ta = _i.trim, ea = b("".charAt), ra = i.parseFloat, na = i.Symbol, oa = na && na.iterator, ia = 1 / ra(Mi + "-0") != -Infinity || oa && !a(function() {
        ra(Object(oa));
    }) ? function(t) {
        var e = ta(Wr(t)), r = ra(e);
        return 0 === r && "-" === ea(e, 0) ? -0 : r;
    } : ra;
    Ce({
        target: "Number",
        stat: !0,
        forced: Number.parseFloat !== ia
    }, {
        parseFloat: ia
    });
    var aa = _i.trim, ua = i.parseInt, sa = i.Symbol, ca = sa && sa.iterator, fa = /^[+-]?0x/i, la = b(fa.exec), ha = 8 !== ua(Mi + "08") || 22 !== ua(Mi + "0x16") || ca && !a(function() {
        ua(Object(ca));
    }) ? function(t, e) {
        var r = aa(Wr(t));
        return ua(r, e >>> 0 || (la(fa, r) ? 16 : 10));
    } : ua;
    Ce({
        target: "Number",
        stat: !0,
        forced: Number.parseInt !== ha
    }, {
        parseInt: ha
    });
    var pa = b(v.f), va = b([].push), da = u && a(function() {
        var t = Object.create(null);
        return t[2] = 2, !pa(t, 2);
    }), ga = function(t) {
        return function(e) {
            for(var r, n = k(e), o = _e(n), i = da && null === Qr(n), a = o.length, s = 0, c = []; a > s;)r = o[s++], u && !(i ? r in n : pa(n, r)) || va(c, t ? [
                r,
                n[r]
            ] : n[r]);
            return c;
        };
    }, ya = {
        entries: ga(!0),
        values: ga(!1)
    }, ma = ya.entries;
    Ce({
        target: "Object",
        stat: !0
    }, {
        entries: function(t) {
            return ma(t);
        }
    }), Ce({
        target: "Object",
        stat: !0,
        sham: !u
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, r, n = k(t), o = Rt.f, i = Pe(n), a = {}, u = 0; i.length > u;)void 0 !== (r = o(n, e = i[u++])) && Cn(a, e, r);
            return a;
        }
    });
    var ba = a(function() {
        _e(1);
    });
    Ce({
        target: "Object",
        stat: !0,
        forced: ba
    }, {
        keys: function(t) {
            return _e(it(t));
        }
    });
    var wa = Object.is || function(t, e) {
        return t === e ? 0 !== t || 1 / t == 1 / e : t != t && e != e;
    };
    Ce({
        target: "Object",
        stat: !0
    }, {
        is: wa
    });
    var Sa = ya.values;
    Ce({
        target: "Object",
        stat: !0
    }, {
        values: function(t) {
            return Sa(t);
        }
    }), Ce({
        target: "Object",
        stat: !0
    }, {
        hasOwn: ut
    });
    var Ea = Function.prototype, Oa = Ea.apply, xa = Ea.call, Ra = "object" == typeof Reflect && Reflect.apply || (s ? xa.bind(Oa) : function() {
        return xa.apply(Oa, arguments);
    }), Pa = !a(function() {
        Reflect.apply(function() {});
    });
    Ce({
        target: "Reflect",
        stat: !0,
        forced: Pa
    }, {
        apply: function(t, e, r) {
            return Ra(J(t), e, kt(r));
        }
    });
    var Aa = Function, ja = b([].concat), ka = b([].join), Ia = {}, Ta = s ? Aa.bind : function(t) {
        var e = J(this), r = e.prototype, n = vo(arguments, 1), o = function() {
            var r = ja(n, vo(arguments));
            return this instanceof o ? function(t, e, r) {
                if (!ut(Ia, e)) {
                    for(var n = [], o = 0; o < e; o++)n[o] = "a[" + o + "]";
                    Ia[e] = Aa("C,a", "return new C(" + ka(n, ",") + ")");
                }
                return Ia[e](t, r);
            }(e, r.length, r) : e.apply(t, r);
        };
        return M(r) && (o.prototype = r), o;
    }, Ma = TypeError, La = function(t) {
        if (Sr(t)) return t;
        throw new Ma(Y(t) + " is not a constructor");
    }, Ua = L("Reflect", "construct"), Na = Object.prototype, Ca = [].push, _a = a(function() {
        function t() {}
        return !(Ua(function() {}, [], t) instanceof t);
    }), Fa = !a(function() {
        Ua(function() {});
    }), Ba = _a || Fa;
    Ce({
        target: "Reflect",
        stat: !0,
        forced: Ba,
        sham: Ba
    }, {
        construct: function(t, e) {
            La(t), kt(e);
            var r = arguments.length < 3 ? t : La(arguments[2]);
            if (Fa && !_a) return Ua(t, e, r);
            if (t === r) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var n = [
                    null
                ];
                return Ra(Ca, n, e), new (Ra(Ta, t, n));
            }
            var o = r.prototype, i = Ve(M(o) ? o : Na), a = Ra(t, i, e);
            return M(a) ? a : i;
        }
    });
    var Da = a(function() {
        Reflect.defineProperty(Ct.f({}, 1, {
            value: 1
        }), 1, {
            value: 2
        });
    });
    Ce({
        target: "Reflect",
        stat: !0,
        forced: Da,
        sham: !u
    }, {
        defineProperty: function(t, e, r) {
            kt(t);
            var n = bt(e);
            kt(r);
            try {
                return Ct.f(t, n, r), !0;
            } catch (t) {
                return !1;
            }
        }
    });
    var za = Rt.f;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        deleteProperty: function(t, e) {
            var r = za(kt(t), e);
            return !(r && !r.configurable) && delete t[e];
        }
    });
    var Wa = function(t) {
        return void 0 !== t && (ut(t, "value") || ut(t, "writable"));
    };
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        get: function t(e, r) {
            var n, o, i = arguments.length < 3 ? e : arguments[2];
            return kt(e) === i ? e[r] : (n = Rt.f(e, r)) ? Wa(n) ? n.value : void 0 === n.get ? void 0 : f(n.get, i) : M(o = Qr(e)) ? t(o, r, i) : void 0;
        }
    }), Ce({
        target: "Reflect",
        stat: !0,
        sham: !u
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return Rt.f(kt(t), e);
        }
    }), Ce({
        target: "Reflect",
        stat: !0,
        sham: !Vr
    }, {
        getPrototypeOf: function(t) {
            return Qr(kt(t));
        }
    }), Ce({
        target: "Reflect",
        stat: !0
    }, {
        has: function(t, e) {
            return e in t;
        }
    }), Ce({
        target: "Reflect",
        stat: !0
    }, {
        isExtensible: function(t) {
            return kt(t), So(t);
        }
    }), Ce({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: Pe
    }), Ce({
        target: "Reflect",
        stat: !0,
        sham: !Eo
    }, {
        preventExtensions: function(t) {
            kt(t);
            try {
                var e = L("Object", "preventExtensions");
                return e && e(t), !0;
            } catch (t) {
                return !1;
            }
        }
    });
    var qa = a(function() {
        var t = function() {}, e = Ct.f(new t, "a", {
            configurable: !0
        });
        return !1 !== Reflect.set(t.prototype, "a", 1, e);
    });
    Ce({
        target: "Reflect",
        stat: !0,
        forced: qa
    }, {
        set: function t(e, r, n) {
            var o, i, a, u = arguments.length < 4 ? e : arguments[3], s = Rt.f(kt(e), r);
            if (!s) {
                if (M(i = Qr(e))) return t(i, r, n, u);
                s = d(0);
            }
            if (Wa(s)) {
                if (!1 === s.writable || !M(u)) return !1;
                if (o = Rt.f(u, r)) {
                    if (o.get || o.set || !1 === o.writable) return !1;
                    o.value = n, Ct.f(u, r, o);
                } else Ct.f(u, r, d(0, n));
            } else {
                if (void 0 === (a = s.set)) return !1;
                f(a, u, n);
            }
            return !0;
        }
    }), dn && Ce({
        target: "Reflect",
        stat: !0
    }, {
        setPrototypeOf: function(t, e) {
            kt(t), vn(e);
            try {
                return dn(t, e), !0;
            } catch (t) {
                return !1;
            }
        }
    }), Ce({
        global: !0
    }, {
        Reflect: {}
    }), an(i.Reflect, "Reflect", !0);
    var Ha = Oo.getWeakData, $a = ne.set, Ka = ne.getterFor, Ga = Ar.find, Va = Ar.findIndex, Ya = b([].splice), Xa = 0, Ja = function(t) {
        return t.frozen || (t.frozen = new Qa);
    }, Qa = function() {
        this.entries = [];
    }, Za = function(t, e) {
        return Ga(t.entries, function(t) {
            return t[0] === e;
        });
    };
    Qa.prototype = {
        get: function(t) {
            var e = Za(this, t);
            if (e) return e[1];
        },
        has: function(t) {
            return !!Za(this, t);
        },
        set: function(t, e) {
            var r = Za(this, t);
            r ? r[1] = e : this.entries.push([
                t,
                e
            ]);
        },
        delete: function(t) {
            var e = Va(this.entries, function(e) {
                return e[0] === t;
            });
            return ~e && Ya(this.entries, e, 1), !!~e;
        }
    };
    var tu, eu = {
        getConstructor: function(t, e, r, n) {
            var o = t(function(t, o) {
                ko(t, i), $a(t, {
                    type: e,
                    id: Xa++,
                    frozen: null
                }), P(o) || Ao(o, t[n], {
                    that: t,
                    AS_ENTRIES: r
                });
            }), i = o.prototype, a = Ka(e), u = function(t, e, r) {
                var n = a(t), o = Ha(kt(e), !0);
                return !0 === o ? Ja(n).set(e, r) : o[n.id] = r, t;
            };
            return Mo(i, {
                delete: function(t) {
                    var e = a(this);
                    if (!M(t)) return !1;
                    var r = Ha(t);
                    return !0 === r ? Ja(e).delete(t) : r && ut(r, e.id) && delete r[e.id];
                },
                has: function(t) {
                    var e = a(this);
                    if (!M(t)) return !1;
                    var r = Ha(t);
                    return !0 === r ? Ja(e).has(t) : r && ut(r, e.id);
                }
            }), Mo(i, r ? {
                get: function(t) {
                    var e = a(this);
                    if (M(t)) {
                        var r = Ha(t);
                        if (!0 === r) return Ja(e).get(t);
                        if (r) return r[e.id];
                    }
                },
                set: function(t, e) {
                    return u(this, t, e);
                }
            } : {
                add: function(t) {
                    return u(this, t, !0);
                }
            }), o;
        }
    }, ru = ne.enforce, nu = Object, ou = Array.isArray, iu = nu.isExtensible, au = nu.isFrozen, uu = nu.isSealed, su = nu.freeze, cu = nu.seal, fu = !i.ActiveXObject && "ActiveXObject" in i, lu = function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, hu = To("WeakMap", lu, eu), pu = hu.prototype, vu = b(pu.set);
    if (Vt) if (fu) {
        tu = eu.getConstructor(lu, "WeakMap", !0), Oo.enable();
        var du = b(pu.delete), gu = b(pu.has), yu = b(pu.get);
        Mo(pu, {
            delete: function(t) {
                if (M(t) && !iu(t)) {
                    var e = ru(this);
                    return e.frozen || (e.frozen = new tu), du(this, t) || e.frozen.delete(t);
                }
                return du(this, t);
            },
            has: function(t) {
                if (M(t) && !iu(t)) {
                    var e = ru(this);
                    return e.frozen || (e.frozen = new tu), gu(this, t) || e.frozen.has(t);
                }
                return gu(this, t);
            },
            get: function(t) {
                if (M(t) && !iu(t)) {
                    var e = ru(this);
                    return e.frozen || (e.frozen = new tu), gu(this, t) ? yu(this, t) : e.frozen.get(t);
                }
                return yu(this, t);
            },
            set: function(t, e) {
                if (M(t) && !iu(t)) {
                    var r = ru(this);
                    r.frozen || (r.frozen = new tu), gu(this, t) ? vu(this, t, e) : r.frozen.set(t, e);
                } else vu(this, t, e);
                return this;
            }
        });
    } else Eo && a(function() {
        var t = su([]);
        return vu(new hu, t, 1), !au(t);
    }) && Mo(pu, {
        set: function(t, e) {
            var r;
            return ou(t) && (au(t) ? r = su : uu(t) && (r = cu)), vu(this, t, e), r && r(t), this;
        }
    });
    var mu = L("Map"), bu = L("WeakMap"), wu = b([].push), Su = nt("metadata"), Eu = Su.store || (Su.store = new bu), Ou = function(t, e, r) {
        var n = Eu.get(t);
        if (!n) {
            if (!r) return;
            Eu.set(t, n = new mu);
        }
        var o = n.get(e);
        if (!o) {
            if (!r) return;
            n.set(e, o = new mu);
        }
        return o;
    }, xu = {
        store: Eu,
        getMap: Ou,
        has: function(t, e, r) {
            var n = Ou(e, r, !1);
            return void 0 !== n && n.has(t);
        },
        get: function(t, e, r) {
            var n = Ou(e, r, !1);
            return void 0 === n ? void 0 : n.get(t);
        },
        set: function(t, e, r, n) {
            Ou(r, n, !0).set(t, e);
        },
        keys: function(t, e) {
            var r = Ou(t, e, !1), n = [];
            return r && r.forEach(function(t, e) {
                wu(n, e);
            }), n;
        },
        toKey: function(t) {
            return void 0 === t || "symbol" == typeof t ? t : String(t);
        }
    }, Ru = xu.toKey, Pu = xu.set;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        defineMetadata: function(t, e, r) {
            var n = arguments.length < 4 ? void 0 : Ru(arguments[3]);
            Pu(t, e, kt(r), n);
        }
    });
    var Au = xu.toKey, ju = xu.getMap, ku = xu.store;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        deleteMetadata: function(t, e) {
            var r = arguments.length < 3 ? void 0 : Au(arguments[2]), n = ju(kt(e), r, !1);
            if (void 0 === n || !n.delete(t)) return !1;
            if (n.size) return !0;
            var o = ku.get(e);
            return o.delete(r), !!o.size || ku.delete(e);
        }
    });
    var Iu = xu.has, Tu = xu.get, Mu = xu.toKey, Lu = function(t, e, r) {
        if (Iu(t, e, r)) return Tu(t, e, r);
        var n = Qr(e);
        return null !== n ? Lu(t, n, r) : void 0;
    };
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        getMetadata: function(t, e) {
            var r = arguments.length < 3 ? void 0 : Mu(arguments[2]);
            return Lu(t, kt(e), r);
        }
    });
    var Uu = Do.Map, Nu = Do.has, Cu = Do.set, _u = b([].push), Fu = b(function(t) {
        var e, r, n, o = it(this), i = de(o), a = [], u = new Uu, s = P(t) ? function(t) {
            return t;
        } : J(t);
        for(e = 0; e < i; e++)n = s(r = o[e]), Nu(u, n) || Cu(u, n, r);
        return di(u, function(t) {
            _u(a, t);
        }), a;
    }), Bu = b([].concat), Du = xu.keys, zu = xu.toKey, Wu = function(t, e) {
        var r = Du(t, e), n = Qr(t);
        if (null === n) return r;
        var o = Wu(n, e);
        return o.length ? r.length ? Fu(Bu(r, o)) : o : r;
    };
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        getMetadataKeys: function(t) {
            var e = arguments.length < 2 ? void 0 : zu(arguments[1]);
            return Wu(kt(t), e);
        }
    });
    var qu = xu.get, Hu = xu.toKey;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        getOwnMetadata: function(t, e) {
            var r = arguments.length < 3 ? void 0 : Hu(arguments[2]);
            return qu(t, kt(e), r);
        }
    });
    var $u = xu.keys, Ku = xu.toKey;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        getOwnMetadataKeys: function(t) {
            var e = arguments.length < 2 ? void 0 : Ku(arguments[1]);
            return $u(kt(t), e);
        }
    });
    var Gu = xu.has, Vu = xu.toKey, Yu = function(t, e, r) {
        if (Gu(t, e, r)) return !0;
        var n = Qr(e);
        return null !== n && Yu(t, n, r);
    };
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        hasMetadata: function(t, e) {
            var r = arguments.length < 3 ? void 0 : Vu(arguments[2]);
            return Yu(t, kt(e), r);
        }
    });
    var Xu = xu.has, Ju = xu.toKey;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        hasOwnMetadata: function(t, e) {
            var r = arguments.length < 3 ? void 0 : Ju(arguments[2]);
            return Xu(t, kt(e), r);
        }
    });
    var Qu = xu.toKey, Zu = xu.set;
    Ce({
        target: "Reflect",
        stat: !0
    }, {
        metadata: function(t, e) {
            return function(r, n) {
                Zu(t, e, kt(r), Qu(n));
            };
        }
    });
    var ts = dt("match"), es = function(t) {
        var e;
        return M(t) && (void 0 !== (e = t[ts]) ? !!e : "RegExp" === E(t));
    }, rs = function() {
        var t = kt(this), e = "";
        return t.hasIndices && (e += "d"), t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.unicodeSets && (e += "v"), t.sticky && (e += "y"), e;
    }, ns = RegExp.prototype, os = function(t) {
        var e = t.flags;
        return void 0 !== e || "flags" in ns || ut(t, "flags") || !U(ns, t) ? e : f(rs, t);
    }, is = i.RegExp, as = a(function() {
        var t = is("a", "y");
        return t.lastIndex = 2, null !== t.exec("abcd");
    }), us = as || a(function() {
        return !is("a", "y").sticky;
    }), ss = as || a(function() {
        var t = is("^r", "gy");
        return t.lastIndex = 2, null !== t.exec("str");
    }), cs = {
        BROKEN_CARET: ss,
        MISSED_STICKY: us,
        UNSUPPORTED_Y: as
    }, fs = Ct.f, ls = function(t, e, r) {
        r in t || fs(t, r, {
            configurable: !0,
            get: function() {
                return e[r];
            },
            set: function(t) {
                e[r] = t;
            }
        });
    }, hs = i.RegExp, ps = a(function() {
        var t = hs(".", "s");
        return !(t.dotAll && t.test("\n") && "s" === t.flags);
    }), vs = i.RegExp, ds = a(function() {
        var t = vs("(?<a>b)", "g");
        return "b" !== t.exec("b").groups.a || "bc" !== "b".replace(t, "$<a>c");
    }), gs = Oe.f, ys = ne.enforce, ms = dt("match"), bs = i.RegExp, ws = bs.prototype, Ss = i.SyntaxError, Es = b(ws.exec), Os = b("".charAt), xs = b("".replace), Rs = b("".indexOf), Ps = b("".slice), As = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/, js = /a/g, ks = /a/g, Is = new bs(js) !== js, Ts = cs.MISSED_STICKY, Ms = cs.UNSUPPORTED_Y, Ls = u && (!Is || Ts || ps || ds || a(function() {
        return ks[ms] = !1, bs(js) !== js || bs(ks) === ks || "/a/i" !== String(bs(js, "i"));
    }));
    if (Ue("RegExp", Ls)) {
        for(var Us = function(t, e) {
            var r, n, o, i, a, u, s = U(ws, this), c = es(t), f = void 0 === e, l = [], h = t;
            if (!s && c && f && t.constructor === Us) return t;
            if ((c || U(ws, t)) && (t = t.source, f && (e = os(h))), t = void 0 === t ? "" : Wr(t), e = void 0 === e ? "" : Wr(e), h = t, ps && "dotAll" in js && (n = !!e && Rs(e, "s") > -1) && (e = xs(e, /s/g, "")), r = e, Ts && "sticky" in js && (o = !!e && Rs(e, "y") > -1) && Ms && (e = xs(e, /y/g, "")), ds && (i = function(t) {
                for(var e, r = t.length, n = 0, o = "", i = [], a = Ve(null), u = !1, s = !1, c = 0, f = ""; n <= r; n++){
                    if ("\\" === (e = Os(t, n))) e += Os(t, ++n);
                    else if ("]" === e) u = !1;
                    else if (!u) switch(!0){
                        case "[" === e:
                            u = !0;
                            break;
                        case "(" === e:
                            if (o += e, "?:" === Ps(t, n + 1, n + 3)) continue;
                            Es(As, Ps(t, n + 1)) && (n += 2, s = !0), c++;
                            continue;
                        case ">" === e && s:
                            if ("" === f || ut(a, f)) throw new Ss("Invalid capture group name");
                            a[f] = !0, i[i.length] = [
                                f,
                                c
                            ], s = !1, f = "";
                            continue;
                    }
                    s ? f += e : o += e;
                }
                return [
                    o,
                    i
                ];
            }(t), t = i[0], l = i[1]), a = Io(bs(t, e), s ? this : ws, Us), (n || o || l.length) && (u = ys(a), n && (u.dotAll = !0, u.raw = Us(function(t) {
                for(var e, r = t.length, n = 0, o = "", i = !1; n <= r; n++)"\\" !== (e = Os(t, n)) ? i || "." !== e ? ("[" === e ? i = !0 : "]" === e && (i = !1), o += e) : o += "[\\s\\S]" : o += e + Os(t, ++n);
                return o;
            }(t), r)), o && (u.sticky = !0), l.length && (u.groups = l)), t !== h) try {
                _t(a, "source", "" === h ? "(?:)" : h);
            } catch (t) {}
            return a;
        }, Ns = gs(bs), Cs = 0; Ns.length > Cs;)ls(Us, bs, Ns[Cs++]);
        ws.constructor = Us, Us.prototype = ws, ie(i, "RegExp", Us, {
            constructor: !0
        });
    }
    Uo("RegExp");
    var _s = zt.PROPER, Fs = "toString", Bs = RegExp.prototype, Ds = Bs[Fs];
    (a(function() {
        return "/a/b" !== Ds.call({
            source: "a",
            flags: "b"
        });
    }) || _s && Ds.name !== Fs) && ie(Bs, Fs, function() {
        var t = kt(this);
        return "/" + Wr(t.source) + "/" + Wr(os(t));
    }, {
        unsafe: !0
    });
    var zs = ne.get, Ws = RegExp.prototype, qs = TypeError;
    u && ps && so(Ws, "dotAll", {
        configurable: !0,
        get: function() {
            if (this !== Ws) {
                if ("RegExp" === E(this)) return !!zs(this).dotAll;
                throw new qs("Incompatible receiver, RegExp required");
            }
        }
    });
    var Hs = ne.get, $s = nt("native-string-replace", String.prototype.replace), Ks = RegExp.prototype.exec, Gs = Ks, Vs = b("".charAt), Ys = b("".indexOf), Xs = b("".replace), Js = b("".slice), Qs = function() {
        var t = /a/, e = /b*/g;
        return f(Ks, t, "a"), f(Ks, e, "a"), 0 !== t.lastIndex || 0 !== e.lastIndex;
    }(), Zs = cs.BROKEN_CARET, tc = void 0 !== /()??/.exec("")[1];
    (Qs || tc || Zs || ps || ds) && (Gs = function(t) {
        var e, r, n, o, i, a, u, s = this, c = Hs(s), l = Wr(t), h = c.raw;
        if (h) return h.lastIndex = s.lastIndex, e = f(Gs, h, l), s.lastIndex = h.lastIndex, e;
        var p = c.groups, v = Zs && s.sticky, d = f(rs, s), g = s.source, y = 0, m = l;
        if (v && (d = Xs(d, "y", ""), -1 === Ys(d, "g") && (d += "g"), m = Js(l, s.lastIndex), s.lastIndex > 0 && (!s.multiline || s.multiline && "\n" !== Vs(l, s.lastIndex - 1)) && (g = "(?: " + g + ")", m = " " + m, y++), r = new RegExp("^(?:" + g + ")", d)), tc && (r = new RegExp("^" + g + "$(?!\\s)", d)), Qs && (n = s.lastIndex), o = f(Ks, v ? r : s, m), v ? o ? (o.input = Js(o.input, y), o[0] = Js(o[0], y), o.index = s.lastIndex, s.lastIndex += o[0].length) : s.lastIndex = 0 : Qs && o && (s.lastIndex = s.global ? o.index + o[0].length : n), tc && o && o.length > 1 && f($s, o[0], r, function() {
            for(i = 1; i < arguments.length - 2; i++)void 0 === arguments[i] && (o[i] = void 0);
        }), o && p) for(o.groups = a = Ve(null), i = 0; i < p.length; i++)a[(u = p[i])[0]] = o[u[1]];
        return o;
    });
    var ec = Gs;
    Ce({
        target: "RegExp",
        proto: !0,
        forced: /./.exec !== ec
    }, {
        exec: ec
    });
    var rc = i.RegExp, nc = rc.prototype;
    u && a(function() {
        var t = !0;
        try {
            rc(".", "d");
        } catch (e) {
            t = !1;
        }
        var e = {}, r = "", n = t ? "dgimsy" : "gimsy", o = function(t, n) {
            Object.defineProperty(e, t, {
                get: function() {
                    return r += n, !0;
                }
            });
        }, i = {
            dotAll: "s",
            global: "g",
            ignoreCase: "i",
            multiline: "m",
            sticky: "y"
        };
        for(var a in t && (i.hasIndices = "d"), i)o(a, i[a]);
        return Object.getOwnPropertyDescriptor(nc, "flags").get.call(e) !== n || r !== n;
    }) && so(nc, "flags", {
        configurable: !0,
        get: rs
    });
    var oc = ne.get, ic = RegExp.prototype, ac = TypeError;
    u && cs.MISSED_STICKY && so(ic, "sticky", {
        configurable: !0,
        get: function() {
            if (this !== ic) {
                if ("RegExp" === E(this)) return !!oc(this).sticky;
                throw new ac("Incompatible receiver, RegExp required");
            }
        }
    });
    var uc, sc, cc = (uc = !1, (sc = /[ac]/).exec = function() {
        return uc = !0, /./.exec.apply(this, arguments);
    }, !0 === sc.test("abc") && uc), fc = /./.test;
    Ce({
        target: "RegExp",
        proto: !0,
        forced: !cc
    }, {
        test: function(t) {
            var e = kt(this), r = Wr(t), n = e.exec;
            if (!T(n)) return f(fc, e, r);
            var o = f(n, e, r);
            return null !== o && (kt(o), !0);
        }
    });
    var lc = dt("species"), hc = RegExp.prototype, pc = function(t, e, r, n) {
        var o = dt(t), i = !a(function() {
            var e = {};
            return e[o] = function() {
                return 7;
            }, 7 !== ""[t](e);
        }), u = i && !a(function() {
            var e = !1, r = /a/;
            return "split" === t && ((r = {}).constructor = {}, r.constructor[lc] = function() {
                return r;
            }, r.flags = "", r[o] = /./[o]), r.exec = function() {
                return e = !0, null;
            }, r[o](""), !e;
        });
        if (!i || !u || r) {
            var s = /./[o], c = e(o, ""[t], function(t, e, r, n, o) {
                var a = e.exec;
                return a === ec || a === hc.exec ? i && !o ? {
                    done: !0,
                    value: f(s, e, r, n)
                } : {
                    done: !0,
                    value: f(t, r, e, n)
                } : {
                    done: !1
                };
            });
            ie(String.prototype, t, c[0]), ie(hc, o, c[1]);
        }
        n && _t(hc[o], "sham", !0);
    }, vc = Gr.charAt, dc = function(t, e, r) {
        return e + (r ? vc(t, e).length : 1);
    }, gc = TypeError, yc = function(t, e) {
        var r = t.exec;
        if (T(r)) {
            var n = f(r, t, e);
            return null !== n && kt(n), n;
        }
        if ("RegExp" === E(t)) return f(ec, t, e);
        throw new gc("RegExp#exec called on incompatible receiver");
    };
    pc("match", function(t, e, r) {
        return [
            function(e) {
                var r = j(this), n = P(e) ? void 0 : Q(e, t);
                return n ? f(n, e, r) : new RegExp(e)[t](Wr(r));
            },
            function(t) {
                var n = kt(this), o = Wr(t), i = r(e, n, o);
                if (i.done) return i.value;
                if (!n.global) return yc(n, o);
                var a = n.unicode;
                n.lastIndex = 0;
                for(var u, s = [], c = 0; null !== (u = yc(n, o));){
                    var f = Wr(u[0]);
                    s[c] = f, "" === f && (n.lastIndex = dc(o, ve(n.lastIndex), a)), c++;
                }
                return 0 === c ? null : s;
            }
        ];
    });
    var mc = Math.floor, bc = b("".charAt), wc = b("".replace), Sc = b("".slice), Ec = /\$([$&'`]|\d{1,2}|<[^>]*>)/g, Oc = /\$([$&'`]|\d{1,2})/g, xc = function(t, e, r, n, o, i) {
        var a = r + t.length, u = n.length, s = Oc;
        return void 0 !== o && (o = it(o), s = Ec), wc(i, s, function(i, s) {
            var c;
            switch(bc(s, 0)){
                case "$":
                    return "$";
                case "&":
                    return t;
                case "`":
                    return Sc(e, 0, r);
                case "'":
                    return Sc(e, a);
                case "<":
                    c = o[Sc(s, 1, -1)];
                    break;
                default:
                    var f = +s;
                    if (0 === f) return i;
                    if (f > u) {
                        var l = mc(f / 10);
                        return 0 === l ? i : l <= u ? void 0 === n[l - 1] ? bc(s, 1) : n[l - 1] + bc(s, 1) : i;
                    }
                    c = n[f - 1];
            }
            return void 0 === c ? "" : c;
        });
    }, Rc = dt("replace"), Pc = Math.max, Ac = Math.min, jc = b([].concat), kc = b([].push), Ic = b("".indexOf), Tc = b("".slice), Mc = "$0" === "a".replace(/./, "$0"), Lc = !!/./[Rc] && "" === /./[Rc]("a", "$0"), Uc = !a(function() {
        var t = /./;
        return t.exec = function() {
            var t = [];
            return t.groups = {
                a: "7"
            }, t;
        }, "7" !== "".replace(t, "$<a>");
    });
    pc("replace", function(t, e, r) {
        var n = Lc ? "$" : "$0";
        return [
            function(t, r) {
                var n = j(this), o = P(t) ? void 0 : Q(t, Rc);
                return o ? f(o, t, n, r) : f(e, Wr(n), t, r);
            },
            function(t, o) {
                var i = kt(this), a = Wr(t);
                if ("string" == typeof o && -1 === Ic(o, n) && -1 === Ic(o, "$<")) {
                    var u = r(e, i, a, o);
                    if (u.done) return u.value;
                }
                var s = T(o);
                s || (o = Wr(o));
                var c, f = i.global;
                f && (c = i.unicode, i.lastIndex = 0);
                for(var l, h = []; null !== (l = yc(i, a)) && (kc(h, l), f);)"" === Wr(l[0]) && (i.lastIndex = dc(a, ve(i.lastIndex), c));
                for(var p, v = "", d = 0, g = 0; g < h.length; g++){
                    for(var y, m = Wr((l = h[g])[0]), b = Pc(Ac(ce(l.index), a.length), 0), w = [], S = 1; S < l.length; S++)kc(w, void 0 === (p = l[S]) ? p : String(p));
                    var E = l.groups;
                    if (s) {
                        var O = jc([
                            m
                        ], w, b, a);
                        void 0 !== E && kc(O, E), y = Wr(Ra(o, void 0, O));
                    } else y = xc(m, a, b, w, E, o);
                    b >= d && (v += Tc(a, d, b) + y, d = b + m.length);
                }
                return v + Tc(a, d);
            }
        ];
    }, !Uc || !Mc || Lc), pc("search", function(t, e, r) {
        return [
            function(e) {
                var r = j(this), n = P(e) ? void 0 : Q(e, t);
                return n ? f(n, e, r) : new RegExp(e)[t](Wr(r));
            },
            function(t) {
                var n = kt(this), o = Wr(t), i = r(e, n, o);
                if (i.done) return i.value;
                var a = n.lastIndex;
                wa(a, 0) || (n.lastIndex = 0);
                var u = yc(n, o);
                return wa(n.lastIndex, a) || (n.lastIndex = a), null === u ? -1 : u.index;
            }
        ];
    });
    var Nc = dt("species"), Cc = function(t, e) {
        var r, n = kt(t).constructor;
        return void 0 === n || P(r = kt(n)[Nc]) ? e : La(r);
    }, _c = cs.UNSUPPORTED_Y, Fc = Math.min, Bc = b([].push), Dc = b("".slice), zc = !a(function() {
        var t = /(?:)/, e = t.exec;
        t.exec = function() {
            return e.apply(this, arguments);
        };
        var r = "ab".split(t);
        return 2 !== r.length || "a" !== r[0] || "b" !== r[1];
    }), Wc = "c" === "abbc".split(/(b)*/)[1] || 4 !== "test".split(/(?:)/, -1).length || 2 !== "ab".split(/(?:ab)*/).length || 4 !== ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length;
    pc("split", function(t, e, r) {
        var n = "0".split(void 0, 0).length ? function(t, r) {
            return void 0 === t && 0 === r ? [] : f(e, this, t, r);
        } : e;
        return [
            function(e, r) {
                var o = j(this), i = P(e) ? void 0 : Q(e, t);
                return i ? f(i, e, o, r) : f(n, Wr(o), e, r);
            },
            function(t, o) {
                var i = kt(this), a = Wr(t);
                if (!Wc) {
                    var u = r(n, i, a, o, n !== e);
                    if (u.done) return u.value;
                }
                var s = Cc(i, RegExp), c = i.unicode, f = new s(_c ? "^(?:" + i.source + ")" : i, (i.ignoreCase ? "i" : "") + (i.multiline ? "m" : "") + (i.unicode ? "u" : "") + (_c ? "g" : "y")), l = void 0 === o ? 4294967295 : o >>> 0;
                if (0 === l) return [];
                if (0 === a.length) return null === yc(f, a) ? [
                    a
                ] : [];
                for(var h = 0, p = 0, v = []; p < a.length;){
                    f.lastIndex = _c ? 0 : p;
                    var d, g = yc(f, _c ? Dc(a, p) : a);
                    if (null === g || (d = Fc(ve(f.lastIndex + (_c ? p : 0)), a.length)) === h) p = dc(a, p, c);
                    else {
                        if (Bc(v, Dc(a, h, p)), v.length === l) return v;
                        for(var y = 1; y <= g.length - 1; y++)if (Bc(v, g[y]), v.length === l) return v;
                        p = h = d;
                    }
                }
                return Bc(v, Dc(a, h)), v;
            }
        ];
    }, Wc || !zc, _c);
    var qc = TypeError, Hc = RangeError, $c = function(t) {
        var e = Wr(j(this)), r = "", n = ce(t);
        if (n < 0 || Infinity === n) throw new Hc("Wrong number of repetitions");
        for(; n > 0; (n >>>= 1) && (e += e))1 & n && (r += e);
        return r;
    }, Kc = b($c), Gc = b("".slice), Vc = Math.ceil, Yc = function(t) {
        return function(e, r, n) {
            var o, i, a = Wr(j(e)), u = ve(r), s = a.length, c = void 0 === n ? " " : Wr(n);
            return u <= s || "" === c ? a : ((i = Kc(c, Vc((o = u - s) / c.length))).length > o && (i = Gc(i, 0, o)), t ? a + i : i + a);
        };
    }, Xc = {
        start: Yc(!1),
        end: Yc(!0)
    }, Jc = Xc.start, Qc = Array, Zc = RegExp.escape, tf = b("".charAt), ef = b("".charCodeAt), rf = b(1.1.toString), nf = b([].join), of = /^[0-9a-z]/i, af = /^[$()*+./?[\\\]^{|}]/, uf = RegExp("^[!\"#%&',\\-:;<=>@`~" + Mi + "]"), sf = b(of.exec), cf = {
        "\t": "t",
        "\n": "n",
        "\v": "v",
        "\f": "f",
        "\r": "r"
    }, ff = function(t) {
        var e = rf(ef(t, 0), 16);
        return e.length < 3 ? "\\x" + Jc(e, 2, "0") : "\\u" + Jc(e, 4, "0");
    }, lf = !Zc || "\\x61b" !== Zc("ab");
    Ce({
        target: "RegExp",
        stat: !0,
        forced: lf
    }, {
        escape: function(t) {
            !function(t) {
                if ("string" == typeof t) return t;
                throw new qc("Argument is not a string");
            }(t);
            for(var e = t.length, r = Qc(e), n = 0; n < e; n++){
                var o = tf(t, n);
                if (0 === n && sf(of, o)) r[n] = ff(o);
                else if (ut(cf, o)) r[n] = "\\" + cf[o];
                else if (sf(af, o)) r[n] = "\\" + o;
                else if (sf(uf, o)) r[n] = ff(o);
                else {
                    var i = ef(o, 0);
                    55296 != (63488 & i) ? r[n] = o : i >= 56320 || n + 1 >= e || 56320 != (64512 & ef(t, n + 1)) ? r[n] = ff(o) : (r[n] = o, r[++n] = tf(t, n));
                }
            }
            return nf(r, "");
        }
    }), To("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, Fo);
    var hf = Set.prototype, pf = {
        Set: Set,
        add: b(hf.add),
        has: b(hf.has),
        remove: b(hf.delete),
        proto: hf
    }, vf = pf.has, df = function(t) {
        return vf(t), t;
    }, gf = pf.Set, yf = pf.proto, mf = b(yf.forEach), bf = b(yf.keys), wf = bf(new gf).next, Sf = function(t, e, r) {
        return r ? ci({
            iterator: bf(t),
            next: wf
        }, e) : mf(t, e);
    }, Ef = pf.Set, Of = pf.add, xf = function(t) {
        var e = new Ef;
        return Sf(t, function(t) {
            Of(e, t);
        }), e;
    }, Rf = ln(pf.proto, "size", "get") || function(t) {
        return t.size;
    }, Pf = "Invalid size", Af = RangeError, jf = TypeError, kf = Math.max, If = function(t, e) {
        this.set = t, this.size = kf(e, 0), this.has = J(t.has), this.keys = J(t.keys);
    };
    If.prototype = {
        getIterator: function() {
            return {
                iterator: t = kt(f(this.keys, this.set)),
                next: t.next,
                done: !1
            };
            "TURBOPACK unreachable";
            var t;
        },
        includes: function(t) {
            return f(this.has, this.set, t);
        }
    };
    var Tf = function(t) {
        kt(t);
        var e = +t.size;
        if (e != e) throw new jf(Pf);
        var r = ce(e);
        if (r < 0) throw new Af(Pf);
        return new If(t, r);
    }, Mf = pf.has, Lf = pf.remove, Uf = function(t) {
        var e = df(this), r = Tf(t), n = xf(e);
        return Rf(e) <= r.size ? Sf(e, function(t) {
            r.includes(t) && Lf(n, t);
        }) : ci(r.getIterator(), function(t) {
            Mf(e, t) && Lf(n, t);
        }), n;
    }, Nf = function(t) {
        return {
            size: t,
            has: function() {
                return !1;
            },
            keys: function() {
                return {
                    next: function() {
                        return {
                            done: !0
                        };
                    }
                };
            }
        };
    }, Cf = function(t) {
        var e = L("Set");
        try {
            (new e)[t](Nf(0));
            try {
                return (new e)[t](Nf(-1)), !1;
            } catch (t) {
                return !0;
            }
        } catch (t) {
            return !1;
        }
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !Cf("difference")
    }, {
        difference: Uf
    });
    var _f = pf.Set, Ff = pf.add, Bf = pf.has, Df = function(t) {
        var e = df(this), r = Tf(t), n = new _f;
        return Rf(e) > r.size ? ci(r.getIterator(), function(t) {
            Bf(e, t) && Ff(n, t);
        }) : Sf(e, function(t) {
            r.includes(t) && Ff(n, t);
        }), n;
    }, zf = !Cf("intersection") || a(function() {
        return "3,2" !== String(Array.from(new Set([
            1,
            2,
            3
        ]).intersection(new Set([
            3,
            2
        ]))));
    });
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: zf
    }, {
        intersection: Df
    });
    var Wf = pf.has, qf = function(t) {
        var e = df(this), r = Tf(t);
        if (Rf(e) <= r.size) return !1 !== Sf(e, function(t) {
            if (r.includes(t)) return !1;
        }, !0);
        var n = r.getIterator();
        return !1 !== ci(n, function(t) {
            if (Wf(e, t)) return Tn(n, "normal", !1);
        });
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !Cf("isDisjointFrom")
    }, {
        isDisjointFrom: qf
    });
    var Hf = function(t) {
        var e = df(this), r = Tf(t);
        return !(Rf(e) > r.size) && !1 !== Sf(e, function(t) {
            if (!r.includes(t)) return !1;
        }, !0);
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !Cf("isSubsetOf")
    }, {
        isSubsetOf: Hf
    });
    var $f = pf.has, Kf = function(t) {
        var e = df(this), r = Tf(t);
        if (Rf(e) < r.size) return !1;
        var n = r.getIterator();
        return !1 !== ci(n, function(t) {
            if (!$f(e, t)) return Tn(n, "normal", !1);
        });
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !Cf("isSupersetOf")
    }, {
        isSupersetOf: Kf
    });
    var Gf = pf.add, Vf = pf.has, Yf = pf.remove, Xf = function(t) {
        var e = df(this), r = Tf(t).getIterator(), n = xf(e);
        return ci(r, function(t) {
            Vf(e, t) ? Yf(n, t) : Gf(n, t);
        }), n;
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !Cf("symmetricDifference")
    }, {
        symmetricDifference: Xf
    });
    var Jf = pf.add, Qf = function(t) {
        var e = df(this), r = Tf(t).getIterator(), n = xf(e);
        return ci(r, function(t) {
            Jf(n, t);
        }), n;
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !Cf("union")
    }, {
        union: Qf
    }), Ce({
        target: "Set",
        stat: !0,
        forced: !0
    }, {
        from: ei(pf.Set, pf.add, !1)
    }), Ce({
        target: "Set",
        stat: !0,
        forced: !0
    }, {
        of: ri(pf.Set, pf.add, !1)
    });
    var Zf = pf.add;
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        addAll: function() {
            for(var t = df(this), e = 0, r = arguments.length; e < r; e++)Zf(t, arguments[e]);
            return t;
        }
    });
    var tl = pf.remove;
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        deleteAll: function() {
            for(var t, e = df(this), r = !0, n = 0, o = arguments.length; n < o; n++)t = tl(e, arguments[n]), r = r && t;
            return !!r;
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        every: function(t) {
            var e = df(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0);
            return !1 !== Sf(e, function(t) {
                if (!r(t, t, e)) return !1;
            }, !0);
        }
    });
    var el = dt("iterator"), rl = Object, nl = L("Set"), ol = function(t) {
        return function(t) {
            return M(t) && "number" == typeof t.size && T(t.has) && T(t.keys);
        }(t) ? t : function(t) {
            if (P(t)) return !1;
            var e = rl(t);
            return void 0 !== e[el] || "@@iterator" in e || ut(un, pr(e));
        }(t) ? new nl(t) : t;
    };
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        difference: function(t) {
            return f(Uf, this, ol(t));
        }
    });
    var il = pf.Set, al = pf.add;
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        filter: function(t) {
            var e = df(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = new il;
            return Sf(e, function(t) {
                r(t, t, e) && al(n, t);
            }), n;
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        find: function(t) {
            var e = df(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = Sf(e, function(t) {
                if (r(t, t, e)) return {
                    value: t
                };
            }, !0);
            return n && n.value;
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        intersection: function(t) {
            return f(Df, this, ol(t));
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        isDisjointFrom: function(t) {
            return f(qf, this, ol(t));
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        isSubsetOf: function(t) {
            return f(Hf, this, ol(t));
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        isSupersetOf: function(t) {
            return f(Kf, this, ol(t));
        }
    });
    var ul = b([].join), sl = b([].push);
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        join: function(t) {
            var e = df(this), r = void 0 === t ? "," : Wr(t), n = [];
            return Sf(e, function(t) {
                sl(n, t);
            }), ul(n, r);
        }
    });
    var cl = pf.Set, fl = pf.add;
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        map: function(t) {
            var e = df(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0), n = new cl;
            return Sf(e, function(t) {
                fl(n, r(t, t, e));
            }), n;
        }
    });
    var ll = TypeError;
    Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        reduce: function(t) {
            var e = df(this), r = arguments.length < 2, n = r ? void 0 : arguments[1];
            if (J(t), Sf(e, function(o) {
                r ? (r = !1, n = o) : n = t(n, o, o, e);
            }), r) throw new ll("Reduce of empty set with no initial value");
            return n;
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        some: function(t) {
            var e = df(this), r = ar(t, arguments.length > 1 ? arguments[1] : void 0);
            return !0 === Sf(e, function(t) {
                if (r(t, t, e)) return !0;
            }, !0);
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        symmetricDifference: function(t) {
            return f(Xf, this, ol(t));
        }
    }), Ce({
        target: "Set",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        union: function(t) {
            return f(Qf, this, ol(t));
        }
    });
    var hl = dt("species"), pl = dt("isConcatSpreadable"), vl = W >= 51 || !a(function() {
        var t = [];
        return t[pl] = !1, t.concat()[0] !== t;
    }), dl = function(t) {
        if (!M(t)) return !1;
        var e = t[pl];
        return void 0 !== e ? !!e : ur(t);
    }, gl = !(vl && (W >= 51 || !a(function() {
        var t = [];
        return (t.constructor = {})[hl] = function() {
            return {
                foo: 1
            };
        }, 1 !== t.concat(Boolean).foo;
    })));
    Ce({
        target: "Array",
        proto: !0,
        arity: 1,
        forced: gl
    }, {
        concat: function(t) {
            var e, r, n, o, i, a = it(this), u = xr(a, 0), s = 0;
            for(e = -1, n = arguments.length; e < n; e++)if (dl(i = -1 === e ? a : arguments[e])) for(o = de(i), Nr(s + o), r = 0; r < o; r++, s++)r in i && Cn(u, s, i[r]);
            else Nr(s + 1), Cn(u, s++, i);
            return u.length = s, u;
        }
    });
    var yl = {
        f: dt
    }, ml = Ct.f, bl = function(t) {
        var e = Yn.Symbol || (Yn.Symbol = {});
        ut(e, t) || ml(e, t, {
            value: yl.f(t)
        });
    }, wl = function() {
        var t = L("Symbol"), e = t && t.prototype, r = e && e.valueOf, n = dt("toPrimitive");
        e && !e[n] && ie(e, n, function(t) {
            return f(r, this);
        }, {
            arity: 1
        });
    }, Sl = Ar.forEach, El = Xt("hidden"), Ol = "Symbol", xl = "prototype", Rl = ne.set, Pl = ne.getterFor(Ol), Al = Object[xl], jl = i.Symbol, kl = jl && jl[xl], Il = i.RangeError, Tl = i.TypeError, Ml = i.QObject, Ll = Rt.f, Ul = Ct.f, Nl = mo.f, Cl = v.f, _l = b([].push), Fl = nt("symbols"), Bl = nt("op-symbols"), Dl = nt("wks"), zl = !Ml || !Ml[xl] || !Ml[xl].findChild, Wl = function(t, e, r) {
        var n = Ll(Al, e);
        n && delete Al[e], Ul(t, e, r), n && t !== Al && Ul(Al, e, n);
    }, ql = u && a(function() {
        return 7 !== Ve(Ul({}, "a", {
            get: function() {
                return Ul(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? Wl : Ul, Hl = function(t, e) {
        var r = Fl[t] = Ve(kl);
        return Rl(r, {
            type: Ol,
            tag: t,
            description: e
        }), u || (r.description = e), r;
    }, $l = function(t, e, r) {
        t === Al && $l(Bl, e, r), kt(t);
        var n = bt(e);
        return kt(r), ut(Fl, n) ? (r.enumerable ? (ut(t, El) && t[El][n] && (t[El][n] = !1), r = Ve(r, {
            enumerable: d(0, !1)
        })) : (ut(t, El) || Ul(t, El, d(1, Ve(null))), t[El][n] = !0), ql(t, n, r)) : Ul(t, n, r);
    }, Kl = function(t, e) {
        kt(t);
        var r = k(e), n = _e(r).concat(Xl(r));
        return Sl(n, function(e) {
            u && !f(Gl, r, e) || $l(t, e, r[e]);
        }), t;
    }, Gl = function(t) {
        var e = bt(t), r = f(Cl, this, e);
        return !(this === Al && ut(Fl, e) && !ut(Bl, e)) && (!(r || !ut(this, e) || !ut(Fl, e) || ut(this, El) && this[El][e]) || r);
    }, Vl = function(t, e) {
        var r = k(t), n = bt(e);
        if (r !== Al || !ut(Fl, n) || ut(Bl, n)) {
            var o = Ll(r, n);
            return !o || !ut(Fl, n) || ut(r, El) && r[El][n] || (o.enumerable = !0), o;
        }
    }, Yl = function(t) {
        var e = Nl(k(t)), r = [];
        return Sl(e, function(t) {
            ut(Fl, t) || ut(Jt, t) || _l(r, t);
        }), r;
    }, Xl = function(t) {
        var e = t === Al, r = Nl(e ? Bl : k(t)), n = [];
        return Sl(r, function(t) {
            !ut(Fl, t) || e && !ut(Al, t) || _l(n, Fl[t]);
        }), n;
    };
    H || (jl = function() {
        if (U(kl, this)) throw new Tl("Symbol is not a constructor");
        var t = arguments.length && void 0 !== arguments[0] ? Wr(arguments[0]) : void 0, e = lt(t), r = function(t) {
            var n = void 0 === this ? i : this;
            n === Al && f(r, Bl, t), ut(n, El) && ut(n[El], e) && (n[El][e] = !1);
            var o = d(1, t);
            try {
                ql(n, e, o);
            } catch (t) {
                if (!(t instanceof Il)) throw t;
                Wl(n, e, o);
            }
        };
        return u && zl && ql(Al, e, {
            configurable: !0,
            set: r
        }), Hl(e, t);
    }, ie(kl = jl[xl], "toString", function() {
        return Pl(this).tag;
    }), ie(jl, "withoutSetter", function(t) {
        return Hl(lt(t), t);
    }), v.f = Gl, Ct.f = $l, Be.f = Kl, Rt.f = Vl, Oe.f = mo.f = Yl, xe.f = Xl, yl.f = function(t) {
        return Hl(dt(t), t);
    }, u && (so(kl, "description", {
        configurable: !0,
        get: function() {
            return Pl(this).description;
        }
    }), ie(Al, "propertyIsEnumerable", Gl, {
        unsafe: !0
    }))), Ce({
        global: !0,
        constructor: !0,
        wrap: !0,
        forced: !H,
        sham: !H
    }, {
        Symbol: jl
    }), Sl(_e(Dl), function(t) {
        bl(t);
    }), Ce({
        target: Ol,
        stat: !0,
        forced: !H
    }, {
        useSetter: function() {
            zl = !0;
        },
        useSimple: function() {
            zl = !1;
        }
    }), Ce({
        target: "Object",
        stat: !0,
        forced: !H,
        sham: !u
    }, {
        create: function(t, e) {
            return void 0 === e ? Ve(t) : Kl(Ve(t), e);
        },
        defineProperty: $l,
        defineProperties: Kl,
        getOwnPropertyDescriptor: Vl
    }), Ce({
        target: "Object",
        stat: !0,
        forced: !H
    }, {
        getOwnPropertyNames: Yl
    }), wl(), an(jl, Ol), Jt[El] = !0;
    var Jl = H && !!Symbol.for && !!Symbol.keyFor, Ql = nt("string-to-symbol-registry"), Zl = nt("symbol-to-string-registry");
    Ce({
        target: "Symbol",
        stat: !0,
        forced: !Jl
    }, {
        for: function(t) {
            var e = Wr(t);
            if (ut(Ql, e)) return Ql[e];
            var r = L("Symbol")(e);
            return Ql[e] = r, Zl[r] = e, r;
        }
    });
    var th = nt("symbol-to-string-registry");
    Ce({
        target: "Symbol",
        stat: !0,
        forced: !Jl
    }, {
        keyFor: function(t) {
            if (!G(t)) throw new TypeError(Y(t) + " is not a symbol");
            if (ut(th, t)) return th[t];
        }
    });
    var eh = b([].push), rh = String, nh = L("JSON", "stringify"), oh = b(/./.exec), ih = b("".charAt), ah = b("".charCodeAt), uh = b("".replace), sh = b(1..toString), ch = /[\uD800-\uDFFF]/g, fh = /^[\uD800-\uDBFF]$/, lh = /^[\uDC00-\uDFFF]$/, hh = !H || a(function() {
        var t = L("Symbol")("stringify detection");
        return "[null]" !== nh([
            t
        ]) || "{}" !== nh({
            a: t
        }) || "{}" !== nh(Object(t));
    }), ph = a(function() {
        return '"\\udf06\\ud834"' !== nh("\udf06\ud834") || '"\\udead"' !== nh("\udead");
    }), vh = function(t, e) {
        var r = vo(arguments), n = function(t) {
            if (T(t)) return t;
            if (ur(t)) {
                for(var e = t.length, r = [], n = 0; n < e; n++){
                    var o = t[n];
                    "string" == typeof o ? eh(r, o) : "number" != typeof o && "Number" !== E(o) && "String" !== E(o) || eh(r, Wr(o));
                }
                var i = r.length, a = !0;
                return function(t, e) {
                    if (a) return a = !1, e;
                    if (ur(this)) return e;
                    for(var n = 0; n < i; n++)if (r[n] === t) return e;
                };
            }
        }(e);
        if (T(n) || void 0 !== t && !G(t)) return r[1] = function(t, e) {
            if (T(n) && (e = f(n, this, rh(t), e)), !G(e)) return e;
        }, Ra(nh, null, r);
    }, dh = function(t, e, r) {
        var n = ih(r, e - 1), o = ih(r, e + 1);
        return oh(fh, t) && !oh(lh, o) || oh(lh, t) && !oh(fh, n) ? "\\u" + sh(ah(t, 0), 16) : t;
    };
    nh && Ce({
        target: "JSON",
        stat: !0,
        arity: 3,
        forced: hh || ph
    }, {
        stringify: function(t, e, r) {
            var n = vo(arguments), o = Ra(hh ? vh : nh, null, n);
            return ph && "string" == typeof o ? uh(o, ch, dh) : o;
        }
    });
    var gh = !H || a(function() {
        xe.f(1);
    });
    Ce({
        target: "Object",
        stat: !0,
        forced: gh
    }, {
        getOwnPropertySymbols: function(t) {
            var e = xe.f;
            return e ? e(it(t)) : [];
        }
    }), bl("asyncIterator");
    var yh = i.Symbol, mh = yh && yh.prototype;
    if (u && T(yh) && (!("description" in mh) || void 0 !== yh().description)) {
        var bh = {}, wh = function() {
            var t = arguments.length < 1 || void 0 === arguments[0] ? void 0 : Wr(arguments[0]), e = U(mh, this) ? new yh(t) : void 0 === t ? yh() : yh(t);
            return "" === t && (bh[e] = !0), e;
        };
        Ae(wh, yh), wh.prototype = mh, mh.constructor = wh;
        var Sh = "Symbol(description detection)" === String(yh("description detection")), Eh = b(mh.valueOf), Oh = b(mh.toString), xh = /^Symbol\((.*)\)[^)]+$/, Rh = b("".replace), Ph = b("".slice);
        so(mh, "description", {
            configurable: !0,
            get: function() {
                var t = Eh(this);
                if (ut(bh, t)) return "";
                var e = Oh(t), r = Sh ? Ph(e, 7, -1) : Rh(e, xh, "$1");
                return "" === r ? void 0 : r;
            }
        }), Ce({
            global: !0,
            constructor: !0,
            forced: !0
        }, {
            Symbol: wh
        });
    }
    bl("hasInstance"), bl("isConcatSpreadable"), bl("iterator"), bl("match"), bl("matchAll"), bl("replace"), bl("search"), bl("species"), bl("split"), bl("toPrimitive"), wl(), bl("toStringTag"), an(L("Symbol"), "Symbol"), bl("unscopables"), an(i.JSON, "JSON", !0), an(Math, "Math", !0);
    var Ah = Ct.f, jh = dt("metadata"), kh = Function.prototype;
    void 0 === kh[jh] && Ah(kh, jh, {
        value: null
    });
    var Ih = Ct.f, Th = Rt.f, Mh = i.Symbol;
    if (bl("asyncDispose"), Mh) {
        var Lh = Th(Mh, "asyncDispose");
        Lh.enumerable && Lh.configurable && Lh.writable && Ih(Mh, "asyncDispose", {
            value: Lh.value,
            enumerable: !1,
            configurable: !1,
            writable: !1
        });
    }
    var Uh = Ct.f, Nh = Rt.f, Ch = i.Symbol;
    if (bl("dispose"), Ch) {
        var _h = Nh(Ch, "dispose");
        _h.enumerable && _h.configurable && _h.writable && Uh(Ch, "dispose", {
            value: _h.value,
            enumerable: !1,
            configurable: !1,
            writable: !1
        });
    }
    bl("metadata");
    var Fh = L("Symbol"), Bh = Fh.keyFor, Dh = b(Fh.prototype.valueOf), zh = Fh.isRegisteredSymbol || function(t) {
        try {
            return void 0 !== Bh(Dh(t));
        } catch (t) {
            return !1;
        }
    };
    Ce({
        target: "Symbol",
        stat: !0
    }, {
        isRegisteredSymbol: zh
    });
    for(var Wh = L("Symbol"), qh = Wh.isWellKnownSymbol, Hh = L("Object", "getOwnPropertyNames"), $h = b(Wh.prototype.valueOf), Kh = nt("wks"), Gh = 0, Vh = Hh(Wh), Yh = Vh.length; Gh < Yh; Gh++)try {
        var Xh = Vh[Gh];
        G(Wh[Xh]) && dt(Xh);
    } catch (t) {}
    var Jh = function(t) {
        if (qh && qh(t)) return !0;
        try {
            for(var e = $h(t), r = 0, n = Hh(Kh), o = n.length; r < o; r++)if (Kh[n[r]] == e) return !0;
        } catch (t) {}
        return !1;
    };
    Ce({
        target: "Symbol",
        stat: !0,
        forced: !0
    }, {
        isWellKnownSymbol: Jh
    }), bl("customMatcher"), bl("observable"), Ce({
        target: "Symbol",
        stat: !0,
        name: "isRegisteredSymbol"
    }, {
        isRegistered: zh
    }), Ce({
        target: "Symbol",
        stat: !0,
        name: "isWellKnownSymbol",
        forced: !0
    }, {
        isWellKnown: Jh
    }), bl("matcher"), bl("metadataKey"), bl("patternMatch"), bl("replaceAll"), yl.f("asyncIterator");
    var Qh = Gr.codeAt;
    Ce({
        target: "String",
        proto: !0
    }, {
        codePointAt: function(t) {
            return Qh(this, t);
        }
    }), Ze("String", "codePointAt");
    var Zh = TypeError, tp = function(t) {
        if (es(t)) throw new Zh("The method doesn't accept regular expressions");
        return t;
    }, ep = dt("match"), rp = function(t) {
        var e = /./;
        try {
            "/./"[t](e);
        } catch (r) {
            try {
                return e[ep] = !1, "/./"[t](e);
            } catch (t) {}
        }
        return !1;
    }, np = Rt.f, op = or("".slice), ip = Math.min, ap = rp("endsWith"), up = !ap && !!function() {
        var t = np(String.prototype, "endsWith");
        return t && !t.writable;
    }();
    Ce({
        target: "String",
        proto: !0,
        forced: !up && !ap
    }, {
        endsWith: function(t) {
            var e = Wr(j(this));
            tp(t);
            var r = arguments.length > 1 ? arguments[1] : void 0, n = e.length, o = void 0 === r ? n : ip(ve(r), n), i = Wr(t);
            return op(e, o - i.length, o) === i;
        }
    }), Ze("String", "endsWith");
    var sp = RangeError, cp = String.fromCharCode, fp = String.fromCodePoint, lp = b([].join);
    Ce({
        target: "String",
        stat: !0,
        arity: 1,
        forced: !!fp && 1 !== fp.length
    }, {
        fromCodePoint: function(t) {
            for(var e, r = [], n = arguments.length, o = 0; n > o;){
                if (e = +arguments[o++], he(e, 1114111) !== e) throw new sp(e + " is not a valid code point");
                r[o] = e < 65536 ? cp(e) : cp(55296 + ((e -= 65536) >> 10), e % 1024 + 56320);
            }
            return lp(r, "");
        }
    });
    var hp = b("".indexOf);
    Ce({
        target: "String",
        proto: !0,
        forced: !rp("includes")
    }, {
        includes: function(t) {
            return !!~hp(Wr(j(this)), Wr(tp(t)), arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Ze("String", "includes"), b(un.String);
    var pp = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(_), vp = Xc.start;
    Ce({
        target: "String",
        proto: !0,
        forced: pp
    }, {
        padStart: function(t) {
            return vp(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Ze("String", "padStart");
    var dp = Xc.end;
    Ce({
        target: "String",
        proto: !0,
        forced: pp
    }, {
        padEnd: function(t) {
            return dp(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Ze("String", "padEnd");
    var gp = b([].push), yp = b([].join);
    Ce({
        target: "String",
        stat: !0
    }, {
        raw: function(t) {
            var e = k(it(t).raw), r = de(e);
            if (!r) return "";
            for(var n = arguments.length, o = [], i = 0;;){
                if (gp(o, Wr(e[i++])), i === r) return yp(o, "");
                i < n && gp(o, Wr(arguments[i]));
            }
        }
    }), Ce({
        target: "String",
        proto: !0
    }, {
        repeat: $c
    }), Ze("String", "repeat");
    var mp = Rt.f, bp = or("".slice), wp = Math.min, Sp = rp("startsWith"), Ep = !Sp && !!function() {
        var t = mp(String.prototype, "startsWith");
        return t && !t.writable;
    }();
    Ce({
        target: "String",
        proto: !0,
        forced: !Ep && !Sp
    }, {
        startsWith: function(t) {
            var e = Wr(j(this));
            tp(t);
            var r = ve(wp(arguments.length > 1 ? arguments[1] : void 0, e.length)), n = Wr(t);
            return bp(e, r, r + n.length) === n;
        }
    }), Ze("String", "startsWith");
    var Op = zt.PROPER, xp = function(t) {
        return a(function() {
            return !!Mi[t]() || "​᠎" !== "​᠎"[t]() || Op && Mi[t].name !== t;
        });
    }, Rp = _i.start, Pp = xp("trimStart") ? function() {
        return Rp(this);
    } : "".trimStart;
    Ce({
        target: "String",
        proto: !0,
        name: "trimStart",
        forced: "".trimLeft !== Pp
    }, {
        trimLeft: Pp
    }), Ce({
        target: "String",
        proto: !0,
        name: "trimStart",
        forced: "".trimStart !== Pp
    }, {
        trimStart: Pp
    }), Ze("String", "trimLeft");
    var Ap = _i.end, jp = xp("trimEnd") ? function() {
        return Ap(this);
    } : "".trimEnd;
    Ce({
        target: "String",
        proto: !0,
        name: "trimEnd",
        forced: "".trimRight !== jp
    }, {
        trimRight: jp
    }), Ce({
        target: "String",
        proto: !0,
        name: "trimEnd",
        forced: "".trimEnd !== jp
    }, {
        trimEnd: jp
    }), Ze("String", "trimRight");
    var kp = Object.getOwnPropertyDescriptor, Ip = function(t) {
        if (!u) return i[t];
        var e = kp(i, t);
        return e && e.value;
    }, Tp = dt("iterator"), Mp = !a(function() {
        var t = new URL("b?a=1&b=2&c=3", "https://a"), e = t.searchParams, r = new URLSearchParams("a=1&a=2&b=3"), n = "";
        return t.pathname = "c%20d", e.forEach(function(t, r) {
            e.delete("b"), n += r + t;
        }), r.delete("a", 2), r.delete("b", void 0), !e.size && !u || !e.sort || "https://a/c%20d?a=1&c=3" !== t.href || "3" !== e.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !e[Tp] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("https://тест").host || "#%D0%B1" !== new URL("https://a#б").hash || "a1c3" !== n || "x" !== new URL("https://x", void 0).host;
    }), Lp = TypeError, Up = function(t, e) {
        if (t < e) throw new Lp("Not enough arguments");
        return t;
    }, Np = Math.floor, Cp = function(t, e) {
        var r = t.length;
        if (r < 8) for(var n, o, i = 1; i < r;){
            for(o = i, n = t[i]; o && e(t[o - 1], n) > 0;)t[o] = t[--o];
            o !== i++ && (t[o] = n);
        }
        else for(var a = Np(r / 2), u = Cp(vo(t, 0, a), e), s = Cp(vo(t, a), e), c = u.length, f = s.length, l = 0, h = 0; l < c || h < f;)t[l + h] = l < c && h < f ? e(u[l], s[h]) <= 0 ? u[l++] : s[h++] : l < c ? u[l++] : s[h++];
        return t;
    }, _p = Cp, Fp = dt("iterator"), Bp = "URLSearchParams", Dp = Bp + "Iterator", zp = ne.set, Wp = ne.getterFor(Bp), qp = ne.getterFor(Dp), Hp = Ip("fetch"), $p = Ip("Request"), Kp = Ip("Headers"), Gp = $p && $p.prototype, Vp = Kp && Kp.prototype, Yp = i.TypeError, Xp = i.encodeURIComponent, Jp = String.fromCharCode, Qp = L("String", "fromCodePoint"), Zp = parseInt, tv = b("".charAt), ev = b([].join), rv = b([].push), nv = b("".replace), ov = b([].shift), iv = b([].splice), av = b("".split), uv = b("".slice), sv = b(/./.exec), cv = /\+/g, fv = /^[0-9a-f]+$/i, lv = function(t, e) {
        var r = uv(t, e, e + 2);
        return sv(fv, r) ? Zp(r, 16) : NaN;
    }, hv = function(t) {
        for(var e = 0, r = 128; r > 0 && 0 != (t & r); r >>= 1)e++;
        return e;
    }, pv = function(t) {
        var e = null;
        switch(t.length){
            case 1:
                e = t[0];
                break;
            case 2:
                e = (31 & t[0]) << 6 | 63 & t[1];
                break;
            case 3:
                e = (15 & t[0]) << 12 | (63 & t[1]) << 6 | 63 & t[2];
                break;
            case 4:
                e = (7 & t[0]) << 18 | (63 & t[1]) << 12 | (63 & t[2]) << 6 | 63 & t[3];
        }
        return e > 1114111 ? null : e;
    }, vv = function(t) {
        for(var e = (t = nv(t, cv, " ")).length, r = "", n = 0; n < e;){
            var o = tv(t, n);
            if ("%" === o) {
                if ("%" === tv(t, n + 1) || n + 3 > e) {
                    r += "%", n++;
                    continue;
                }
                var i = lv(t, n + 1);
                if (i != i) {
                    r += o, n++;
                    continue;
                }
                n += 2;
                var a = hv(i);
                if (0 === a) o = Jp(i);
                else {
                    if (1 === a || a > 4) {
                        r += "�", n++;
                        continue;
                    }
                    for(var u = [
                        i
                    ], s = 1; s < a && !(3 + ++n > e || "%" !== tv(t, n));){
                        var c = lv(t, n + 1);
                        if (c != c) {
                            n += 3;
                            break;
                        }
                        if (c > 191 || c < 128) break;
                        rv(u, c), n += 2, s++;
                    }
                    if (u.length !== a) {
                        r += "�";
                        continue;
                    }
                    var f = pv(u);
                    null === f ? r += "�" : o = Qp(f);
                }
            }
            r += o, n++;
        }
        return r;
    }, dv = /[!'()~]|%20/g, gv = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+"
    }, yv = function(t) {
        return gv[t];
    }, mv = function(t) {
        return nv(Xp(t), dv, yv);
    }, bv = fn(function(t, e) {
        zp(this, {
            type: Dp,
            target: Wp(t).entries,
            index: 0,
            kind: e
        });
    }, Bp, function() {
        var t = qp(this), e = t.target, r = t.index++;
        if (!e || r >= e.length) return t.target = null, Pn(void 0, !0);
        var n = e[r];
        switch(t.kind){
            case "keys":
                return Pn(n.key, !1);
            case "values":
                return Pn(n.value, !1);
        }
        return Pn([
            n.key,
            n.value
        ], !1);
    }, !0), wv = function(t) {
        this.entries = [], this.url = null, void 0 !== t && (M(t) ? this.parseObject(t) : this.parseQuery("string" == typeof t ? "?" === tv(t, 0) ? uv(t, 1) : t : Wr(t)));
    };
    wv.prototype = {
        type: Bp,
        bindURL: function(t) {
            this.url = t, this.update();
        },
        parseObject: function(t) {
            var e, r, n, o, i, a, u, s = this.entries, c = Fn(t);
            if (c) for(r = (e = Dn(t, c)).next; !(n = f(r, e)).done;){
                if (o = Dn(kt(n.value)), (a = f(i = o.next, o)).done || (u = f(i, o)).done || !f(i, o).done) throw new Yp("Expected sequence with length 2");
                rv(s, {
                    key: Wr(a.value),
                    value: Wr(u.value)
                });
            }
            else for(var l in t)ut(t, l) && rv(s, {
                key: l,
                value: Wr(t[l])
            });
        },
        parseQuery: function(t) {
            if (t) for(var e, r, n = this.entries, o = av(t, "&"), i = 0; i < o.length;)(e = o[i++]).length && (r = av(e, "="), rv(n, {
                key: vv(ov(r)),
                value: vv(ev(r, "="))
            }));
        },
        serialize: function() {
            for(var t, e = this.entries, r = [], n = 0; n < e.length;)t = e[n++], rv(r, mv(t.key) + "=" + mv(t.value));
            return ev(r, "&");
        },
        update: function() {
            this.entries.length = 0, this.parseQuery(this.url.query);
        },
        updateURL: function() {
            this.url && this.url.update();
        }
    };
    var Sv = function() {
        ko(this, Ev);
        var t = zp(this, new wv(arguments.length > 0 ? arguments[0] : void 0));
        u || (this.size = t.entries.length);
    }, Ev = Sv.prototype;
    if (Mo(Ev, {
        append: function(t, e) {
            var r = Wp(this);
            Up(arguments.length, 2), rv(r.entries, {
                key: Wr(t),
                value: Wr(e)
            }), u || this.length++, r.updateURL();
        },
        delete: function(t) {
            for(var e = Wp(this), r = Up(arguments.length, 1), n = e.entries, o = Wr(t), i = r < 2 ? void 0 : arguments[1], a = void 0 === i ? i : Wr(i), s = 0; s < n.length;){
                var c = n[s];
                if (c.key !== o || void 0 !== a && c.value !== a) s++;
                else if (iv(n, s, 1), void 0 !== a) break;
            }
            u || (this.size = n.length), e.updateURL();
        },
        get: function(t) {
            var e = Wp(this).entries;
            Up(arguments.length, 1);
            for(var r = Wr(t), n = 0; n < e.length; n++)if (e[n].key === r) return e[n].value;
            return null;
        },
        getAll: function(t) {
            var e = Wp(this).entries;
            Up(arguments.length, 1);
            for(var r = Wr(t), n = [], o = 0; o < e.length; o++)e[o].key === r && rv(n, e[o].value);
            return n;
        },
        has: function(t) {
            for(var e = Wp(this).entries, r = Up(arguments.length, 1), n = Wr(t), o = r < 2 ? void 0 : arguments[1], i = void 0 === o ? o : Wr(o), a = 0; a < e.length;){
                var u = e[a++];
                if (u.key === n && (void 0 === i || u.value === i)) return !0;
            }
            return !1;
        },
        set: function(t, e) {
            var r = Wp(this);
            Up(arguments.length, 1);
            for(var n, o = r.entries, i = !1, a = Wr(t), s = Wr(e), c = 0; c < o.length; c++)(n = o[c]).key === a && (i ? iv(o, c--, 1) : (i = !0, n.value = s));
            i || rv(o, {
                key: a,
                value: s
            }), u || (this.size = o.length), r.updateURL();
        },
        sort: function() {
            var t = Wp(this);
            _p(t.entries, function(t, e) {
                return t.key > e.key ? 1 : -1;
            }), t.updateURL();
        },
        forEach: function(t) {
            for(var e, r = Wp(this).entries, n = ar(t, arguments.length > 1 ? arguments[1] : void 0), o = 0; o < r.length;)n((e = r[o++]).value, e.key, this);
        },
        keys: function() {
            return new bv(this, "keys");
        },
        values: function() {
            return new bv(this, "values");
        },
        entries: function() {
            return new bv(this, "entries");
        }
    }, {
        enumerable: !0
    }), ie(Ev, Fp, Ev.entries, {
        name: "entries"
    }), ie(Ev, "toString", function() {
        return Wp(this).serialize();
    }, {
        enumerable: !0
    }), u && so(Ev, "size", {
        get: function() {
            return Wp(this).entries.length;
        },
        configurable: !0,
        enumerable: !0
    }), an(Sv, Bp), Ce({
        global: !0,
        constructor: !0,
        forced: !Mp
    }, {
        URLSearchParams: Sv
    }), !Mp && T(Kp)) {
        var Ov = b(Vp.has), xv = b(Vp.set), Rv = function(t) {
            if (M(t)) {
                var e, r = t.body;
                if (pr(r) === Bp) return e = t.headers ? new Kp(t.headers) : new Kp, Ov(e, "content-type") || xv(e, "content-type", "application/x-www-form-urlencoded;charset=UTF-8"), Ve(t, {
                    body: d(0, Wr(r)),
                    headers: d(0, e)
                });
            }
            return t;
        };
        if (T(Hp) && Ce({
            global: !0,
            enumerable: !0,
            dontCallGetSet: !0,
            forced: !0
        }, {
            fetch: function(t) {
                return Hp(t, arguments.length > 1 ? Rv(arguments[1]) : {});
            }
        }), T($p)) {
            var Pv = function(t) {
                return ko(this, Gp), new $p(t, arguments.length > 1 ? Rv(arguments[1]) : {});
            };
            Gp.constructor = Pv, Pv.prototype = Gp, Ce({
                global: !0,
                constructor: !0,
                dontCallGetSet: !0,
                forced: !0
            }, {
                Request: Pv
            });
        }
    }
    var Av = {
        URLSearchParams: Sv,
        getState: Wp
    }, jv = URLSearchParams, kv = jv.prototype, Iv = b(kv.append), Tv = b(kv.delete), Mv = b(kv.forEach), Lv = b([].push), Uv = new jv("a=1&a=2&b=3");
    Uv.delete("a", 1), Uv.delete("b", void 0), Uv + "" != "a=2" && ie(kv, "delete", function(t) {
        var e = arguments.length, r = e < 2 ? void 0 : arguments[1];
        if (e && void 0 === r) return Tv(this, t);
        var n = [];
        Mv(this, function(t, e) {
            Lv(n, {
                key: e,
                value: t
            });
        }), Up(e, 1);
        for(var o, i = Wr(t), a = Wr(r), u = 0, s = 0, c = !1, f = n.length; u < f;)o = n[u++], c || o.key === i ? (c = !0, Tv(this, o.key)) : s++;
        for(; s < f;)(o = n[s++]).key === i && o.value === a || Iv(this, o.key, o.value);
    }, {
        enumerable: !0,
        unsafe: !0
    });
    var Nv = URLSearchParams, Cv = Nv.prototype, _v = b(Cv.getAll), Fv = b(Cv.has), Bv = new Nv("a=1");
    !Bv.has("a", 2) && Bv.has("a", void 0) || ie(Cv, "has", function(t) {
        var e = arguments.length, r = e < 2 ? void 0 : arguments[1];
        if (e && void 0 === r) return Fv(this, t);
        var n = _v(this, t);
        Up(e, 1);
        for(var o = Wr(r), i = 0; i < n.length;)if (n[i++] === o) return !0;
        return !1;
    }, {
        enumerable: !0,
        unsafe: !0
    });
    var Dv = URLSearchParams.prototype, zv = b(Dv.forEach);
    u && !("size" in Dv) && so(Dv, "size", {
        get: function() {
            var t = 0;
            return zv(this, function() {
                t++;
            }), t;
        },
        configurable: !0,
        enumerable: !0
    });
    var Wv, qv = Object.assign, Hv = Object.defineProperty, $v = b([].concat), Kv = !qv || a(function() {
        if (u && 1 !== qv({
            b: 1
        }, qv(Hv({}, "a", {
            enumerable: !0,
            get: function() {
                Hv(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t = {}, e = {}, r = Symbol("assign detection"), n = "abcdefghijklmnopqrst";
        return t[r] = 7, n.split("").forEach(function(t) {
            e[t] = t;
        }), 7 !== qv({}, t)[r] || _e(qv({}, e)).join("") !== n;
    }) ? function(t, e) {
        for(var r = it(t), n = arguments.length, o = 1, i = xe.f, a = v.f; n > o;)for(var s, c = R(arguments[o++]), l = i ? $v(_e(c), i(c)) : _e(c), h = l.length, p = 0; h > p;)s = l[p++], u && !f(a, c, s) || (r[s] = c[s]);
        return r;
    } : qv, Gv = 2147483647, Vv = /[^\0-\u007E]/, Yv = /[.\u3002\uFF0E\uFF61]/g, Xv = "Overflow: input needs wider integers to process", Jv = RangeError, Qv = b(Yv.exec), Zv = Math.floor, td = String.fromCharCode, ed = b("".charCodeAt), rd = b([].join), nd = b([].push), od = b("".replace), id = b("".split), ad = b("".toLowerCase), ud = function(t) {
        return t + 22 + 75 * (t < 26);
    }, sd = function(t, e, r) {
        var n = 0;
        for(t = r ? Zv(t / 700) : t >> 1, t += Zv(t / e); t > 455;)t = Zv(t / 35), n += 36;
        return Zv(n + 36 * t / (t + 38));
    }, cd = function(t) {
        var e = [];
        t = function(t) {
            for(var e = [], r = 0, n = t.length; r < n;){
                var o = ed(t, r++);
                if (o >= 55296 && o <= 56319 && r < n) {
                    var i = ed(t, r++);
                    56320 == (64512 & i) ? nd(e, ((1023 & o) << 10) + (1023 & i) + 65536) : (nd(e, o), r--);
                } else nd(e, o);
            }
            return e;
        }(t);
        var r, n, o = t.length, i = 128, a = 0, u = 72;
        for(r = 0; r < t.length; r++)(n = t[r]) < 128 && nd(e, td(n));
        var s = e.length, c = s;
        for(s && nd(e, "-"); c < o;){
            var f = Gv;
            for(r = 0; r < t.length; r++)(n = t[r]) >= i && n < f && (f = n);
            var l = c + 1;
            if (f - i > Zv((Gv - a) / l)) throw new Jv(Xv);
            for(a += (f - i) * l, i = f, r = 0; r < t.length; r++){
                if ((n = t[r]) < i && ++a > Gv) throw new Jv(Xv);
                if (n === i) {
                    for(var h = a, p = 36;;){
                        var v = p <= u ? 1 : p >= u + 26 ? 26 : p - u;
                        if (h < v) break;
                        var d = h - v, g = 36 - v;
                        nd(e, td(ud(v + d % g))), h = Zv(d / g), p += 36;
                    }
                    nd(e, td(ud(h))), u = sd(a, l, c === s), a = 0, c++;
                }
            }
            a++, i++;
        }
        return rd(e, "");
    }, fd = Gr.codeAt, ld = ne.set, hd = ne.getterFor("URL"), pd = Av.URLSearchParams, vd = Av.getState, dd = i.URL, gd = i.TypeError, yd = i.parseInt, md = Math.floor, bd = Math.pow, wd = b("".charAt), Sd = b(/./.exec), Ed = b([].join), Od = b(1..toString), xd = b([].pop), Rd = b([].push), Pd = b("".replace), Ad = b([].shift), jd = b("".split), kd = b("".slice), Id = b("".toLowerCase), Td = b([].unshift), Md = "Invalid scheme", Ld = "Invalid host", Ud = "Invalid port", Nd = /[a-z]/i, Cd = /[\d+-.a-z]/i, _d = /\d/, Fd = /^0x/i, Bd = /^[0-7]+$/, Dd = /^\d+$/, zd = /^[\da-f]+$/i, Wd = /[\0\t\n\r #%/:<>?@[\\\]^|]/, qd = /[\0\t\n\r #/:<>?@[\\\]^|]/, Hd = /^[\u0000-\u0020]+/, $d = /(^|[^\u0000-\u0020])[\u0000-\u0020]+$/, Kd = /[\t\n\r]/g, Gd = function(t) {
        var e, r, n, o;
        if ("number" == typeof t) {
            for(e = [], r = 0; r < 4; r++)Td(e, t % 256), t = md(t / 256);
            return Ed(e, ".");
        }
        if ("object" == typeof t) {
            for(e = "", n = function(t) {
                for(var e = null, r = 1, n = null, o = 0, i = 0; i < 8; i++)0 !== t[i] ? (o > r && (e = n, r = o), n = null, o = 0) : (null === n && (n = i), ++o);
                return o > r ? n : e;
            }(t), r = 0; r < 8; r++)o && 0 === t[r] || (o && (o = !1), n === r ? (e += r ? ":" : "::", o = !0) : (e += Od(t[r], 16), r < 7 && (e += ":")));
            return "[" + e + "]";
        }
        return t;
    }, Vd = {}, Yd = Kv({}, Vd, {
        " ": 1,
        '"': 1,
        "<": 1,
        ">": 1,
        "`": 1
    }), Xd = Kv({}, Yd, {
        "#": 1,
        "?": 1,
        "{": 1,
        "}": 1
    }), Jd = Kv({}, Xd, {
        "/": 1,
        ":": 1,
        ";": 1,
        "=": 1,
        "@": 1,
        "[": 1,
        "\\": 1,
        "]": 1,
        "^": 1,
        "|": 1
    }), Qd = function(t, e) {
        var r = fd(t, 0);
        return r > 32 && r < 127 && !ut(e, t) ? t : encodeURIComponent(t);
    }, Zd = {
        ftp: 21,
        file: null,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
    }, tg = function(t, e) {
        var r;
        return 2 === t.length && Sd(Nd, wd(t, 0)) && (":" === (r = wd(t, 1)) || !e && "|" === r);
    }, eg = function(t) {
        var e;
        return t.length > 1 && tg(kd(t, 0, 2)) && (2 === t.length || "/" === (e = wd(t, 2)) || "\\" === e || "?" === e || "#" === e);
    }, rg = function(t) {
        return "." === t || "%2e" === Id(t);
    }, ng = {}, og = {}, ig = {}, ag = {}, ug = {}, sg = {}, cg = {}, fg = {}, lg = {}, hg = {}, pg = {}, vg = {}, dg = {}, gg = {}, yg = {}, mg = {}, bg = {}, wg = {}, Sg = {}, Eg = {}, Og = {}, xg = function(t, e, r) {
        var n, o, i, a = Wr(t);
        if (e) {
            if (o = this.parse(a)) throw new gd(o);
            this.searchParams = null;
        } else {
            if (void 0 !== r && (n = new xg(r, !0)), o = this.parse(a, null, n)) throw new gd(o);
            (i = vd(new pd)).bindURL(this), this.searchParams = i;
        }
    };
    xg.prototype = {
        type: "URL",
        parse: function(t, e, r) {
            var n, o, i, a, u, s = this, c = e || ng, f = 0, l = "", h = !1, p = !1, v = !1;
            for(t = Wr(t), e || (s.scheme = "", s.username = "", s.password = "", s.host = null, s.port = null, s.path = [], s.query = null, s.fragment = null, s.cannotBeABaseURL = !1, t = Pd(t, Hd, ""), t = Pd(t, $d, "$1")), t = Pd(t, Kd, ""), n = Wn(t); f <= n.length;){
                switch(o = n[f], c){
                    case ng:
                        if (!o || !Sd(Nd, o)) {
                            if (e) return Md;
                            c = ig;
                            continue;
                        }
                        l += Id(o), c = og;
                        break;
                    case og:
                        if (o && (Sd(Cd, o) || "+" === o || "-" === o || "." === o)) l += Id(o);
                        else {
                            if (":" !== o) {
                                if (e) return Md;
                                l = "", c = ig, f = 0;
                                continue;
                            }
                            if (e && (s.isSpecial() !== ut(Zd, l) || "file" === l && (s.includesCredentials() || null !== s.port) || "file" === s.scheme && !s.host)) return;
                            if (s.scheme = l, e) return void (s.isSpecial() && Zd[s.scheme] === s.port && (s.port = null));
                            l = "", "file" === s.scheme ? c = gg : s.isSpecial() && r && r.scheme === s.scheme ? c = ag : s.isSpecial() ? c = fg : "/" === n[f + 1] ? (c = ug, f++) : (s.cannotBeABaseURL = !0, Rd(s.path, ""), c = Sg);
                        }
                        break;
                    case ig:
                        if (!r || r.cannotBeABaseURL && "#" !== o) return Md;
                        if (r.cannotBeABaseURL && "#" === o) {
                            s.scheme = r.scheme, s.path = vo(r.path), s.query = r.query, s.fragment = "", s.cannotBeABaseURL = !0, c = Og;
                            break;
                        }
                        c = "file" === r.scheme ? gg : sg;
                        continue;
                    case ag:
                        if ("/" !== o || "/" !== n[f + 1]) {
                            c = sg;
                            continue;
                        }
                        c = lg, f++;
                        break;
                    case ug:
                        if ("/" === o) {
                            c = hg;
                            break;
                        }
                        c = wg;
                        continue;
                    case sg:
                        if (s.scheme = r.scheme, o === Wv) s.username = r.username, s.password = r.password, s.host = r.host, s.port = r.port, s.path = vo(r.path), s.query = r.query;
                        else if ("/" === o || "\\" === o && s.isSpecial()) c = cg;
                        else if ("?" === o) s.username = r.username, s.password = r.password, s.host = r.host, s.port = r.port, s.path = vo(r.path), s.query = "", c = Eg;
                        else {
                            if ("#" !== o) {
                                s.username = r.username, s.password = r.password, s.host = r.host, s.port = r.port, s.path = vo(r.path), s.path.length--, c = wg;
                                continue;
                            }
                            s.username = r.username, s.password = r.password, s.host = r.host, s.port = r.port, s.path = vo(r.path), s.query = r.query, s.fragment = "", c = Og;
                        }
                        break;
                    case cg:
                        if (!s.isSpecial() || "/" !== o && "\\" !== o) {
                            if ("/" !== o) {
                                s.username = r.username, s.password = r.password, s.host = r.host, s.port = r.port, c = wg;
                                continue;
                            }
                            c = hg;
                        } else c = lg;
                        break;
                    case fg:
                        if (c = lg, "/" !== o || "/" !== wd(l, f + 1)) continue;
                        f++;
                        break;
                    case lg:
                        if ("/" !== o && "\\" !== o) {
                            c = hg;
                            continue;
                        }
                        break;
                    case hg:
                        if ("@" === o) {
                            h && (l = "%40" + l), h = !0, i = Wn(l);
                            for(var d = 0; d < i.length; d++){
                                var g = i[d];
                                if (":" !== g || v) {
                                    var y = Qd(g, Jd);
                                    v ? s.password += y : s.username += y;
                                } else v = !0;
                            }
                            l = "";
                        } else if (o === Wv || "/" === o || "?" === o || "#" === o || "\\" === o && s.isSpecial()) {
                            if (h && "" === l) return "Invalid authority";
                            f -= Wn(l).length + 1, l = "", c = pg;
                        } else l += o;
                        break;
                    case pg:
                    case vg:
                        if (e && "file" === s.scheme) {
                            c = mg;
                            continue;
                        }
                        if (":" !== o || p) {
                            if (o === Wv || "/" === o || "?" === o || "#" === o || "\\" === o && s.isSpecial()) {
                                if (s.isSpecial() && "" === l) return Ld;
                                if (e && "" === l && (s.includesCredentials() || null !== s.port)) return;
                                if (a = s.parseHost(l)) return a;
                                if (l = "", c = bg, e) return;
                                continue;
                            }
                            "[" === o ? p = !0 : "]" === o && (p = !1), l += o;
                        } else {
                            if ("" === l) return Ld;
                            if (a = s.parseHost(l)) return a;
                            if (l = "", c = dg, e === vg) return;
                        }
                        break;
                    case dg:
                        if (!Sd(_d, o)) {
                            if (o === Wv || "/" === o || "?" === o || "#" === o || "\\" === o && s.isSpecial() || e) {
                                if ("" !== l) {
                                    var m = yd(l, 10);
                                    if (m > 65535) return Ud;
                                    s.port = s.isSpecial() && m === Zd[s.scheme] ? null : m, l = "";
                                }
                                if (e) return;
                                c = bg;
                                continue;
                            }
                            return Ud;
                        }
                        l += o;
                        break;
                    case gg:
                        if (s.scheme = "file", "/" === o || "\\" === o) c = yg;
                        else {
                            if (!r || "file" !== r.scheme) {
                                c = wg;
                                continue;
                            }
                            switch(o){
                                case Wv:
                                    s.host = r.host, s.path = vo(r.path), s.query = r.query;
                                    break;
                                case "?":
                                    s.host = r.host, s.path = vo(r.path), s.query = "", c = Eg;
                                    break;
                                case "#":
                                    s.host = r.host, s.path = vo(r.path), s.query = r.query, s.fragment = "", c = Og;
                                    break;
                                default:
                                    eg(Ed(vo(n, f), "")) || (s.host = r.host, s.path = vo(r.path), s.shortenPath()), c = wg;
                                    continue;
                            }
                        }
                        break;
                    case yg:
                        if ("/" === o || "\\" === o) {
                            c = mg;
                            break;
                        }
                        r && "file" === r.scheme && !eg(Ed(vo(n, f), "")) && (tg(r.path[0], !0) ? Rd(s.path, r.path[0]) : s.host = r.host), c = wg;
                        continue;
                    case mg:
                        if (o === Wv || "/" === o || "\\" === o || "?" === o || "#" === o) {
                            if (!e && tg(l)) c = wg;
                            else if ("" === l) {
                                if (s.host = "", e) return;
                                c = bg;
                            } else {
                                if (a = s.parseHost(l)) return a;
                                if ("localhost" === s.host && (s.host = ""), e) return;
                                l = "", c = bg;
                            }
                            continue;
                        }
                        l += o;
                        break;
                    case bg:
                        if (s.isSpecial()) {
                            if (c = wg, "/" !== o && "\\" !== o) continue;
                        } else if (e || "?" !== o) if (e || "#" !== o) {
                            if (o !== Wv && (c = wg, "/" !== o)) continue;
                        } else s.fragment = "", c = Og;
                        else s.query = "", c = Eg;
                        break;
                    case wg:
                        if (o === Wv || "/" === o || "\\" === o && s.isSpecial() || !e && ("?" === o || "#" === o)) {
                            if (".." === (u = Id(u = l)) || "%2e." === u || ".%2e" === u || "%2e%2e" === u ? (s.shortenPath(), "/" === o || "\\" === o && s.isSpecial() || Rd(s.path, "")) : rg(l) ? "/" === o || "\\" === o && s.isSpecial() || Rd(s.path, "") : ("file" === s.scheme && !s.path.length && tg(l) && (s.host && (s.host = ""), l = wd(l, 0) + ":"), Rd(s.path, l)), l = "", "file" === s.scheme && (o === Wv || "?" === o || "#" === o)) for(; s.path.length > 1 && "" === s.path[0];)Ad(s.path);
                            "?" === o ? (s.query = "", c = Eg) : "#" === o && (s.fragment = "", c = Og);
                        } else l += Qd(o, Xd);
                        break;
                    case Sg:
                        "?" === o ? (s.query = "", c = Eg) : "#" === o ? (s.fragment = "", c = Og) : o !== Wv && (s.path[0] += Qd(o, Vd));
                        break;
                    case Eg:
                        e || "#" !== o ? o !== Wv && ("'" === o && s.isSpecial() ? s.query += "%27" : s.query += "#" === o ? "%23" : Qd(o, Vd)) : (s.fragment = "", c = Og);
                        break;
                    case Og:
                        o !== Wv && (s.fragment += Qd(o, Yd));
                }
                f++;
            }
        },
        parseHost: function(t) {
            var e, r, n;
            if ("[" === wd(t, 0)) {
                if ("]" !== wd(t, t.length - 1)) return Ld;
                if (e = function(t) {
                    var e, r, n, o, i, a, u, s = [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ], c = 0, f = null, l = 0, h = function() {
                        return wd(t, l);
                    };
                    if (":" === h()) {
                        if (":" !== wd(t, 1)) return;
                        l += 2, f = ++c;
                    }
                    for(; h();){
                        if (8 === c) return;
                        if (":" !== h()) {
                            for(e = r = 0; r < 4 && Sd(zd, h());)e = 16 * e + yd(h(), 16), l++, r++;
                            if ("." === h()) {
                                if (0 === r) return;
                                if (l -= r, c > 6) return;
                                for(n = 0; h();){
                                    if (o = null, n > 0) {
                                        if (!("." === h() && n < 4)) return;
                                        l++;
                                    }
                                    if (!Sd(_d, h())) return;
                                    for(; Sd(_d, h());){
                                        if (i = yd(h(), 10), null === o) o = i;
                                        else {
                                            if (0 === o) return;
                                            o = 10 * o + i;
                                        }
                                        if (o > 255) return;
                                        l++;
                                    }
                                    s[c] = 256 * s[c] + o, 2 != ++n && 4 !== n || c++;
                                }
                                if (4 !== n) return;
                                break;
                            }
                            if (":" === h()) {
                                if (l++, !h()) return;
                            } else if (h()) return;
                            s[c++] = e;
                        } else {
                            if (null !== f) return;
                            l++, f = ++c;
                        }
                    }
                    if (null !== f) for(a = c - f, c = 7; 0 !== c && a > 0;)u = s[c], s[c--] = s[f + a - 1], s[f + --a] = u;
                    else if (8 !== c) return;
                    return s;
                }(kd(t, 1, -1)), !e) return Ld;
                this.host = e;
            } else if (this.isSpecial()) {
                if (t = function(t) {
                    var e, r, n = [], o = id(od(ad(t), Yv, "."), ".");
                    for(e = 0; e < o.length; e++)nd(n, Qv(Vv, r = o[e]) ? "xn--" + cd(r) : r);
                    return rd(n, ".");
                }(t), Sd(Wd, t)) return Ld;
                if (e = function(t) {
                    var e, r, n, o, i, a, u, s = jd(t, ".");
                    if (s.length && "" === s[s.length - 1] && s.length--, (e = s.length) > 4) return t;
                    for(r = [], n = 0; n < e; n++){
                        if ("" === (o = s[n])) return t;
                        if (i = 10, o.length > 1 && "0" === wd(o, 0) && (i = Sd(Fd, o) ? 16 : 8, o = kd(o, 8 === i ? 1 : 2)), "" === o) a = 0;
                        else {
                            if (!Sd(10 === i ? Dd : 8 === i ? Bd : zd, o)) return t;
                            a = yd(o, i);
                        }
                        Rd(r, a);
                    }
                    for(n = 0; n < e; n++)if (a = r[n], n === e - 1) {
                        if (a >= bd(256, 5 - e)) return null;
                    } else if (a > 255) return null;
                    for(u = xd(r), n = 0; n < r.length; n++)u += r[n] * bd(256, 3 - n);
                    return u;
                }(t), null === e) return Ld;
                this.host = e;
            } else {
                if (Sd(qd, t)) return Ld;
                for(e = "", r = Wn(t), n = 0; n < r.length; n++)e += Qd(r[n], Vd);
                this.host = e;
            }
        },
        cannotHaveUsernamePasswordPort: function() {
            return !this.host || this.cannotBeABaseURL || "file" === this.scheme;
        },
        includesCredentials: function() {
            return "" !== this.username || "" !== this.password;
        },
        isSpecial: function() {
            return ut(Zd, this.scheme);
        },
        shortenPath: function() {
            var t = this.path, e = t.length;
            !e || "file" === this.scheme && 1 === e && tg(t[0], !0) || t.length--;
        },
        serialize: function() {
            var t = this, e = t.scheme, r = t.username, n = t.password, o = t.host, i = t.port, a = t.path, u = t.query, s = t.fragment, c = e + ":";
            return null !== o ? (c += "//", t.includesCredentials() && (c += r + (n ? ":" + n : "") + "@"), c += Gd(o), null !== i && (c += ":" + i)) : "file" === e && (c += "//"), c += t.cannotBeABaseURL ? a[0] : a.length ? "/" + Ed(a, "/") : "", null !== u && (c += "?" + u), null !== s && (c += "#" + s), c;
        },
        setHref: function(t) {
            var e = this.parse(t);
            if (e) throw new gd(e);
            this.searchParams.update();
        },
        getOrigin: function() {
            var t = this.scheme, e = this.port;
            if ("blob" === t) try {
                return new Rg(t.path[0]).origin;
            } catch (t) {
                return "null";
            }
            return "file" !== t && this.isSpecial() ? t + "://" + Gd(this.host) + (null !== e ? ":" + e : "") : "null";
        },
        getProtocol: function() {
            return this.scheme + ":";
        },
        setProtocol: function(t) {
            this.parse(Wr(t) + ":", ng);
        },
        getUsername: function() {
            return this.username;
        },
        setUsername: function(t) {
            var e = Wn(Wr(t));
            if (!this.cannotHaveUsernamePasswordPort()) {
                this.username = "";
                for(var r = 0; r < e.length; r++)this.username += Qd(e[r], Jd);
            }
        },
        getPassword: function() {
            return this.password;
        },
        setPassword: function(t) {
            var e = Wn(Wr(t));
            if (!this.cannotHaveUsernamePasswordPort()) {
                this.password = "";
                for(var r = 0; r < e.length; r++)this.password += Qd(e[r], Jd);
            }
        },
        getHost: function() {
            var t = this.host, e = this.port;
            return null === t ? "" : null === e ? Gd(t) : Gd(t) + ":" + e;
        },
        setHost: function(t) {
            this.cannotBeABaseURL || this.parse(t, pg);
        },
        getHostname: function() {
            var t = this.host;
            return null === t ? "" : Gd(t);
        },
        setHostname: function(t) {
            this.cannotBeABaseURL || this.parse(t, vg);
        },
        getPort: function() {
            var t = this.port;
            return null === t ? "" : Wr(t);
        },
        setPort: function(t) {
            this.cannotHaveUsernamePasswordPort() || ("" === (t = Wr(t)) ? this.port = null : this.parse(t, dg));
        },
        getPathname: function() {
            var t = this.path;
            return this.cannotBeABaseURL ? t[0] : t.length ? "/" + Ed(t, "/") : "";
        },
        setPathname: function(t) {
            this.cannotBeABaseURL || (this.path = [], this.parse(t, bg));
        },
        getSearch: function() {
            var t = this.query;
            return t ? "?" + t : "";
        },
        setSearch: function(t) {
            "" === (t = Wr(t)) ? this.query = null : ("?" === wd(t, 0) && (t = kd(t, 1)), this.query = "", this.parse(t, Eg)), this.searchParams.update();
        },
        getSearchParams: function() {
            return this.searchParams.facade;
        },
        getHash: function() {
            var t = this.fragment;
            return t ? "#" + t : "";
        },
        setHash: function(t) {
            "" !== (t = Wr(t)) ? ("#" === wd(t, 0) && (t = kd(t, 1)), this.fragment = "", this.parse(t, Og)) : this.fragment = null;
        },
        update: function() {
            this.query = this.searchParams.serialize() || null;
        }
    };
    var Rg = function(t) {
        var e = ko(this, Pg), r = Up(arguments.length, 1) > 1 ? arguments[1] : void 0, n = ld(e, new xg(t, !1, r));
        u || (e.href = n.serialize(), e.origin = n.getOrigin(), e.protocol = n.getProtocol(), e.username = n.getUsername(), e.password = n.getPassword(), e.host = n.getHost(), e.hostname = n.getHostname(), e.port = n.getPort(), e.pathname = n.getPathname(), e.search = n.getSearch(), e.searchParams = n.getSearchParams(), e.hash = n.getHash());
    }, Pg = Rg.prototype, Ag = function(t, e) {
        return {
            get: function() {
                return hd(this)[t]();
            },
            set: e && function(t) {
                return hd(this)[e](t);
            },
            configurable: !0,
            enumerable: !0
        };
    };
    if (u && (so(Pg, "href", Ag("serialize", "setHref")), so(Pg, "origin", Ag("getOrigin")), so(Pg, "protocol", Ag("getProtocol", "setProtocol")), so(Pg, "username", Ag("getUsername", "setUsername")), so(Pg, "password", Ag("getPassword", "setPassword")), so(Pg, "host", Ag("getHost", "setHost")), so(Pg, "hostname", Ag("getHostname", "setHostname")), so(Pg, "port", Ag("getPort", "setPort")), so(Pg, "pathname", Ag("getPathname", "setPathname")), so(Pg, "search", Ag("getSearch", "setSearch")), so(Pg, "searchParams", Ag("getSearchParams")), so(Pg, "hash", Ag("getHash", "setHash"))), ie(Pg, "toJSON", function() {
        return hd(this).serialize();
    }, {
        enumerable: !0
    }), ie(Pg, "toString", function() {
        return hd(this).serialize();
    }, {
        enumerable: !0
    }), dd) {
        var jg = dd.createObjectURL, kg = dd.revokeObjectURL;
        jg && ie(Rg, "createObjectURL", ar(jg, dd)), kg && ie(Rg, "revokeObjectURL", ar(kg, dd));
    }
    an(Rg, "URL"), Ce({
        global: !0,
        constructor: !0,
        forced: !Mp,
        sham: !u
    }, {
        URL: Rg
    });
    var Ig = L("URL"), Tg = Mp && a(function() {
        Ig.canParse();
    }), Mg = a(function() {
        return 1 !== Ig.canParse.length;
    });
    Ce({
        target: "URL",
        stat: !0,
        forced: !Tg || Mg
    }, {
        canParse: function(t) {
            var e = Up(arguments.length, 1), r = Wr(t), n = e < 2 || void 0 === arguments[1] ? void 0 : Wr(arguments[1]);
            try {
                return !!new Ig(r, n);
            } catch (t) {
                return !1;
            }
        }
    });
    var Lg = L("URL");
    Ce({
        target: "URL",
        stat: !0,
        forced: !Mp
    }, {
        parse: function(t) {
            var e = Up(arguments.length, 1), r = Wr(t), n = e < 2 || void 0 === arguments[1] ? void 0 : Wr(arguments[1]);
            try {
                return new Lg(r, n);
            } catch (t) {
                return null;
            }
        }
    }), Ce({
        target: "URL",
        proto: !0,
        enumerable: !0
    }, {
        toJSON: function() {
            return f(URL.prototype.toString, this);
        }
    });
    var Ug = WeakMap.prototype, Ng = {
        WeakMap: WeakMap,
        set: b(Ug.set),
        get: b(Ug.get),
        has: b(Ug.has),
        remove: b(Ug.delete)
    }, Cg = Ng.has, _g = function(t) {
        return Cg(t), t;
    }, Fg = Ng.get, Bg = Ng.has, Dg = Ng.set;
    Ce({
        target: "WeakMap",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        emplace: function(t, e) {
            var r, n, o = _g(this);
            return Bg(o, t) ? (r = Fg(o, t), "update" in e && (r = e.update(r, t, o), Dg(o, t, r)), r) : (n = e.insert(t, o), Dg(o, t, n), n);
        }
    }), Ce({
        target: "WeakMap",
        stat: !0,
        forced: !0
    }, {
        from: ei(Ng.WeakMap, Ng.set, !0)
    }), Ce({
        target: "WeakMap",
        stat: !0,
        forced: !0
    }, {
        of: ri(Ng.WeakMap, Ng.set, !0)
    });
    var zg = Ng.remove;
    Ce({
        target: "WeakMap",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        deleteAll: function() {
            for(var t, e = _g(this), r = !0, n = 0, o = arguments.length; n < o; n++)t = zg(e, arguments[n]), r = r && t;
            return !!r;
        }
    }), Ce({
        target: "WeakMap",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        upsert: Ii
    }), To("WeakSet", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, eu);
    var Wg = WeakSet.prototype, qg = {
        WeakSet: WeakSet,
        add: b(Wg.add),
        has: b(Wg.has),
        remove: b(Wg.delete)
    }, Hg = qg.has, $g = function(t) {
        return Hg(t), t;
    }, Kg = qg.add;
    Ce({
        target: "WeakSet",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        addAll: function() {
            for(var t = $g(this), e = 0, r = arguments.length; e < r; e++)Kg(t, arguments[e]);
            return t;
        }
    });
    var Gg = qg.remove;
    Ce({
        target: "WeakSet",
        proto: !0,
        real: !0,
        forced: !0
    }, {
        deleteAll: function() {
            for(var t, e = $g(this), r = !0, n = 0, o = arguments.length; n < o; n++)t = Gg(e, arguments[n]), r = r && t;
            return !!r;
        }
    }), Ce({
        target: "WeakSet",
        stat: !0,
        forced: !0
    }, {
        from: ei(qg.WeakSet, qg.add, !1)
    }), Ce({
        target: "WeakSet",
        stat: !0,
        forced: !0
    }, {
        of: ri(qg.WeakSet, qg.add, !1)
    });
    var Vg = Error, Yg = b("".replace), Xg = String(new Vg("zxcasd").stack), Jg = /\n\s*at [^:]*:[^\n]*/, Qg = Jg.test(Xg), Zg = !a(function() {
        var t = new Error("a");
        return !("stack" in t) || (Object.defineProperty(t, "stack", d(1, 7)), 7 !== t.stack);
    }), ty = Error.captureStackTrace, ey = dt("toStringTag"), ry = Error, ny = [].push, oy = function(t, e) {
        var r, n, o, i, a, u = U(iy, this);
        dn ? r = dn(new ry, u ? Qr(this) : iy) : (r = u ? this : Ve(iy), _t(r, ey, "Error")), void 0 !== e && _t(r, "message", function(t, e) {
            return void 0 === t ? arguments.length < 2 ? "" : e : Wr(t);
        }(e)), i = r, a = r.stack, Zg && (ty ? ty(i, oy) : _t(i, "stack", function(t, e) {
            if (Qg && "string" == typeof t && !Vg.prepareStackTrace) for(; e--;)t = Yg(t, Jg, "");
            return t;
        }(a, 1))), arguments.length > 2 && (n = r, M(o = arguments[2]) && "cause" in o && _t(n, "cause", o.cause));
        var s = [];
        return Ao(t, ny, {
            that: s
        }), _t(r, "errors", s), r;
    };
    dn ? dn(oy, ry) : Ae(oy, ry, {
        name: !0
    });
    var iy = oy.prototype = Ve(ry.prototype, {
        constructor: d(1, oy),
        message: d(1, ""),
        name: d(1, "AggregateError")
    });
    Ce({
        global: !0,
        constructor: !0,
        arity: 2
    }, {
        AggregateError: oy
    });
    var ay, uy, sy, cy, fy = function(t) {
        return _.slice(0, t.length) === t;
    }, ly = fy("Bun/") ? "BUN" : fy("Cloudflare-Workers") ? "CLOUDFLARE" : fy("Deno/") ? "DENO" : fy("Node.js/") ? "NODE" : i.Bun && "string" == typeof Bun.version ? "BUN" : i.Deno && "object" == typeof Deno.version ? "DENO" : "process" === E(i.process) ? "NODE" : i.window && i.document ? "BROWSER" : "REST", hy = "NODE" === ly, py = /(?:ipad|iphone|ipod).*applewebkit/i.test(_), vy = i.setImmediate, dy = i.clearImmediate, gy = i.process, yy = i.Dispatch, my = i.Function, by = i.MessageChannel, wy = i.String, Sy = 0, Ey = {}, Oy = "onreadystatechange";
    a(function() {
        ay = i.location;
    });
    var xy = function(t) {
        if (ut(Ey, t)) {
            var e = Ey[t];
            delete Ey[t], e();
        }
    }, Ry = function(t) {
        return function() {
            xy(t);
        };
    }, Py = function(t) {
        xy(t.data);
    }, Ay = function(t) {
        i.postMessage(wy(t), ay.protocol + "//" + ay.host);
    };
    vy && dy || (vy = function(t) {
        Up(arguments.length, 1);
        var e = T(t) ? t : my(t), r = vo(arguments, 1);
        return Ey[++Sy] = function() {
            Ra(e, void 0, r);
        }, uy(Sy), Sy;
    }, dy = function(t) {
        delete Ey[t];
    }, hy ? uy = function(t) {
        gy.nextTick(Ry(t));
    } : yy && yy.now ? uy = function(t) {
        yy.now(Ry(t));
    } : by && !py ? (cy = (sy = new by).port2, sy.port1.onmessage = Py, uy = ar(cy.postMessage, cy)) : i.addEventListener && T(i.postMessage) && !i.importScripts && ay && "file:" !== ay.protocol && !a(Ay) ? (uy = Ay, i.addEventListener("message", Py, !1)) : uy = Oy in Et("script") ? function(t) {
        De.appendChild(Et("script"))[Oy] = function() {
            De.removeChild(this), xy(t);
        };
    } : function(t) {
        setTimeout(Ry(t), 0);
    });
    var jy = {
        set: vy,
        clear: dy
    }, ky = function() {
        this.head = null, this.tail = null;
    };
    ky.prototype = {
        add: function(t) {
            var e = {
                item: t,
                next: null
            }, r = this.tail;
            r ? r.next = e : this.head = e, this.tail = e;
        },
        get: function() {
            var t = this.head;
            if (t) return null === (this.head = t.next) && (this.tail = null), t.item;
        }
    };
    var Iy, Ty, My, Ly, Uy, Ny = ky, Cy = /ipad|iphone|ipod/i.test(_) && "undefined" != typeof Pebble, _y = /web0s(?!.*chrome)/i.test(_), Fy = jy.set, By = i.MutationObserver || i.WebKitMutationObserver, Dy = i.document, zy = i.process, Wy = i.Promise, qy = Ip("queueMicrotask");
    if (!qy) {
        var Hy = new Ny, $y = function() {
            var t, e;
            for(hy && (t = zy.domain) && t.exit(); e = Hy.get();)try {
                e();
            } catch (t) {
                throw Hy.head && Iy(), t;
            }
            t && t.enter();
        };
        py || hy || _y || !By || !Dy ? !Cy && Wy && Wy.resolve ? ((Ly = Wy.resolve(void 0)).constructor = Wy, Uy = ar(Ly.then, Ly), Iy = function() {
            Uy($y);
        }) : hy ? Iy = function() {
            zy.nextTick($y);
        } : (Fy = ar(Fy, i), Iy = function() {
            Fy($y);
        }) : (Ty = !0, My = Dy.createTextNode(""), new By($y).observe(My, {
            characterData: !0
        }), Iy = function() {
            My.data = Ty = !Ty;
        }), qy = function(t) {
            Hy.head || Iy(), Hy.add(t);
        };
    }
    var Ky, Gy, Vy, Yy = qy, Xy = function(t) {
        try {
            return {
                error: !1,
                value: t()
            };
        } catch (t) {
            return {
                error: !0,
                value: t
            };
        }
    }, Jy = i.Promise, Qy = dt("species"), Zy = !1, tm = T(i.PromiseRejectionEvent), em = Ue("Promise", function() {
        var t = Kt(Jy), e = t !== String(Jy);
        if (!e && 66 === W) return !0;
        if (!W || W < 51 || !/native code/.test(t)) {
            var r = new Jy(function(t) {
                t(1);
            }), n = function(t) {
                t(function() {}, function() {});
            };
            if ((r.constructor = {})[Qy] = n, !(Zy = r.then(function() {}) instanceof n)) return !0;
        }
        return !(e || "BROWSER" !== ly && "DENO" !== ly || tm);
    }), rm = {
        CONSTRUCTOR: em,
        REJECTION_EVENT: tm,
        SUBCLASSING: Zy
    }, nm = TypeError, om = function(t) {
        var e, r;
        this.promise = new t(function(t, n) {
            if (void 0 !== e || void 0 !== r) throw new nm("Bad Promise constructor");
            e = t, r = n;
        }), this.resolve = J(e), this.reject = J(r);
    }, im = {
        f: function(t) {
            return new om(t);
        }
    }, am = jy.set, um = "Promise", sm = rm.CONSTRUCTOR, cm = rm.REJECTION_EVENT, fm = rm.SUBCLASSING, lm = ne.getterFor(um), hm = ne.set, pm = Jy && Jy.prototype, vm = Jy, dm = pm, gm = i.TypeError, ym = i.document, mm = i.process, bm = im.f, wm = bm, Sm = !!(ym && ym.createEvent && i.dispatchEvent), Em = "unhandledrejection", Om = function(t) {
        var e;
        return !(!M(t) || !T(e = t.then)) && e;
    }, xm = function(t, e) {
        var r, n, o, i = e.value, a = 1 === e.state, u = a ? t.ok : t.fail, s = t.resolve, c = t.reject, l = t.domain;
        try {
            u ? (a || (2 === e.rejection && km(e), e.rejection = 1), !0 === u ? r = i : (l && l.enter(), r = u(i), l && (l.exit(), o = !0)), r === t.promise ? c(new gm("Promise-chain cycle")) : (n = Om(r)) ? f(n, r, s, c) : s(r)) : c(i);
        } catch (t) {
            l && !o && l.exit(), c(t);
        }
    }, Rm = function(t, e) {
        t.notified || (t.notified = !0, Yy(function() {
            for(var r, n = t.reactions; r = n.get();)xm(r, t);
            t.notified = !1, e && !t.rejection && Am(t);
        }));
    }, Pm = function(t, e, r) {
        var n, o;
        Sm ? ((n = ym.createEvent("Event")).promise = e, n.reason = r, n.initEvent(t, !1, !0), i.dispatchEvent(n)) : n = {
            promise: e,
            reason: r
        }, !cm && (o = i["on" + t]) ? o(n) : t === Em && function(t, e) {
            try {
                1 === arguments.length ? console.error(t) : console.error(t, e);
            } catch (t) {}
        }("Unhandled promise rejection", r);
    }, Am = function(t) {
        f(am, i, function() {
            var e, r = t.facade, n = t.value;
            if (jm(t) && (e = Xy(function() {
                hy ? mm.emit("unhandledRejection", n, r) : Pm(Em, r, n);
            }), t.rejection = hy || jm(t) ? 2 : 1, e.error)) throw e.value;
        });
    }, jm = function(t) {
        return 1 !== t.rejection && !t.parent;
    }, km = function(t) {
        f(am, i, function() {
            var e = t.facade;
            hy ? mm.emit("rejectionHandled", e) : Pm("rejectionhandled", e, t.value);
        });
    }, Im = function(t, e, r) {
        return function(n) {
            t(e, n, r);
        };
    }, Tm = function(t, e, r) {
        t.done || (t.done = !0, r && (t = r), t.value = e, t.state = 2, Rm(t, !0));
    }, Mm = function(t, e, r) {
        if (!t.done) {
            t.done = !0, r && (t = r);
            try {
                if (t.facade === e) throw new gm("Promise can't be resolved itself");
                var n = Om(e);
                n ? Yy(function() {
                    var r = {
                        done: !1
                    };
                    try {
                        f(n, e, Im(Mm, r, t), Im(Tm, r, t));
                    } catch (e) {
                        Tm(r, e, t);
                    }
                }) : (t.value = e, t.state = 1, Rm(t, !1));
            } catch (e) {
                Tm({
                    done: !1
                }, e, t);
            }
        }
    };
    if (sm && (vm = function(t) {
        ko(this, dm), J(t), f(Ky, this);
        var e = lm(this);
        try {
            t(Im(Mm, e), Im(Tm, e));
        } catch (t) {
            Tm(e, t);
        }
    }, (Ky = function(t) {
        hm(this, {
            type: um,
            done: !1,
            notified: !1,
            parent: !1,
            reactions: new Ny,
            rejection: !1,
            state: 0,
            value: null
        });
    }).prototype = ie(dm = vm.prototype, "then", function(t, e) {
        var r = lm(this), n = bm(Cc(this, vm));
        return r.parent = !0, n.ok = !T(t) || t, n.fail = T(e) && e, n.domain = hy ? mm.domain : void 0, 0 === r.state ? r.reactions.add(n) : Yy(function() {
            xm(n, r);
        }), n.promise;
    }), Gy = function() {
        var t = new Ky, e = lm(t);
        this.promise = t, this.resolve = Im(Mm, e), this.reject = Im(Tm, e);
    }, im.f = bm = function(t) {
        return t === vm || void 0 === t ? new Gy(t) : wm(t);
    }, T(Jy) && pm !== Object.prototype)) {
        Vy = pm.then, fm || ie(pm, "then", function(t, e) {
            var r = this;
            return new vm(function(t, e) {
                f(Vy, r, t, e);
            }).then(t, e);
        }, {
            unsafe: !0
        });
        try {
            delete pm.constructor;
        } catch (t) {}
        dn && dn(pm, dm);
    }
    Ce({
        global: !0,
        constructor: !0,
        wrap: !0,
        forced: sm
    }, {
        Promise: vm
    }), an(vm, um, !1), Uo(um);
    var Lm = rm.CONSTRUCTOR || !Gn(function(t) {
        Jy.all(t).then(void 0, function() {});
    });
    Ce({
        target: "Promise",
        stat: !0,
        forced: Lm
    }, {
        all: function(t) {
            var e = this, r = im.f(e), n = r.resolve, o = r.reject, i = Xy(function() {
                var r = J(e.resolve), i = [], a = 0, u = 1;
                Ao(t, function(t) {
                    var s = a++, c = !1;
                    u++, f(r, e, t).then(function(t) {
                        c || (c = !0, i[s] = t, --u || n(i));
                    }, o);
                }), --u || n(i);
            });
            return i.error && o(i.value), r.promise;
        }
    });
    var Um = Jy && Jy.prototype;
    if (Ce({
        target: "Promise",
        proto: !0,
        forced: rm.CONSTRUCTOR,
        real: !0
    }, {
        catch: function(t) {
            return this.then(void 0, t);
        }
    }), T(Jy)) {
        var Nm = L("Promise").prototype.catch;
        Um.catch !== Nm && ie(Um, "catch", Nm, {
            unsafe: !0
        });
    }
    Ce({
        target: "Promise",
        stat: !0,
        forced: Lm
    }, {
        race: function(t) {
            var e = this, r = im.f(e), n = r.reject, o = Xy(function() {
                var o = J(e.resolve);
                Ao(t, function(t) {
                    f(o, e, t).then(r.resolve, n);
                });
            });
            return o.error && n(o.value), r.promise;
        }
    }), Ce({
        target: "Promise",
        stat: !0,
        forced: rm.CONSTRUCTOR
    }, {
        reject: function(t) {
            var e = im.f(this);
            return (0, e.reject)(t), e.promise;
        }
    });
    var Cm = function(t, e) {
        if (kt(t), M(e) && e.constructor === t) return e;
        var r = im.f(t);
        return (0, r.resolve)(e), r.promise;
    };
    Ce({
        target: "Promise",
        stat: !0,
        forced: rm.CONSTRUCTOR
    }, {
        resolve: function(t) {
            return Cm(this, t);
        }
    }), Ce({
        target: "Promise",
        stat: !0,
        forced: Lm
    }, {
        allSettled: function(t) {
            var e = this, r = im.f(e), n = r.resolve, o = r.reject, i = Xy(function() {
                var r = J(e.resolve), o = [], i = 0, a = 1;
                Ao(t, function(t) {
                    var u = i++, s = !1;
                    a++, f(r, e, t).then(function(t) {
                        s || (s = !0, o[u] = {
                            status: "fulfilled",
                            value: t
                        }, --a || n(o));
                    }, function(t) {
                        s || (s = !0, o[u] = {
                            status: "rejected",
                            reason: t
                        }, --a || n(o));
                    });
                }), --a || n(o);
            });
            return i.error && o(i.value), r.promise;
        }
    });
    var _m = "No one promise resolved";
    Ce({
        target: "Promise",
        stat: !0,
        forced: Lm
    }, {
        any: function(t) {
            var e = this, r = L("AggregateError"), n = im.f(e), o = n.resolve, i = n.reject, a = Xy(function() {
                var n = J(e.resolve), a = [], u = 0, s = 1, c = !1;
                Ao(t, function(t) {
                    var l = u++, h = !1;
                    s++, f(n, e, t).then(function(t) {
                        h || c || (c = !0, o(t));
                    }, function(t) {
                        h || c || (h = !0, a[l] = t, --s || i(new r(a, _m)));
                    });
                }), --s || i(new r(a, _m));
            });
            return a.error && i(a.value), n.promise;
        }
    }), Ce({
        target: "Promise",
        stat: !0
    }, {
        withResolvers: function() {
            var t = im.f(this);
            return {
                promise: t.promise,
                resolve: t.resolve,
                reject: t.reject
            };
        }
    });
    var Fm = Jy && Jy.prototype, Bm = !!Jy && a(function() {
        Fm.finally.call({
            then: function() {}
        }, function() {});
    });
    if (Ce({
        target: "Promise",
        proto: !0,
        real: !0,
        forced: Bm
    }, {
        finally: function(t) {
            var e = Cc(this, L("Promise")), r = T(t);
            return this.then(r ? function(r) {
                return Cm(e, t()).then(function() {
                    return r;
                });
            } : t, r ? function(r) {
                return Cm(e, t()).then(function() {
                    throw r;
                });
            } : t);
        }
    }), T(Jy)) {
        var Dm = L("Promise").prototype.finally;
        Fm.finally !== Dm && ie(Fm, "finally", Dm, {
            unsafe: !0
        });
    }
    var zm = i.Promise, Wm = !1, qm = !zm || !zm.try || Xy(function() {
        zm.try(function(t) {
            Wm = 8 === t;
        }, 8);
    }).error || !Wm;
    Ce({
        target: "Promise",
        stat: !0,
        forced: qm
    }, {
        try: function(t) {
            var e = arguments.length > 1 ? vo(arguments, 1) : [], r = im.f(this), n = Xy(function() {
                return Ra(J(t), void 0, e);
            });
            return (n.error ? r.reject : r.resolve)(n.value), r.promise;
        }
    }), Ze("Promise", "finally");
    var Hm = "URLSearchParams" in self, $m = "Symbol" in self && "iterator" in Symbol, Km = "FileReader" in self && "Blob" in self && function() {
        try {
            return new Blob, !0;
        } catch (t) {
            return !1;
        }
    }(), Gm = "FormData" in self, Vm = "ArrayBuffer" in self;
    if (Vm) var Ym = [
        "[object Int8Array]",
        "[object Uint8Array]",
        "[object Uint8ClampedArray]",
        "[object Int16Array]",
        "[object Uint16Array]",
        "[object Int32Array]",
        "[object Uint32Array]",
        "[object Float32Array]",
        "[object Float64Array]"
    ], Xm = ArrayBuffer.isView || function(t) {
        return t && Ym.indexOf(Object.prototype.toString.call(t)) > -1;
    };
    function Jm(t) {
        if ("string" != typeof t && (t = String(t)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t)) throw new TypeError("Invalid character in header field name");
        return t.toLowerCase();
    }
    function Qm(t) {
        return "string" != typeof t && (t = String(t)), t;
    }
    function Zm(t) {
        var e = {
            next: function() {
                var e = t.shift();
                return {
                    done: void 0 === e,
                    value: e
                };
            }
        };
        return $m && (e[Symbol.iterator] = function() {
            return e;
        }), e;
    }
    function tb(t) {
        this.map = {}, t instanceof tb ? t.forEach(function(t, e) {
            this.append(e, t);
        }, this) : Array.isArray(t) ? t.forEach(function(t) {
            this.append(t[0], t[1]);
        }, this) : t && Object.getOwnPropertyNames(t).forEach(function(e) {
            this.append(e, t[e]);
        }, this);
    }
    function eb(t) {
        if (t.bodyUsed) return Promise.reject(new TypeError("Already read"));
        t.bodyUsed = !0;
    }
    function rb(t) {
        return new Promise(function(e, r) {
            t.onload = function() {
                e(t.result);
            }, t.onerror = function() {
                r(t.error);
            };
        });
    }
    function nb(t) {
        var e = new FileReader, r = rb(e);
        return e.readAsArrayBuffer(t), r;
    }
    function ob(t) {
        if (t.slice) return t.slice(0);
        var e = new Uint8Array(t.byteLength);
        return e.set(new Uint8Array(t)), e.buffer;
    }
    function ib() {
        return this.bodyUsed = !1, this._initBody = function(t) {
            var e;
            this._bodyInit = t, t ? "string" == typeof t ? this._bodyText = t : Km && Blob.prototype.isPrototypeOf(t) ? this._bodyBlob = t : Gm && FormData.prototype.isPrototypeOf(t) ? this._bodyFormData = t : Hm && URLSearchParams.prototype.isPrototypeOf(t) ? this._bodyText = t.toString() : Vm && Km && (e = t) && DataView.prototype.isPrototypeOf(e) ? (this._bodyArrayBuffer = ob(t.buffer), this._bodyInit = new Blob([
                this._bodyArrayBuffer
            ])) : Vm && (ArrayBuffer.prototype.isPrototypeOf(t) || Xm(t)) ? this._bodyArrayBuffer = ob(t) : this._bodyText = t = Object.prototype.toString.call(t) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof t ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : Hm && URLSearchParams.prototype.isPrototypeOf(t) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
        }, Km && (this.blob = function() {
            var t = eb(this);
            if (t) return t;
            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
            if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                this._bodyArrayBuffer
            ]));
            if (this._bodyFormData) throw new Error("could not read FormData body as blob");
            return Promise.resolve(new Blob([
                this._bodyText
            ]));
        }, this.arrayBuffer = function() {
            return this._bodyArrayBuffer ? eb(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(nb);
        }), this.text = function() {
            var t = eb(this);
            if (t) return t;
            if (this._bodyBlob) return function(t) {
                var e = new FileReader, r = rb(e);
                return e.readAsText(t), r;
            }(this._bodyBlob);
            if (this._bodyArrayBuffer) return Promise.resolve(function(t) {
                for(var e = new Uint8Array(t), r = new Array(e.length), n = 0; n < e.length; n++)r[n] = String.fromCharCode(e[n]);
                return r.join("");
            }(this._bodyArrayBuffer));
            if (this._bodyFormData) throw new Error("could not read FormData body as text");
            return Promise.resolve(this._bodyText);
        }, Gm && (this.formData = function() {
            return this.text().then(sb);
        }), this.json = function() {
            return this.text().then(JSON.parse);
        }, this;
    }
    tb.prototype.append = function(t, e) {
        t = Jm(t), e = Qm(e);
        var r = this.map[t];
        this.map[t] = r ? r + ", " + e : e;
    }, tb.prototype.delete = function(t) {
        delete this.map[Jm(t)];
    }, tb.prototype.get = function(t) {
        return t = Jm(t), this.has(t) ? this.map[t] : null;
    }, tb.prototype.has = function(t) {
        return this.map.hasOwnProperty(Jm(t));
    }, tb.prototype.set = function(t, e) {
        this.map[Jm(t)] = Qm(e);
    }, tb.prototype.forEach = function(t, e) {
        for(var r in this.map)this.map.hasOwnProperty(r) && t.call(e, this.map[r], r, this);
    }, tb.prototype.keys = function() {
        var t = [];
        return this.forEach(function(e, r) {
            t.push(r);
        }), Zm(t);
    }, tb.prototype.values = function() {
        var t = [];
        return this.forEach(function(e) {
            t.push(e);
        }), Zm(t);
    }, tb.prototype.entries = function() {
        var t = [];
        return this.forEach(function(e, r) {
            t.push([
                r,
                e
            ]);
        }), Zm(t);
    }, $m && (tb.prototype[Symbol.iterator] = tb.prototype.entries);
    var ab = [
        "DELETE",
        "GET",
        "HEAD",
        "OPTIONS",
        "POST",
        "PUT"
    ];
    function ub(t, e) {
        var r = (e = e || {}).body;
        if (t instanceof ub) {
            if (t.bodyUsed) throw new TypeError("Already read");
            this.url = t.url, this.credentials = t.credentials, e.headers || (this.headers = new tb(t.headers)), this.method = t.method, this.mode = t.mode, this.signal = t.signal, r || null == t._bodyInit || (r = t._bodyInit, t.bodyUsed = !0);
        } else this.url = String(t);
        if (this.credentials = e.credentials || this.credentials || "same-origin", !e.headers && this.headers || (this.headers = new tb(e.headers)), this.method = function(t) {
            var e = t.toUpperCase();
            return ab.indexOf(e) > -1 ? e : t;
        }(e.method || this.method || "GET"), this.mode = e.mode || this.mode || null, this.signal = e.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && r) throw new TypeError("Body not allowed for GET or HEAD requests");
        this._initBody(r);
    }
    function sb(t) {
        var e = new FormData;
        return t.trim().split("&").forEach(function(t) {
            if (t) {
                var r = t.split("="), n = r.shift().replace(/\+/g, " "), o = r.join("=").replace(/\+/g, " ");
                e.append(decodeURIComponent(n), decodeURIComponent(o));
            }
        }), e;
    }
    function cb(t, e) {
        e || (e = {}), this.type = "default", this.status = void 0 === e.status ? 200 : e.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in e ? e.statusText : "OK", this.headers = new tb(e.headers), this.url = e.url || "", this._initBody(t);
    }
    ub.prototype.clone = function() {
        return new ub(this, {
            body: this._bodyInit
        });
    }, ib.call(ub.prototype), ib.call(cb.prototype), cb.prototype.clone = function() {
        return new cb(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new tb(this.headers),
            url: this.url
        });
    }, cb.error = function() {
        var t = new cb(null, {
            status: 0,
            statusText: ""
        });
        return t.type = "error", t;
    };
    var fb = [
        301,
        302,
        303,
        307,
        308
    ];
    cb.redirect = function(t, e) {
        if (-1 === fb.indexOf(e)) throw new RangeError("Invalid status code");
        return new cb(null, {
            status: e,
            headers: {
                location: t
            }
        });
    };
    var lb = self.DOMException;
    try {
        new lb;
    } catch (t) {
        (lb = function(t, e) {
            this.message = t, this.name = e;
            var r = Error(t);
            this.stack = r.stack;
        }).prototype = Object.create(Error.prototype), lb.prototype.constructor = lb;
    }
    function hb(t, e) {
        return new Promise(function(r, n) {
            var o = new ub(t, e);
            if (o.signal && o.signal.aborted) return n(new lb("Aborted", "AbortError"));
            var i = new XMLHttpRequest;
            function a() {
                i.abort();
            }
            i.onload = function() {
                var t, e, n = {
                    status: i.status,
                    statusText: i.statusText,
                    headers: (t = i.getAllResponseHeaders() || "", e = new tb, t.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function(t) {
                        var r = t.split(":"), n = r.shift().trim();
                        if (n) {
                            var o = r.join(":").trim();
                            e.append(n, o);
                        }
                    }), e)
                };
                n.url = "responseURL" in i ? i.responseURL : n.headers.get("X-Request-URL"), r(new cb("response" in i ? i.response : i.responseText, n));
            }, i.onerror = function() {
                n(new TypeError("Network request failed"));
            }, i.ontimeout = function() {
                n(new TypeError("Network request failed"));
            }, i.onabort = function() {
                n(new lb("Aborted", "AbortError"));
            }, i.open(o.method, o.url, !0), "include" === o.credentials ? i.withCredentials = !0 : "omit" === o.credentials && (i.withCredentials = !1), "responseType" in i && Km && (i.responseType = "blob"), o.headers.forEach(function(t, e) {
                i.setRequestHeader(e, t);
            }), o.signal && (o.signal.addEventListener("abort", a), i.onreadystatechange = function() {
                4 === i.readyState && o.signal.removeEventListener("abort", a);
            }), i.send(void 0 === o._bodyInit ? null : o._bodyInit);
        });
    }
    hb.polyfill = !0, self.fetch || (self.fetch = hb, self.Headers = tb, self.Request = ub, self.Response = cb);
    var pb = Object.getOwnPropertySymbols, vb = Object.prototype.hasOwnProperty, db = Object.prototype.propertyIsEnumerable, gb = function() {
        try {
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
            var t = new String("abc");
            if (t[5] = "de", "5" === Object.getOwnPropertyNames(t)[0]) return !1;
            for(var e = {}, r = 0; r < 10; r++)e["_" + String.fromCharCode(r)] = r;
            if ("0123456789" !== Object.getOwnPropertyNames(e).map(function(t) {
                return e[t];
            }).join("")) return !1;
            var n = {};
            return "abcdefghijklmnopqrst".split("").forEach(function(t) {
                n[t] = t;
            }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, n)).join("");
        } catch (t) {
            return !1;
        }
    }() ? Object.assign : function(t, e) {
        for(var r, n, o = function(t) {
            if (null == t) throw new TypeError("Object.assign cannot be called with null or undefined");
            return Object(t);
        }(t), i = 1; i < arguments.length; i++){
            for(var a in r = Object(arguments[i]))vb.call(r, a) && (o[a] = r[a]);
            if (pb) {
                n = pb(r);
                for(var u = 0; u < n.length; u++)db.call(r, n[u]) && (o[n[u]] = r[n[u]]);
            }
        }
        return o;
    };
    Object.assign = gb;
}();
}}),
"[project]/node_modules/next/dist/build/webpack/plugins/telemetry-plugin.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TelemetryPlugin", {
    enumerable: true,
    get: function() {
        return TelemetryPlugin;
    }
});
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
// Map of a feature module to the file it belongs in the next package.
const FEATURE_MODULE_MAP = new Map([
    [
        'next/image',
        '/next/image.js'
    ],
    [
        'next/future/image',
        '/next/future/image.js'
    ],
    [
        'next/legacy/image',
        '/next/legacy/image.js'
    ],
    [
        'next/script',
        '/next/script.js'
    ],
    [
        'next/dynamic',
        '/next/dynamic.js'
    ]
]);
const FEATURE_MODULE_REGEXP_MAP = new Map([
    [
        '@next/font/google',
        /\/@next\/font\/google\/target.css?.+$/
    ],
    [
        '@next/font/local',
        /\/@next\/font\/local\/target.css?.+$/
    ],
    [
        'next/font/google',
        /\/next\/font\/google\/target.css?.+$/
    ],
    [
        'next/font/local',
        /\/next\/font\/local\/target.css?.+$/
    ]
]);
// List of build features used in webpack configuration
const BUILD_FEATURES = [
    'swcLoader',
    'swcRelay',
    'swcStyledComponents',
    'swcReactRemoveProperties',
    'swcExperimentalDecorators',
    'swcRemoveConsole',
    'swcImportSource',
    'swcEmotion',
    'swc/target/x86_64-apple-darwin',
    'swc/target/x86_64-unknown-linux-gnu',
    'swc/target/x86_64-pc-windows-msvc',
    'swc/target/i686-pc-windows-msvc',
    'swc/target/aarch64-unknown-linux-gnu',
    'swc/target/armv7-unknown-linux-gnueabihf',
    'swc/target/aarch64-apple-darwin',
    'swc/target/aarch64-linux-android',
    'swc/target/arm-linux-androideabi',
    'swc/target/x86_64-unknown-freebsd',
    'swc/target/x86_64-unknown-linux-musl',
    'swc/target/aarch64-unknown-linux-musl',
    'swc/target/aarch64-pc-windows-msvc',
    'turbotrace',
    'transpilePackages',
    'skipMiddlewareUrlNormalize',
    'skipTrailingSlashRedirect',
    'modularizeImports',
    'esmExternals'
];
const eliminatedPackages = new Set();
/**
 * Determine if there is a feature of interest in the specified 'module'.
 */ function findFeatureInModule(module) {
    if (module.type !== 'javascript/auto') {
        return;
    }
    const normalizedIdentifier = module.identifier().replace(/\\/g, '/');
    for (const [feature, path] of FEATURE_MODULE_MAP){
        if (normalizedIdentifier.endsWith(path)) {
            return feature;
        }
    }
    for (const [feature, regexp] of FEATURE_MODULE_REGEXP_MAP){
        if (regexp.test(normalizedIdentifier)) {
            return feature;
        }
    }
}
/**
 * Find unique origin modules in the specified 'connections', which possibly
 * contains more than one connection for a module due to different types of
 * dependency.
 */ function findUniqueOriginModulesInConnections(connections, originModule) {
    const originModules = new Set();
    for (const connection of connections){
        if (!originModules.has(connection.originModule) && connection.originModule !== originModule) {
            originModules.add(connection.originModule);
        }
    }
    return originModules;
}
class TelemetryPlugin {
    // Build feature usage is on/off and is known before the build starts
    constructor(buildFeaturesMap){
        this.usageTracker = new Map();
        for (const featureName of BUILD_FEATURES){
            this.usageTracker.set(featureName, {
                featureName,
                invocationCount: buildFeaturesMap.get(featureName) ? 1 : 0
            });
        }
        for (const featureName of FEATURE_MODULE_MAP.keys()){
            this.usageTracker.set(featureName, {
                featureName,
                invocationCount: 0
            });
        }
        for (const featureName of FEATURE_MODULE_REGEXP_MAP.keys()){
            this.usageTracker.set(featureName, {
                featureName,
                invocationCount: 0
            });
        }
    }
    apply(compiler) {
        compiler.hooks.make.tapAsync(TelemetryPlugin.name, async (compilation, callback)=>{
            compilation.hooks.finishModules.tapAsync(TelemetryPlugin.name, async (modules, modulesFinish)=>{
                for (const module of modules){
                    const feature = findFeatureInModule(module);
                    if (!feature) {
                        continue;
                    }
                    const connections = compilation.moduleGraph.getIncomingConnections(module);
                    const originModules = findUniqueOriginModulesInConnections(connections, module);
                    this.usageTracker.get(feature).invocationCount = originModules.size;
                }
                modulesFinish();
            });
            callback();
        });
        if (compiler.options.mode === 'production' && !compiler.watchMode) {
            compiler.hooks.compilation.tap(TelemetryPlugin.name, (compilation)=>{
                const moduleHooks = _webpack.NormalModule.getCompilationHooks(compilation);
                moduleHooks.loader.tap(TelemetryPlugin.name, (loaderContext)=>{
                    loaderContext.eliminatedPackages = eliminatedPackages;
                });
            });
        }
    }
    usages() {
        return [
            ...this.usageTracker.values()
        ];
    }
    packagesUsedInServerSideProps() {
        return Array.from(eliminatedPackages);
    }
} //# sourceMappingURL=telemetry-plugin.js.map
}}),
"[project]/node_modules/next/dist/build/webpack-config.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    NODE_BASE_ESM_RESOLVE_OPTIONS: null,
    NODE_BASE_RESOLVE_OPTIONS: null,
    NODE_ESM_RESOLVE_OPTIONS: null,
    NODE_RESOLVE_OPTIONS: null,
    attachReactRefresh: null,
    babelIncludeRegexes: null,
    default: null,
    hasExternalOtelApiPackage: null,
    loadProjectInfo: null,
    nextImageLoaderRegex: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NODE_BASE_ESM_RESOLVE_OPTIONS: function() {
        return NODE_BASE_ESM_RESOLVE_OPTIONS;
    },
    NODE_BASE_RESOLVE_OPTIONS: function() {
        return NODE_BASE_RESOLVE_OPTIONS;
    },
    NODE_ESM_RESOLVE_OPTIONS: function() {
        return NODE_ESM_RESOLVE_OPTIONS;
    },
    NODE_RESOLVE_OPTIONS: function() {
        return NODE_RESOLVE_OPTIONS;
    },
    attachReactRefresh: function() {
        return attachReactRefresh;
    },
    babelIncludeRegexes: function() {
        return babelIncludeRegexes;
    },
    default: function() {
        return getBaseWebpackConfig;
    },
    hasExternalOtelApiPackage: function() {
        return hasExternalOtelApiPackage;
    },
    loadProjectInfo: function() {
        return loadProjectInfo;
    },
    nextImageLoaderRegex: function() {
        return nextImageLoaderRegex;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)"));
const _ReactRefreshWebpackPlugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/ReactRefreshWebpackPlugin.js [app-rsc] (ecmascript)"));
const _picocolors = __turbopack_require__("[project]/node_modules/next/dist/lib/picocolors.js [app-rsc] (ecmascript)");
const _crypto = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/crypto [external] (crypto, cjs)"));
const _webpack = __turbopack_require__("[project]/node_modules/next/dist/compiled/webpack/webpack.js [app-rsc] (ecmascript)");
const _path = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[externals]/path [external] (path, cjs)"));
const _escaperegexp = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/escape-regexp.js [app-rsc] (ecmascript)");
const _constants = __turbopack_require__("[project]/node_modules/next/dist/lib/constants.js [app-rsc] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/build/utils.js [app-rsc] (ecmascript)");
const _constants1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/constants.js [app-rsc] (ecmascript)");
const _utils1 = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/utils.js [app-rsc] (ecmascript)");
const _entries = __turbopack_require__("[project]/node_modules/next/dist/build/entries.js [app-rsc] (ecmascript)");
const _log = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/output/log.js [app-rsc] (ecmascript)"));
const _config = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/index.js [app-rsc] (ecmascript)");
const _middlewareplugin = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/middleware-plugin.js [app-rsc] (ecmascript)"));
const _buildmanifestplugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/build-manifest-plugin.js [app-rsc] (ecmascript)"));
const _jsconfigpathsplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/jsconfig-paths-plugin.js [app-rsc] (ecmascript)");
const _nextdropclientpageplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/next-drop-client-page-plugin.js [app-rsc] (ecmascript)");
const _pagesmanifestplugin = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.js [app-rsc] (ecmascript)"));
const _profilingplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/profiling-plugin.js [app-rsc] (ecmascript)");
const _reactloadableplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/react-loadable-plugin.js [app-rsc] (ecmascript)");
const _wellknownerrorsplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/wellknown-errors-plugin/index.js [app-rsc] (ecmascript)");
const _css = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/config/blocks/css/index.js [app-rsc] (ecmascript)");
const _copyfileplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/copy-file-plugin.js [app-rsc] (ecmascript)");
const _flightmanifestplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.js [app-rsc] (ecmascript)");
const _flightcliententryplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/flight-client-entry-plugin.js [app-rsc] (ecmascript)");
const _nexttypesplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/next-types-plugin/index.js [app-rsc] (ecmascript)");
const _loadjsconfig = /*#__PURE__*/ _interop_require_default(__turbopack_require__("[project]/node_modules/next/dist/build/load-jsconfig.js [app-rsc] (ecmascript)"));
const _swc = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)");
const _appbuildmanifestplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/app-build-manifest-plugin.js [app-rsc] (ecmascript)");
const _subresourceintegrityplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.js [app-rsc] (ecmascript)");
const _nextfontmanifestplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.js [app-rsc] (ecmascript)");
const _memorywithgccacheplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/memory-with-gc-cache-plugin.js [app-rsc] (ecmascript)");
const _getbabelconfigfile = __turbopack_require__("[project]/node_modules/next/dist/build/get-babel-config-file.js [app-rsc] (ecmascript)");
const _needsexperimentalreact = __turbopack_require__("[project]/node_modules/next/dist/lib/needs-experimental-react.js [app-rsc] (ecmascript)");
const _defineenvplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/define-env-plugin.js [app-rsc] (ecmascript)");
const _handleexternals = __turbopack_require__("[project]/node_modules/next/dist/build/handle-externals.js [app-rsc] (ecmascript)");
const _resolve = __turbopack_require__("[project]/node_modules/next/dist/build/webpack-config-rules/resolve.js [app-rsc] (ecmascript)");
const _optionalpeerdependencyresolveplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/optional-peer-dependency-resolve-plugin.js [app-rsc] (ecmascript)");
const _createcompileraliases = __turbopack_require__("[project]/node_modules/next/dist/build/create-compiler-aliases.js [app-rsc] (ecmascript)");
const _utils2 = __turbopack_require__("[project]/node_modules/next/dist/export/utils.js [app-rsc] (ecmascript)");
const _csschunkingplugin = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/css-chunking-plugin.js [app-rsc] (ecmascript)");
const _getbabelloaderconfig = __turbopack_require__("[project]/node_modules/next/dist/build/get-babel-loader-config.js [app-rsc] (ecmascript)");
const _nextdirpaths = __turbopack_require__("[project]/node_modules/next/dist/build/next-dir-paths.js [app-rsc] (ecmascript)");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const EXTERNAL_PACKAGES = __turbopack_require__("[project]/node_modules/next/dist/lib/server-external-packages.json (json)");
const DEFAULT_TRANSPILED_PACKAGES = __turbopack_require__("[project]/node_modules/next/dist/lib/default-transpiled-packages.json (json)");
if (parseInt(_react.default.version) < 18) {
    throw new Error('Next.js requires react >= 18.2.0 to be installed.');
}
const babelIncludeRegexes = [
    /next[\\/]dist[\\/](esm[\\/])?shared[\\/]lib/,
    /next[\\/]dist[\\/](esm[\\/])?client/,
    /next[\\/]dist[\\/](esm[\\/])?pages/,
    /[\\/](strip-ansi|ansi-regex|styled-jsx)[\\/]/
];
const browserNonTranspileModules = [
    // Transpiling `process/browser` will trigger babel compilation error due to value replacement.
    // TypeError: Property left of AssignmentExpression expected node to be of a type ["LVal"] but instead got "BooleanLiteral"
    // e.g. `process.browser = true` will become `true = true`.
    /[\\/]node_modules[\\/]process[\\/]browser/,
    // Exclude precompiled react packages from browser compilation due to SWC helper insertion (#61791),
    // We fixed the issue but it's safer to exclude them from compilation since they don't need to be re-compiled.
    /[\\/]next[\\/]dist[\\/]compiled[\\/](react|react-dom|react-server-dom-webpack)(-experimental)?($|[\\/])/
];
const precompileRegex = /[\\/]next[\\/]dist[\\/]compiled[\\/]/;
const asyncStoragesRegex = /next[\\/]dist[\\/](esm[\\/])?server[\\/]app-render[\\/](work-async-storage|action-async-storage|work-unit-async-storage)/;
// Support for NODE_PATH
const nodePathList = (process.env.NODE_PATH || '').split(("TURBOPACK compile-time truthy", 1) ? ';' : ("TURBOPACK unreachable", undefined)).filter((p)=>!!p);
const baseWatchOptions = Object.freeze({
    aggregateTimeout: 5,
    ignored: /^((?:[^/]*(?:\/|$))*)(\.(git|next)|node_modules)(\/((?:[^/]*(?:\/|$))*)(?:$|\/))?/
});
function isModuleCSS(module1) {
    return module1.type === `css/mini-extract` || // extract-css-chunks-webpack-plugin (old)
    module1.type === `css/extract-chunks` || // extract-css-chunks-webpack-plugin (new)
    module1.type === `css/extract-css-chunks`;
}
const devtoolRevertWarning = (0, _utils1.execOnce)((devtool)=>{
    console.warn((0, _picocolors.yellow)((0, _picocolors.bold)('Warning: ')) + (0, _picocolors.bold)(`Reverting webpack devtool to '${devtool}'.\n`) + 'Changing the webpack devtool in development mode will cause severe performance regressions.\n' + 'Read more: https://nextjs.org/docs/messages/improper-devtool');
});
let loggedSwcDisabled = false;
let loggedIgnoredCompilerOptions = false;
const reactRefreshLoaderName = 'next/dist/compiled/@next/react-refresh-utils/dist/loader';
function attachReactRefresh(webpackConfig, targetLoader) {
    var _webpackConfig_module_rules, _webpackConfig_module;
    const reactRefreshLoader = "[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/loader.js [app-rsc] (ecmascript)";
    (_webpackConfig_module = webpackConfig.module) == null ? void 0 : (_webpackConfig_module_rules = _webpackConfig_module.rules) == null ? void 0 : _webpackConfig_module_rules.forEach((rule)=>{
        if (rule && typeof rule === 'object' && 'use' in rule) {
            const curr = rule.use;
            // When the user has configured `defaultLoaders.babel` for a input file:
            if (curr === targetLoader) {
                rule.use = [
                    reactRefreshLoader,
                    curr
                ];
            } else if (Array.isArray(curr) && curr.some((r)=>r === targetLoader) && // Check if loader already exists:
            !curr.some((r)=>r === reactRefreshLoader || r === reactRefreshLoaderName)) {
                const idx = curr.findIndex((r)=>r === targetLoader);
                // Clone to not mutate user input
                rule.use = [
                    ...curr
                ];
                // inject / input: [other, babel] output: [other, refresh, babel]:
                rule.use.splice(idx, 0, reactRefreshLoader);
            }
        }
    });
}
const NODE_RESOLVE_OPTIONS = {
    dependencyType: 'commonjs',
    modules: [
        'node_modules'
    ],
    fallback: false,
    exportsFields: [
        'exports'
    ],
    importsFields: [
        'imports'
    ],
    conditionNames: [
        'node',
        'require'
    ],
    descriptionFiles: [
        'package.json'
    ],
    extensions: [
        '.js',
        '.json',
        '.node'
    ],
    enforceExtensions: false,
    symlinks: true,
    mainFields: [
        'main'
    ],
    mainFiles: [
        'index'
    ],
    roots: [],
    fullySpecified: false,
    preferRelative: false,
    preferAbsolute: false,
    restrictions: []
};
const NODE_BASE_RESOLVE_OPTIONS = {
    ...NODE_RESOLVE_OPTIONS,
    alias: false
};
const NODE_ESM_RESOLVE_OPTIONS = {
    ...NODE_RESOLVE_OPTIONS,
    alias: false,
    dependencyType: 'esm',
    conditionNames: [
        'node',
        'import'
    ],
    fullySpecified: true
};
const NODE_BASE_ESM_RESOLVE_OPTIONS = {
    ...NODE_ESM_RESOLVE_OPTIONS,
    alias: false
};
const nextImageLoaderRegex = /\.(png|jpg|jpeg|gif|webp|avif|ico|bmp|svg)$/i;
async function loadProjectInfo({ dir, config, dev }) {
    const { jsConfig, resolvedBaseUrl } = await (0, _loadjsconfig.default)(dir, config);
    const supportedBrowsers = await (0, _utils.getSupportedBrowsers)(dir, dev);
    return {
        jsConfig,
        resolvedBaseUrl,
        supportedBrowsers
    };
}
function hasExternalOtelApiPackage() {
    try {
        __turbopack_require__("[externals]/next/dist/compiled/@opentelemetry/api [external] (next/dist/compiled/@opentelemetry/api, cjs)");
        return true;
    } catch  {
        return false;
    }
}
const UNSAFE_CACHE_REGEX = /[\\/]pages[\\/][^\\/]+(?:$|\?|#)/;
async function getBaseWebpackConfig(dir, { buildId, encryptionKey, config, compilerType, dev = false, entrypoints, isDevFallback = false, pagesDir, reactProductionProfiling = false, rewrites, originalRewrites, originalRedirects, runWebpackSpan, appDir, middlewareMatchers, jsConfig, resolvedBaseUrl, supportedBrowsers, clientRouterFilters, fetchCacheKeyPrefix, edgePreviewProps }) {
    var _config_experimental, _config_experimental1, _config_watchOptions, _config_experimental_sri, _config_experimental_sri1, _config_compiler, _config_compiler1, _config_compiler2, _jsConfig_compilerOptions, _config_compiler3, _jsConfig_compilerOptions1, _config_compiler4, _jsConfig_compilerOptions2, // if the config is added/removed
    _webpackConfig_resolve_plugins, _webpackConfig_resolve, _config_experimental2, _config_compiler5, _config_compiler6, _config_compiler7, _config_compiler8, _config_compiler9, _webpack5Config_plugins, _webpackConfig_module, _webpackConfig_module1, _webpackConfig_module_rules, _webpackConfig_module2;
    const isClient = compilerType === _constants1.COMPILER_NAMES.client;
    const isEdgeServer = compilerType === _constants1.COMPILER_NAMES.edgeServer;
    const isNodeServer = compilerType === _constants1.COMPILER_NAMES.server;
    // If the current compilation is aimed at server-side code instead of client-side code.
    const isNodeOrEdgeCompilation = isNodeServer || isEdgeServer;
    const hasRewrites = rewrites.beforeFiles.length > 0 || rewrites.afterFiles.length > 0 || rewrites.fallback.length > 0;
    const hasAppDir = !!appDir;
    const disableOptimizedLoading = true;
    const enableTypedRoutes = !!config.experimental.typedRoutes && hasAppDir;
    const bundledReactChannel = (0, _needsexperimentalreact.needsExperimentalReact)(config) ? '-experimental' : '';
    const babelConfigFile = (0, _getbabelconfigfile.getBabelConfigFile)(dir);
    if (!dev && (0, _utils2.hasCustomExportOutput)(config)) {
        config.distDir = '.next';
    }
    const distDir = _path.default.join(dir, config.distDir);
    let useSWCLoader = !babelConfigFile || config.experimental.forceSwcTransforms;
    let SWCBinaryTarget = undefined;
    if (useSWCLoader) {
        var _require_getBinaryMetadata, _require_getBinaryMetadata1, _require;
        // TODO: we do not collect wasm target yet
        const binaryTarget = (_require = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)")) == null ? void 0 : (_require_getBinaryMetadata1 = _require.getBinaryMetadata) == null ? void 0 : (_require_getBinaryMetadata = _require_getBinaryMetadata1.call(_require)) == null ? void 0 : _require_getBinaryMetadata.target;
        SWCBinaryTarget = binaryTarget ? [
            `swc/target/${binaryTarget}`,
            true
        ] : undefined;
    }
    if (!loggedSwcDisabled && !useSWCLoader && babelConfigFile) {
        _log.info(`Disabled SWC as replacement for Babel because of custom Babel configuration "${_path.default.relative(dir, babelConfigFile)}" https://nextjs.org/docs/messages/swc-disabled`);
        loggedSwcDisabled = true;
    }
    // eagerly load swc bindings instead of waiting for transform calls
    if (!babelConfigFile && isClient) {
        await (0, _swc.loadBindings)(config.experimental.useWasmBinary);
    }
    // since `pages` doesn't always bundle by default we need to
    // auto-include optimizePackageImports in transpilePackages
    const finalTranspilePackages = (config.transpilePackages || []).concat(DEFAULT_TRANSPILED_PACKAGES);
    for (const pkg of config.experimental.optimizePackageImports || []){
        if (!finalTranspilePackages.includes(pkg)) {
            finalTranspilePackages.push(pkg);
        }
    }
    if (!loggedIgnoredCompilerOptions && !useSWCLoader && config.compiler) {
        _log.info('`compiler` options in `next.config.js` will be ignored while using Babel https://nextjs.org/docs/messages/ignored-compiler-options');
        loggedIgnoredCompilerOptions = true;
    }
    const shouldIncludeExternalDirs = config.experimental.externalDir || !!config.transpilePackages;
    const codeCondition = {
        test: {
            or: [
                /\.(tsx|ts|js|cjs|mjs|jsx)$/,
                /__barrel_optimize__/
            ]
        },
        ...shouldIncludeExternalDirs ? {} : {
            include: [
                dir,
                ...babelIncludeRegexes
            ]
        },
        exclude: (excludePath)=>{
            if (babelIncludeRegexes.some((r)=>r.test(excludePath))) {
                return false;
            }
            const shouldBeBundled = (0, _handleexternals.isResourceInPackages)(excludePath, finalTranspilePackages);
            if (shouldBeBundled) return false;
            return excludePath.includes('node_modules');
        }
    };
    const babelLoader = (0, _getbabelloaderconfig.getBabelLoader)(useSWCLoader, babelConfigFile, isNodeOrEdgeCompilation, distDir, pagesDir, dir, appDir || pagesDir, dev, isClient, (_config_experimental = config.experimental) == null ? void 0 : _config_experimental.reactCompiler, codeCondition.exclude);
    const reactCompilerLoader = babelLoader ? undefined : (0, _getbabelloaderconfig.getReactCompilerLoader)((_config_experimental1 = config.experimental) == null ? void 0 : _config_experimental1.reactCompiler, dir, dev, isNodeOrEdgeCompilation, codeCondition.exclude);
    let swcTraceProfilingInitialized = false;
    const getSwcLoader = (extraOptions)=>{
        var _config_experimental;
        if ((config == null ? void 0 : (_config_experimental = config.experimental) == null ? void 0 : _config_experimental.swcTraceProfiling) && !swcTraceProfilingInitialized) {
            var _require_initCustomTraceSubscriber, _require;
            // This will init subscribers once only in a single process lifecycle,
            // even though it can be called multiple times.
            // Subscriber need to be initialized _before_ any actual swc's call (transform, etcs)
            // to collect correct trace spans when they are called.
            swcTraceProfilingInitialized = true;
            (_require = __turbopack_require__("[project]/node_modules/next/dist/build/swc/index.js [app-rsc] (ecmascript)")) == null ? void 0 : (_require_initCustomTraceSubscriber = _require.initCustomTraceSubscriber) == null ? void 0 : _require_initCustomTraceSubscriber.call(_require, _path.default.join(distDir, `swc-trace-profile-${Date.now()}.json`));
        }
        return {
            loader: 'next-swc-loader',
            options: {
                isServer: isNodeOrEdgeCompilation,
                rootDir: dir,
                pagesDir,
                appDir,
                hasReactRefresh: dev && isClient,
                nextConfig: config,
                jsConfig,
                transpilePackages: finalTranspilePackages,
                supportedBrowsers,
                swcCacheDir: _path.default.join(dir, (config == null ? void 0 : config.distDir) ?? '.next', 'cache', 'swc'),
                serverReferenceHashSalt: encryptionKey,
                ...extraOptions
            }
        };
    };
    // RSC loaders, prefer ESM, set `esm` to true
    const swcServerLayerLoader = getSwcLoader({
        serverComponents: true,
        bundleLayer: _constants.WEBPACK_LAYERS.reactServerComponents,
        esm: true
    });
    const swcSSRLayerLoader = getSwcLoader({
        serverComponents: true,
        bundleLayer: _constants.WEBPACK_LAYERS.serverSideRendering,
        esm: true
    });
    const swcBrowserLayerLoader = getSwcLoader({
        serverComponents: true,
        bundleLayer: _constants.WEBPACK_LAYERS.appPagesBrowser,
        esm: true
    });
    // Default swc loaders for pages doesn't prefer ESM.
    const swcDefaultLoader = getSwcLoader({
        serverComponents: true,
        esm: false
    });
    const defaultLoaders = {
        babel: useSWCLoader ? swcDefaultLoader : babelLoader
    };
    const appServerLayerLoaders = hasAppDir ? [
        // When using Babel, we will have to add the SWC loader
        // as an additional pass to handle RSC correctly.
        // This will cause some performance overhead but
        // acceptable as Babel will not be recommended.
        swcServerLayerLoader,
        babelLoader,
        reactCompilerLoader
    ].filter(Boolean) : [];
    const instrumentLayerLoaders = [
        'next-flight-loader',
        // When using Babel, we will have to add the SWC loader
        // as an additional pass to handle RSC correctly.
        // This will cause some performance overhead but
        // acceptable as Babel will not be recommended.
        swcServerLayerLoader,
        babelLoader
    ].filter(Boolean);
    const middlewareLayerLoaders = [
        'next-flight-loader',
        // When using Babel, we will have to use SWC to do the optimization
        // for middleware to tree shake the unused default optimized imports like "next/server".
        // This will cause some performance overhead but
        // acceptable as Babel will not be recommended.
        getSwcLoader({
            serverComponents: true,
            bundleLayer: _constants.WEBPACK_LAYERS.middleware
        }),
        babelLoader
    ].filter(Boolean);
    const reactRefreshLoaders = dev && isClient ? [
        "[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/loader.js [app-rsc] (ecmascript)"
    ] : [];
    // client components layers: SSR or browser
    const createClientLayerLoader = ({ isBrowserLayer, reactRefresh })=>[
            ...reactRefresh ? reactRefreshLoaders : [],
            {
                // This loader handles actions and client entries
                // in the client layer.
                loader: 'next-flight-client-module-loader'
            },
            ...hasAppDir ? [
                // When using Babel, we will have to add the SWC loader
                // as an additional pass to handle RSC correctly.
                // This will cause some performance overhead but
                // acceptable as Babel will not be recommended.
                isBrowserLayer ? swcBrowserLayerLoader : swcSSRLayerLoader,
                babelLoader,
                reactCompilerLoader
            ].filter(Boolean) : []
        ];
    const appBrowserLayerLoaders = createClientLayerLoader({
        isBrowserLayer: true,
        // reactRefresh for browser layer is applied conditionally to user-land source
        reactRefresh: false
    });
    const appSSRLayerLoaders = createClientLayerLoader({
        isBrowserLayer: false,
        reactRefresh: true
    });
    // Loader for API routes needs to be differently configured as it shouldn't
    // have RSC transpiler enabled, so syntax checks such as invalid imports won't
    // be performed.
    const apiRoutesLayerLoaders = useSWCLoader ? getSwcLoader({
        serverComponents: false,
        bundleLayer: _constants.WEBPACK_LAYERS.api
    }) : defaultLoaders.babel;
    const pageExtensions = config.pageExtensions;
    const outputPath = isNodeOrEdgeCompilation ? _path.default.join(distDir, _constants1.SERVER_DIRECTORY) : distDir;
    const reactServerCondition = [
        'react-server',
        ...isEdgeServer ? _resolve.edgeConditionNames : [],
        // inherits the default conditions
        '...'
    ];
    const clientEntries = isClient ? {
        // Backwards compatibility
        'main.js': [],
        ...dev ? {
            [_constants1.CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH]: "[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/runtime.js [app-rsc] (ecmascript)",
            [_constants1.CLIENT_STATIC_FILES_RUNTIME_AMP]: `./` + _path.default.relative(dir, _path.default.join(_nextdirpaths.NEXT_PROJECT_ROOT_DIST_CLIENT, 'dev', 'amp-dev')).replace(/\\/g, '/')
        } : {},
        [_constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN]: `./` + _path.default.relative(dir, _path.default.join(_nextdirpaths.NEXT_PROJECT_ROOT_DIST_CLIENT, dev ? `next-dev.js` : 'next.js')).replace(/\\/g, '/'),
        ...hasAppDir ? {
            [_constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP]: dev ? [
                "[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/runtime.js [app-rsc] (ecmascript)",
                `./` + _path.default.relative(dir, _path.default.join(_nextdirpaths.NEXT_PROJECT_ROOT_DIST_CLIENT, 'app-next-dev.js')).replace(/\\/g, '/')
            ] : [
                `./` + _path.default.relative(dir, _path.default.join(_nextdirpaths.NEXT_PROJECT_ROOT_DIST_CLIENT, 'app-next.js')).replace(/\\/g, '/')
            ]
        } : {}
    } : undefined;
    const resolveConfig = {
        // Disable .mjs for node_modules bundling
        extensions: [
            '.js',
            '.mjs',
            '.tsx',
            '.ts',
            '.jsx',
            '.json',
            '.wasm'
        ],
        extensionAlias: config.experimental.extensionAlias,
        modules: [
            'node_modules',
            ...nodePathList
        ],
        alias: (0, _createcompileraliases.createWebpackAliases)({
            distDir,
            isClient,
            isEdgeServer,
            isNodeServer,
            dev,
            config,
            pagesDir,
            appDir,
            dir,
            reactProductionProfiling,
            hasRewrites
        }),
        ...isClient ? {
            fallback: {
                process: "[project]/node_modules/next/dist/build/polyfills/process.js [app-rsc] (ecmascript)"
            }
        } : undefined,
        // default main fields use pages dir ones, and customize app router ones in loaders.
        mainFields: (0, _resolve.getMainField)(compilerType, false),
        ...isEdgeServer && {
            conditionNames: _resolve.edgeConditionNames
        },
        plugins: [
            isNodeServer ? new _optionalpeerdependencyresolveplugin.OptionalPeerDependencyResolverPlugin() : undefined
        ].filter(Boolean)
    };
    // Packages which will be split into the 'framework' chunk.
    // Only top-level packages are included, e.g. nested copies like
    // 'node_modules/meow/node_modules/object-assign' are not included.
    const nextFrameworkPaths = [];
    const topLevelFrameworkPaths = [];
    const visitedFrameworkPackages = new Set();
    // Adds package-paths of dependencies recursively
    const addPackagePath = (packageName, relativeToPath, paths)=>{
        try {
            if (visitedFrameworkPackages.has(packageName)) {
                return;
            }
            visitedFrameworkPackages.add(packageName);
            const packageJsonPath = (()=>{
                const e = new Error("Cannot find module 'unknown'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })();
            // Include a trailing slash so that a `.startsWith(packagePath)` check avoids false positives
            // when one package name starts with the full name of a different package.
            // For example:
            //   "node_modules/react-slider".startsWith("node_modules/react")  // true
            //   "node_modules/react-slider".startsWith("node_modules/react/") // false
            const directory = _path.default.join(packageJsonPath, '../');
            // Returning from the function in case the directory has already been added and traversed
            if (paths.includes(directory)) return;
            paths.push(directory);
            const dependencies = (()=>{
                const e = new Error("Cannot find module as expression is too dynamic");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })().dependencies || {};
            for (const name of Object.keys(dependencies)){
                addPackagePath(name, directory, paths);
            }
        } catch (_) {
        // don't error on failing to resolve framework packages
        }
    };
    for (const packageName of [
        'react',
        'react-dom',
        ...hasAppDir ? [
            `next/dist/compiled/react${bundledReactChannel}`,
            `next/dist/compiled/react-dom${bundledReactChannel}`
        ] : []
    ]){
        addPackagePath(packageName, dir, topLevelFrameworkPaths);
    }
    addPackagePath('next', dir, nextFrameworkPaths);
    const crossOrigin = config.crossOrigin;
    // The `serverExternalPackages` should not conflict with
    // the `transpilePackages`.
    if (config.serverExternalPackages && finalTranspilePackages) {
        const externalPackageConflicts = finalTranspilePackages.filter((pkg)=>{
            var _config_serverExternalPackages;
            return (_config_serverExternalPackages = config.serverExternalPackages) == null ? void 0 : _config_serverExternalPackages.includes(pkg);
        });
        if (externalPackageConflicts.length > 0) {
            throw new Error(`The packages specified in the 'transpilePackages' conflict with the 'serverExternalPackages': ${externalPackageConflicts.join(', ')}`);
        }
    }
    // For original request, such as `package name`
    const optOutBundlingPackages = EXTERNAL_PACKAGES.concat(...config.serverExternalPackages || []).filter((pkg)=>!(finalTranspilePackages == null ? void 0 : finalTranspilePackages.includes(pkg)));
    // For resolved request, such as `absolute path/package name/foo/bar.js`
    const optOutBundlingPackageRegex = new RegExp(`[/\\\\]node_modules[/\\\\](${optOutBundlingPackages.map((p)=>p.replace(/\//g, '[/\\\\]')).join('|')})[/\\\\]`);
    const transpilePackagesRegex = new RegExp(`[/\\\\]node_modules[/\\\\](${finalTranspilePackages == null ? void 0 : finalTranspilePackages.map((p)=>p.replace(/\//g, '[/\\\\]')).join('|')})[/\\\\]`);
    const handleExternals = (0, _handleexternals.makeExternalHandler)({
        config,
        optOutBundlingPackages,
        optOutBundlingPackageRegex,
        transpiledPackages: finalTranspilePackages,
        dir
    });
    const pageExtensionsRegex = new RegExp(`\\.(${pageExtensions.join('|')})$`);
    const aliasCodeConditionTest = [
        codeCondition.test,
        pageExtensionsRegex
    ];
    const builtinModules = __turbopack_require__("[externals]/module [external] (module, cjs)").builtinModules;
    let webpackConfig = {
        parallelism: Number(process.env.NEXT_WEBPACK_PARALLELISM) || undefined,
        ...isNodeServer ? {
            externalsPresets: {
                node: true
            }
        } : {},
        // @ts-ignore
        externals: isClient || isEdgeServer ? // TODO: should we warn/error for this instead?
        [
            'next',
            ...isEdgeServer ? [
                {
                    '@builder.io/partytown': '{}',
                    'next/dist/compiled/etag': '{}'
                },
                (0, _middlewareplugin.getEdgePolyfilledModules)(),
                _middlewareplugin.handleWebpackExternalForEdgeRuntime
            ] : []
        ] : [
            ...builtinModules,
            ({ context, request, dependencyType, contextInfo, getResolve })=>handleExternals(context, request, dependencyType, contextInfo.issuerLayer, (options)=>{
                    const resolveFunction = getResolve(options);
                    return (resolveContext, requestToResolve)=>new Promise((resolve, reject)=>{
                            resolveFunction(resolveContext, requestToResolve, (err, result, resolveData)=>{
                                var _resolveData_descriptionFileData;
                                if (err) return reject(err);
                                if (!result) return resolve([
                                    null,
                                    false
                                ]);
                                const isEsm = /\.js$/i.test(result) ? (resolveData == null ? void 0 : (_resolveData_descriptionFileData = resolveData.descriptionFileData) == null ? void 0 : _resolveData_descriptionFileData.type) === 'module' : /\.mjs$/i.test(result);
                                resolve([
                                    result,
                                    isEsm
                                ]);
                            });
                        });
                })
        ],
        optimization: {
            emitOnErrors: !dev,
            checkWasmTypes: false,
            nodeEnv: false,
            splitChunks: (()=>{
                // server chunking
                if (dev) {
                    if (isNodeServer) {
                        /*
              In development, we want to split code that comes from `node_modules` into their own chunks.
              This is because in development, we often need to reload the user bundle due to changes in the code.
              To work around this, we put all the vendor code into separate chunks so that we don't need to reload them.
              This is safe because the vendor code doesn't change between reloads.
            */ const extractRootNodeModule = (modulePath)=>{
                            // This regex is used to extract the root node module name to be used as the chunk group name.
                            // example: ../../node_modules/.pnpm/next@10/foo/node_modules/bar -> next@10
                            const regex = /node_modules(?:\/|\\)\.?(?:pnpm(?:\/|\\))?([^/\\]+)/;
                            const match = modulePath.match(regex);
                            return match ? match[1] : null;
                        };
                        return {
                            cacheGroups: {
                                // this chunk configuration gives us a separate chunk for each top level module in node_modules
                                // or a hashed chunk if we can't extract the module name.
                                vendor: {
                                    chunks: 'all',
                                    reuseExistingChunk: true,
                                    test: /[\\/]node_modules[\\/]/,
                                    minSize: 0,
                                    minChunks: 1,
                                    maxAsyncRequests: 300,
                                    maxInitialRequests: 300,
                                    name: (module1)=>{
                                        const moduleId = module1.nameForCondition();
                                        const rootModule = extractRootNodeModule(moduleId);
                                        if (rootModule) {
                                            return `vendor-chunks/${rootModule}`;
                                        } else {
                                            const hash = _crypto.default.createHash('sha1').update(moduleId);
                                            hash.update(moduleId);
                                            return `vendor-chunks/${hash.digest('hex')}`;
                                        }
                                    }
                                },
                                // disable the default chunk groups
                                default: false,
                                defaultVendors: false
                            }
                        };
                    }
                    return false;
                }
                if (isNodeServer || isEdgeServer) {
                    return {
                        filename: `${isEdgeServer ? `edge-chunks/` : ''}[name].js`,
                        chunks: 'all',
                        minChunks: 2
                    };
                }
                const frameworkCacheGroup = {
                    chunks: 'all',
                    name: 'framework',
                    // Ensures the framework chunk is not created for App Router.
                    layer: _utils.isWebpackDefaultLayer,
                    test (module1) {
                        const resource = module1.nameForCondition == null ? void 0 : module1.nameForCondition.call(module1);
                        return resource ? topLevelFrameworkPaths.some((pkgPath)=>resource.startsWith(pkgPath)) : false;
                    },
                    priority: 40,
                    // Don't let webpack eliminate this chunk (prevents this chunk from
                    // becoming a part of the commons chunk)
                    enforce: true
                };
                const libCacheGroup = {
                    test (module1) {
                        var _module_type;
                        return !((_module_type = module1.type) == null ? void 0 : _module_type.startsWith('css')) && module1.size() > 160000 && /node_modules[/\\]/.test(module1.nameForCondition() || '');
                    },
                    name (module1) {
                        const hash = _crypto.default.createHash('sha1');
                        if (isModuleCSS(module1)) {
                            module1.updateHash(hash);
                        } else {
                            if (!module1.libIdent) {
                                throw new Error(`Encountered unknown module type: ${module1.type}. Please open an issue.`);
                            }
                            hash.update(module1.libIdent({
                                context: dir
                            }));
                        }
                        // Ensures the name of the chunk is not the same between two modules in different layers
                        // E.g. if you import 'button-library' in App Router and Pages Router we don't want these to be bundled in the same chunk
                        // as they're never used on the same page.
                        if (module1.layer) {
                            hash.update(module1.layer);
                        }
                        return hash.digest('hex').substring(0, 8);
                    },
                    priority: 30,
                    minChunks: 1,
                    reuseExistingChunk: true
                };
                // client chunking
                return {
                    // Keep main and _app chunks unsplitted in webpack 5
                    // as we don't need a separate vendor chunk from that
                    // and all other chunk depend on them so there is no
                    // duplication that need to be pulled out.
                    chunks: (chunk)=>!/^(polyfills|main|pages\/_app)$/.test(chunk.name),
                    cacheGroups: {
                        framework: frameworkCacheGroup,
                        lib: libCacheGroup
                    },
                    maxInitialRequests: 25,
                    minSize: 20000
                };
            })(),
            runtimeChunk: isClient ? {
                name: _constants1.CLIENT_STATIC_FILES_RUNTIME_WEBPACK
            } : undefined,
            minimize: !dev && (isClient || isEdgeServer || isNodeServer && config.experimental.serverMinification),
            minimizer: [
                // Minify JavaScript
                (compiler)=>{
                    // @ts-ignore No typings yet
                    const { MinifyPlugin } = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/minify-webpack-plugin/src/index.js [app-rsc] (ecmascript)");
                    new MinifyPlugin().apply(compiler);
                },
                // Minify CSS
                (compiler)=>{
                    const { CssMinimizerPlugin } = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/css-minimizer-plugin.js [app-rsc] (ecmascript)");
                    new CssMinimizerPlugin({
                        postcssOptions: {
                            map: {
                                // `inline: false` generates the source map in a separate file.
                                // Otherwise, the CSS file is needlessly large.
                                inline: false,
                                // `annotation: false` skips appending the `sourceMappingURL`
                                // to the end of the CSS file. Webpack already handles this.
                                annotation: false
                            }
                        }
                    }).apply(compiler);
                }
            ]
        },
        context: dir,
        // Kept as function to be backwards compatible
        entry: async ()=>{
            return {
                ...clientEntries ? clientEntries : {},
                ...entrypoints
            };
        },
        watchOptions: Object.freeze({
            ...baseWatchOptions,
            poll: (_config_watchOptions = config.watchOptions) == null ? void 0 : _config_watchOptions.pollIntervalMs
        }),
        output: {
            // we must set publicPath to an empty value to override the default of
            // auto which doesn't work in IE11
            publicPath: `${config.assetPrefix ? config.assetPrefix.endsWith('/') ? config.assetPrefix.slice(0, -1) : config.assetPrefix : ''}/_next/`,
            path: !dev && isNodeServer ? _path.default.join(outputPath, 'chunks') : outputPath,
            // On the server we don't use hashes
            filename: isNodeOrEdgeCompilation ? dev || isEdgeServer ? `[name].js` : `../[name].js` : `static/chunks/${isDevFallback ? 'fallback/' : ''}[name]${dev ? '' : appDir ? '-[chunkhash]' : '-[contenthash]'}.js`,
            library: isClient || isEdgeServer ? '_N_E' : undefined,
            libraryTarget: isClient || isEdgeServer ? 'assign' : 'commonjs2',
            hotUpdateChunkFilename: 'static/webpack/[id].[fullhash].hot-update.js',
            hotUpdateMainFilename: 'static/webpack/[fullhash].[runtime].hot-update.json',
            // This saves chunks with the name given via `import()`
            chunkFilename: isNodeOrEdgeCompilation ? '[name].js' : `static/chunks/${isDevFallback ? 'fallback/' : ''}${dev ? '[name]' : '[name].[contenthash]'}.js`,
            strictModuleExceptionHandling: true,
            crossOriginLoading: crossOrigin,
            // if `sources[number]` is not an absolute path, it's is resolved
            // relative to the location of the source map file (https://tc39.es/source-map/#resolving-sources).
            // However, Webpack's `resource-path` is relative to the app dir.
            // TODO: Either `sourceRoot` should be populated with the root and then we can use `[resource-path]`
            // or we need a way to resolve return `path.relative(sourceMapLocation, info.resourcePath)`
            devtoolModuleFilenameTemplate: dev ? '[absolute-resource-path]' : undefined,
            webassemblyModuleFilename: 'static/wasm/[modulehash].wasm',
            hashFunction: 'xxhash64',
            hashDigestLength: 16
        },
        performance: false,
        resolve: resolveConfig,
        resolveLoader: {
            // The loaders Next.js provides
            alias: [
                'error-loader',
                'next-swc-loader',
                'next-client-pages-loader',
                'next-image-loader',
                'next-metadata-image-loader',
                'next-style-loader',
                'next-flight-loader',
                'next-flight-client-entry-loader',
                'next-flight-action-entry-loader',
                'next-flight-client-module-loader',
                'next-flight-server-reference-proxy-loader',
                'empty-loader',
                'next-middleware-loader',
                'next-edge-function-loader',
                'next-edge-app-route-loader',
                'next-edge-ssr-loader',
                'next-middleware-asset-loader',
                'next-middleware-wasm-loader',
                'next-app-loader',
                'next-route-loader',
                'next-font-loader',
                'next-invalid-import-error-loader',
                'next-metadata-route-loader',
                'modularize-import-loader',
                'next-barrel-loader',
                'next-error-browser-binary-loader'
            ].reduce((alias, loader)=>{
                // using multiple aliases to replace `resolveLoader.modules`
                alias[loader] = _path.default.join(__dirname, 'webpack', 'loaders', loader);
                return alias;
            }, {}),
            modules: [
                'node_modules',
                ...nodePathList
            ],
            plugins: []
        },
        module: {
            rules: [
                // Alias server-only and client-only to proper exports based on bundling layers
                {
                    issuerLayer: {
                        or: [
                            ..._constants.WEBPACK_LAYERS.GROUP.serverOnly,
                            ..._constants.WEBPACK_LAYERS.GROUP.neutralTarget
                        ]
                    },
                    resolve: {
                        // Error on client-only but allow server-only
                        alias: (0, _createcompileraliases.createServerOnlyClientOnlyAliases)(true)
                    }
                },
                {
                    issuerLayer: {
                        not: [
                            ..._constants.WEBPACK_LAYERS.GROUP.serverOnly,
                            ..._constants.WEBPACK_LAYERS.GROUP.neutralTarget
                        ]
                    },
                    resolve: {
                        // Error on server-only but allow client-only
                        alias: (0, _createcompileraliases.createServerOnlyClientOnlyAliases)(false)
                    }
                },
                // Detect server-only / client-only imports and error in build time
                {
                    test: [
                        /^client-only$/,
                        /next[\\/]dist[\\/]compiled[\\/]client-only[\\/]error/
                    ],
                    loader: 'next-invalid-import-error-loader',
                    issuerLayer: {
                        or: _constants.WEBPACK_LAYERS.GROUP.serverOnly
                    },
                    options: {
                        message: "'client-only' cannot be imported from a Server Component module. It should only be used from a Client Component."
                    }
                },
                {
                    test: [
                        /^server-only$/,
                        /next[\\/]dist[\\/]compiled[\\/]server-only[\\/]index/
                    ],
                    loader: 'next-invalid-import-error-loader',
                    issuerLayer: {
                        not: [
                            ..._constants.WEBPACK_LAYERS.GROUP.serverOnly,
                            ..._constants.WEBPACK_LAYERS.GROUP.neutralTarget
                        ]
                    },
                    options: {
                        message: "'server-only' cannot be imported from a Client Component module. It should only be used from a Server Component."
                    }
                },
                // Potential the bundle introduced into middleware and api can be poisoned by client-only
                // but not being used, so we disabled the `client-only` erroring on these layers.
                // `server-only` is still available.
                {
                    test: [
                        /^client-only$/,
                        /next[\\/]dist[\\/]compiled[\\/]client-only[\\/]error/
                    ],
                    loader: 'empty-loader',
                    issuerLayer: {
                        or: _constants.WEBPACK_LAYERS.GROUP.neutralTarget
                    }
                },
                ...isNodeServer ? [] : [
                    {
                        test: /[\\/].*?\.node$/,
                        loader: 'next-error-browser-binary-loader'
                    }
                ],
                ...hasAppDir ? [
                    {
                        // Make sure that AsyncLocalStorage module instance is shared between server and client
                        // layers.
                        layer: _constants.WEBPACK_LAYERS.shared,
                        test: asyncStoragesRegex
                    },
                    // Convert metadata routes to separate layer
                    {
                        resourceQuery: new RegExp(_constants.WEBPACK_RESOURCE_QUERIES.metadataRoute),
                        layer: _constants.WEBPACK_LAYERS.reactServerComponents
                    },
                    {
                        // Ensure that the app page module is in the client layers, this
                        // enables React to work correctly for RSC.
                        layer: _constants.WEBPACK_LAYERS.serverSideRendering,
                        test: /next[\\/]dist[\\/](esm[\\/])?server[\\/]route-modules[\\/]app-page[\\/]module/
                    },
                    {
                        issuerLayer: _utils.isWebpackBundledLayer,
                        resolve: {
                            alias: (0, _createcompileraliases.createNextApiEsmAliases)()
                        }
                    },
                    {
                        issuerLayer: _utils.isWebpackServerOnlyLayer,
                        resolve: {
                            alias: (0, _createcompileraliases.createAppRouterApiAliases)(true)
                        }
                    },
                    {
                        issuerLayer: _utils.isWebpackClientOnlyLayer,
                        resolve: {
                            alias: (0, _createcompileraliases.createAppRouterApiAliases)(false)
                        }
                    }
                ] : [],
                ...hasAppDir && !isClient ? [
                    {
                        issuerLayer: _utils.isWebpackServerOnlyLayer,
                        test: {
                            // Resolve it if it is a source code file, and it has NOT been
                            // opted out of bundling.
                            and: [
                                aliasCodeConditionTest,
                                {
                                    not: [
                                        optOutBundlingPackageRegex,
                                        asyncStoragesRegex
                                    ]
                                }
                            ]
                        },
                        resolve: {
                            mainFields: (0, _resolve.getMainField)(compilerType, true),
                            conditionNames: reactServerCondition,
                            // If missing the alias override here, the default alias will be used which aliases
                            // react to the direct file path, not the package name. In that case the condition
                            // will be ignored completely.
                            alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                                // No server components profiling
                                reactProductionProfiling,
                                layer: _constants.WEBPACK_LAYERS.reactServerComponents,
                                isEdgeServer
                            })
                        },
                        use: 'next-flight-loader'
                    }
                ] : [],
                // TODO: FIXME: do NOT webpack 5 support with this
                // x-ref: https://github.com/webpack/webpack/issues/11467
                ...!config.experimental.fullySpecified ? [
                    {
                        test: /\.m?js/,
                        resolve: {
                            fullySpecified: false
                        }
                    }
                ] : [],
                ...hasAppDir && isEdgeServer ? [
                    // The Edge bundle includes the server in its entrypoint, so it has to
                    // be in the SSR layer — here we convert the actual page request to
                    // the RSC layer via a webpack rule.
                    {
                        resourceQuery: new RegExp(_constants.WEBPACK_RESOURCE_QUERIES.edgeSSREntry),
                        layer: _constants.WEBPACK_LAYERS.reactServerComponents
                    }
                ] : [],
                ...hasAppDir ? [
                    {
                        // Alias react-dom for ReactDOM.preload usage.
                        // Alias react for switching between default set and share subset.
                        oneOf: [
                            {
                                issuerLayer: _utils.isWebpackServerOnlyLayer,
                                test: {
                                    // Resolve it if it is a source code file, and it has NOT been
                                    // opted out of bundling.
                                    and: [
                                        aliasCodeConditionTest,
                                        {
                                            not: [
                                                optOutBundlingPackageRegex,
                                                asyncStoragesRegex
                                            ]
                                        }
                                    ]
                                },
                                resolve: {
                                    // It needs `conditionNames` here to require the proper asset,
                                    // when react is acting as dependency of compiled/react-dom.
                                    alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                                        reactProductionProfiling,
                                        layer: _constants.WEBPACK_LAYERS.reactServerComponents,
                                        isEdgeServer
                                    })
                                }
                            },
                            {
                                test: aliasCodeConditionTest,
                                issuerLayer: _constants.WEBPACK_LAYERS.serverSideRendering,
                                resolve: {
                                    alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                                        reactProductionProfiling,
                                        layer: _constants.WEBPACK_LAYERS.serverSideRendering,
                                        isEdgeServer
                                    })
                                }
                            }
                        ]
                    },
                    {
                        test: aliasCodeConditionTest,
                        issuerLayer: _constants.WEBPACK_LAYERS.appPagesBrowser,
                        resolve: {
                            alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                                reactProductionProfiling,
                                layer: _constants.WEBPACK_LAYERS.appPagesBrowser,
                                isEdgeServer
                            })
                        }
                    }
                ] : [],
                // Do not apply react-refresh-loader to node_modules for app router browser layer
                ...hasAppDir && dev && isClient ? [
                    {
                        test: codeCondition.test,
                        exclude: [
                            // exclude unchanged modules from react-refresh
                            codeCondition.exclude,
                            transpilePackagesRegex,
                            precompileRegex
                        ],
                        issuerLayer: _constants.WEBPACK_LAYERS.appPagesBrowser,
                        use: reactRefreshLoaders,
                        resolve: {
                            mainFields: (0, _resolve.getMainField)(compilerType, true)
                        }
                    }
                ] : [],
                {
                    oneOf: [
                        {
                            ...codeCondition,
                            issuerLayer: _constants.WEBPACK_LAYERS.api,
                            parser: {
                                // In Node.js, switch back to normal URL handling.
                                // In Edge runtime, we should disable parser.url handling in webpack so URLDependency is not added.
                                // Then there's browser code won't be injected into the edge runtime chunk.
                                // x-ref: https://github.com/webpack/webpack/blob/d9ce3b1f87e63c809d8a19bbd92257d65922e81f/lib/web/JsonpChunkLoadingRuntimeModule.js#L69
                                url: !isEdgeServer
                            },
                            use: apiRoutesLayerLoaders
                        },
                        {
                            test: codeCondition.test,
                            issuerLayer: _constants.WEBPACK_LAYERS.middleware,
                            use: middlewareLayerLoaders,
                            resolve: {
                                mainFields: (0, _resolve.getMainField)(compilerType, true),
                                conditionNames: reactServerCondition,
                                alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                                    reactProductionProfiling,
                                    layer: _constants.WEBPACK_LAYERS.middleware,
                                    isEdgeServer
                                })
                            }
                        },
                        {
                            test: codeCondition.test,
                            issuerLayer: _constants.WEBPACK_LAYERS.instrument,
                            use: instrumentLayerLoaders,
                            resolve: {
                                mainFields: (0, _resolve.getMainField)(compilerType, true),
                                conditionNames: reactServerCondition,
                                alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                                    reactProductionProfiling,
                                    layer: _constants.WEBPACK_LAYERS.instrument,
                                    isEdgeServer
                                })
                            }
                        },
                        ...hasAppDir ? [
                            {
                                test: codeCondition.test,
                                issuerLayer: _utils.isWebpackServerOnlyLayer,
                                exclude: asyncStoragesRegex,
                                use: appServerLayerLoaders
                            },
                            {
                                test: codeCondition.test,
                                resourceQuery: new RegExp(_constants.WEBPACK_RESOURCE_QUERIES.edgeSSREntry),
                                use: appServerLayerLoaders
                            },
                            {
                                test: codeCondition.test,
                                issuerLayer: _constants.WEBPACK_LAYERS.appPagesBrowser,
                                // Exclude the transpilation of the app layer due to compilation issues
                                exclude: browserNonTranspileModules,
                                use: appBrowserLayerLoaders,
                                resolve: {
                                    mainFields: (0, _resolve.getMainField)(compilerType, true)
                                }
                            },
                            {
                                test: codeCondition.test,
                                issuerLayer: _constants.WEBPACK_LAYERS.serverSideRendering,
                                exclude: asyncStoragesRegex,
                                use: appSSRLayerLoaders,
                                resolve: {
                                    mainFields: (0, _resolve.getMainField)(compilerType, true)
                                }
                            }
                        ] : [],
                        {
                            ...codeCondition,
                            use: [
                                ...reactRefreshLoaders,
                                defaultLoaders.babel,
                                reactCompilerLoader
                            ].filter(Boolean)
                        }
                    ]
                },
                ...!config.images.disableStaticImages ? [
                    {
                        test: nextImageLoaderRegex,
                        loader: 'next-image-loader',
                        issuer: {
                            not: _css.regexLikeCss
                        },
                        dependency: {
                            not: [
                                'url'
                            ]
                        },
                        resourceQuery: {
                            not: [
                                new RegExp(_constants.WEBPACK_RESOURCE_QUERIES.metadata),
                                new RegExp(_constants.WEBPACK_RESOURCE_QUERIES.metadataRoute),
                                new RegExp(_constants.WEBPACK_RESOURCE_QUERIES.metadataImageMeta)
                            ]
                        },
                        options: {
                            isDev: dev,
                            compilerType,
                            basePath: config.basePath,
                            assetPrefix: config.assetPrefix
                        }
                    }
                ] : [],
                ...isEdgeServer ? [
                    {
                        resolve: {
                            fallback: {
                                process: "[project]/node_modules/next/dist/build/polyfills/process.js [app-rsc] (ecmascript)"
                            }
                        }
                    }
                ] : isClient ? [
                    {
                        resolve: {
                            fallback: config.experimental.fallbackNodePolyfills === false ? {
                                assert: false,
                                buffer: false,
                                constants: false,
                                crypto: false,
                                domain: false,
                                http: false,
                                https: false,
                                os: false,
                                path: false,
                                punycode: false,
                                process: false,
                                querystring: false,
                                stream: false,
                                string_decoder: false,
                                sys: false,
                                timers: false,
                                tty: false,
                                util: false,
                                vm: false,
                                zlib: false,
                                events: false,
                                setImmediate: false
                            } : {
                                assert: "[project]/node_modules/next/dist/compiled/assert/assert.js [app-rsc] (ecmascript)",
                                buffer: "[project]/node_modules/next/dist/compiled/buffer/index.js [app-rsc] (ecmascript)",
                                constants: "[project]/node_modules/next/dist/compiled/constants-browserify/constants.json (json)",
                                crypto: "[project]/node_modules/next/dist/compiled/crypto-browserify/index.js [app-rsc] (ecmascript)",
                                domain: "[project]/node_modules/next/dist/compiled/domain-browser/index.js [app-rsc] (ecmascript)",
                                http: "[project]/node_modules/next/dist/compiled/stream-http/index.js [app-rsc] (ecmascript)",
                                https: "[project]/node_modules/next/dist/compiled/https-browserify/index.js [app-rsc] (ecmascript)",
                                os: "[project]/node_modules/next/dist/compiled/os-browserify/browser.js [app-rsc] (ecmascript)",
                                path: "[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-rsc] (ecmascript)",
                                punycode: "[project]/node_modules/next/dist/compiled/punycode/punycode.js [app-rsc] (ecmascript)",
                                process: "[project]/node_modules/next/dist/build/polyfills/process.js [app-rsc] (ecmascript)",
                                // Handled in separate alias
                                querystring: "[project]/node_modules/next/dist/compiled/querystring-es3/index.js [app-rsc] (ecmascript)",
                                stream: "[project]/node_modules/next/dist/compiled/stream-browserify/index.js [app-rsc] (ecmascript)",
                                string_decoder: "[project]/node_modules/next/dist/compiled/string_decoder/string_decoder.js [app-rsc] (ecmascript)",
                                sys: "[project]/node_modules/next/dist/compiled/util/util.js [app-rsc] (ecmascript)",
                                timers: "[project]/node_modules/next/dist/compiled/timers-browserify/main.js [app-rsc] (ecmascript)",
                                tty: "[project]/node_modules/next/dist/compiled/tty-browserify/index.js [app-rsc] (ecmascript)",
                                // Handled in separate alias
                                // url: require.resolve('url'),
                                util: "[project]/node_modules/next/dist/compiled/util/util.js [app-rsc] (ecmascript)",
                                vm: "[project]/node_modules/next/dist/compiled/vm-browserify/index.js [app-rsc] (ecmascript)",
                                zlib: "[project]/node_modules/next/dist/compiled/browserify-zlib/index.js [app-rsc] (ecmascript)",
                                events: "[project]/node_modules/next/dist/compiled/events/events.js [app-rsc] (ecmascript)",
                                setImmediate: "[project]/node_modules/next/dist/compiled/setimmediate/setImmediate.js [app-rsc] (ecmascript)"
                            }
                        }
                    }
                ] : [],
                {
                    // Mark `image-response.js` as side-effects free to make sure we can
                    // tree-shake it if not used.
                    test: /[\\/]next[\\/]dist[\\/](esm[\\/])?server[\\/]og[\\/]image-response\.js/,
                    sideEffects: false
                },
                // Mark the action-client-wrapper module as side-effects free to make sure
                // the individual transformed module of client action can be tree-shaken.
                // This will make modules processed by `next-flight-server-reference-proxy-loader` become side-effects free,
                // then on client side the module ids will become tree-shakable.
                // e.g. the output of client action module will look like:
                // `export { a } from 'next-flight-server-reference-proxy-loader?id=idOfA&name=a!
                // `export { b } from 'next-flight-server-reference-proxy-loader?id=idOfB&name=b!
                {
                    test: /[\\/]next[\\/]dist[\\/](esm[\\/])?build[\\/]webpack[\\/]loaders[\\/]next-flight-loader[\\/]action-client-wrapper\.js/,
                    sideEffects: false
                },
                {
                    // This loader rule should be before other rules, as it can output code
                    // that still contains `"use client"` or `"use server"` statements that
                    // needs to be re-transformed by the RSC compilers.
                    // This loader rule works like a bridge between user's import and
                    // the target module behind a package's barrel file. It reads SWC's
                    // analysis result from the previous loader, and directly returns the
                    // code that only exports values that are asked by the user.
                    test: /__barrel_optimize__/,
                    use: ({ resourceQuery })=>{
                        var _resourceQuery_match;
                        const names = (((_resourceQuery_match = resourceQuery.match(/\?names=([^&]+)/)) == null ? void 0 : _resourceQuery_match[1]) || '').split(',');
                        return [
                            {
                                loader: 'next-barrel-loader',
                                options: {
                                    names,
                                    swcCacheDir: _path.default.join(dir, (config == null ? void 0 : config.distDir) ?? '.next', 'cache', 'swc')
                                },
                                // This is part of the request value to serve as the module key.
                                // The barrel loader are no-op re-exported modules keyed by
                                // export names.
                                ident: 'next-barrel-loader:' + resourceQuery
                            }
                        ];
                    }
                },
                {
                    resolve: {
                        alias: {
                            next: _nextdirpaths.NEXT_PROJECT_ROOT
                        }
                    }
                }
            ]
        },
        plugins: [
            isNodeServer && new _webpack.webpack.NormalModuleReplacementPlugin(/\.\/(.+)\.shared-runtime$/, function(resource) {
                const moduleName = _path.default.basename(resource.request, '.shared-runtime');
                const layer = resource.contextInfo.issuerLayer;
                let runtime;
                switch(layer){
                    case _constants.WEBPACK_LAYERS.serverSideRendering:
                    case _constants.WEBPACK_LAYERS.reactServerComponents:
                    case _constants.WEBPACK_LAYERS.appPagesBrowser:
                    case _constants.WEBPACK_LAYERS.actionBrowser:
                        runtime = 'app-page';
                        break;
                    default:
                        runtime = 'pages';
                }
                resource.request = `next/dist/server/route-modules/${runtime}/vendored/contexts/${moduleName}`;
            }),
            dev && new _memorywithgccacheplugin.MemoryWithGcCachePlugin({
                maxGenerations: 5
            }),
            dev && isClient && new _ReactRefreshWebpackPlugin.default(_webpack.webpack),
            // Makes sure `Buffer` and `process` are polyfilled in client and flight bundles (same behavior as webpack 4)
            (isClient || isEdgeServer) && new _webpack.webpack.ProvidePlugin({
                // Buffer is used by getInlineScriptSource
                Buffer: [
                    "[externals]/buffer [external] (buffer, cjs)",
                    'Buffer'
                ],
                // Avoid process being overridden when in web run time
                ...isClient && {
                    process: [
                        "[externals]/process [external] (process, cjs)"
                    ]
                }
            }),
            (0, _defineenvplugin.getDefineEnvPlugin)({
                isTurbopack: false,
                config,
                dev,
                distDir,
                fetchCacheKeyPrefix,
                hasRewrites,
                isClient,
                isEdgeServer,
                isNodeOrEdgeCompilation,
                isNodeServer,
                middlewareMatchers
            }),
            isClient && new _reactloadableplugin.ReactLoadablePlugin({
                filename: _constants1.REACT_LOADABLE_MANIFEST,
                pagesDir,
                appDir,
                runtimeAsset: `server/${_constants1.MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`,
                dev
            }),
            (isClient || isEdgeServer) && new _nextdropclientpageplugin.DropClientPage(),
            isNodeServer && !dev && new (__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/next-trace-entrypoints-plugin.js [app-rsc] (ecmascript)")).TraceEntryPointsPlugin({
                rootDir: dir,
                appDir: appDir,
                pagesDir: pagesDir,
                esmExternals: config.experimental.esmExternals,
                outputFileTracingRoot: config.outputFileTracingRoot,
                appDirEnabled: hasAppDir,
                optOutBundlingPackages,
                traceIgnores: [],
                compilerType,
                swcLoaderConfig: swcDefaultLoader
            }),
            // Moment.js is an extremely popular library that bundles large locale files
            // by default due to how Webpack interprets its code. This is a practical
            // solution that requires the user to opt into importing specific locales.
            // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack
            config.excludeDefaultMomentLocales && new _webpack.webpack.IgnorePlugin({
                resourceRegExp: /^\.\/locale$/,
                contextRegExp: /moment$/
            }),
            ...dev ? (()=>{
                // Even though require.cache is server only we have to clear assets from both compilations
                // This is because the client compilation generates the build manifest that's used on the server side
                const { NextJsRequireCacheHotReloader } = __turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/nextjs-require-cache-hot-reloader.js [app-rsc] (ecmascript)");
                const devPlugins = [
                    new NextJsRequireCacheHotReloader({
                        serverComponents: hasAppDir
                    })
                ];
                if (isClient || isEdgeServer) {
                    devPlugins.push(new _webpack.webpack.HotModuleReplacementPlugin());
                }
                return devPlugins;
            })() : [],
            !dev && new _webpack.webpack.IgnorePlugin({
                resourceRegExp: /react-is/,
                contextRegExp: /next[\\/]dist[\\/]/
            }),
            isNodeOrEdgeCompilation && new _pagesmanifestplugin.default({
                dev,
                appDirEnabled: hasAppDir,
                isEdgeRuntime: isEdgeServer,
                distDir: !dev ? distDir : undefined
            }),
            // MiddlewarePlugin should be after DefinePlugin so NEXT_PUBLIC_*
            // replacement is done before its process.env.* handling
            isEdgeServer && new _middlewareplugin.default({
                dev,
                sriEnabled: !dev && !!((_config_experimental_sri = config.experimental.sri) == null ? void 0 : _config_experimental_sri.algorithm),
                rewrites,
                edgeEnvironments: {
                    __NEXT_BUILD_ID: buildId,
                    NEXT_SERVER_ACTIONS_ENCRYPTION_KEY: encryptionKey,
                    ...edgePreviewProps
                }
            }),
            isClient && new _buildmanifestplugin.default({
                buildId,
                rewrites,
                isDevFallback,
                appDirEnabled: hasAppDir,
                clientRouterFilters
            }),
            new _profilingplugin.ProfilingPlugin({
                runWebpackSpan,
                rootDir: dir
            }),
            new _wellknownerrorsplugin.WellKnownErrorsPlugin(),
            isClient && new _copyfileplugin.CopyFilePlugin({
                // file path to build output of `@next/polyfill-nomodule`
                filePath: "[project]/node_modules/next/dist/build/polyfills/polyfill-nomodule.js [app-rsc] (ecmascript)",
                cacheKey: "15.1.4",
                name: `static/chunks/polyfills${dev ? '' : '-[hash]'}.js`,
                minimize: false,
                info: {
                    [_constants1.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL]: 1,
                    // This file is already minified
                    minimized: true
                }
            }),
            hasAppDir && isClient && new _appbuildmanifestplugin.AppBuildManifestPlugin({
                dev
            }),
            hasAppDir && (isClient ? new _flightmanifestplugin.ClientReferenceManifestPlugin({
                dev,
                appDir,
                experimentalInlineCss: !!config.experimental.inlineCss
            }) : new _flightcliententryplugin.FlightClientEntryPlugin({
                appDir,
                dev,
                isEdgeServer,
                encryptionKey
            })),
            hasAppDir && !isClient && new _nexttypesplugin.NextTypesPlugin({
                dir,
                distDir: config.distDir,
                appDir,
                dev,
                isEdgeServer,
                pageExtensions: config.pageExtensions,
                typedRoutes: enableTypedRoutes,
                cacheLifeConfig: config.experimental.cacheLife,
                originalRewrites,
                originalRedirects
            }),
            !dev && isClient && !!((_config_experimental_sri1 = config.experimental.sri) == null ? void 0 : _config_experimental_sri1.algorithm) && new _subresourceintegrityplugin.SubresourceIntegrityPlugin(config.experimental.sri.algorithm),
            isClient && new _nextfontmanifestplugin.NextFontManifestPlugin({
                appDir
            }),
            !dev && isClient && config.experimental.cssChunking && new _csschunkingplugin.CssChunkingPlugin(config.experimental.cssChunking === 'strict'),
            !dev && isClient && new (__turbopack_require__("[project]/node_modules/next/dist/build/webpack/plugins/telemetry-plugin.js [app-rsc] (ecmascript)")).TelemetryPlugin(new Map([
                [
                    'swcLoader',
                    useSWCLoader
                ],
                [
                    'swcRelay',
                    !!((_config_compiler = config.compiler) == null ? void 0 : _config_compiler.relay)
                ],
                [
                    'swcStyledComponents',
                    !!((_config_compiler1 = config.compiler) == null ? void 0 : _config_compiler1.styledComponents)
                ],
                [
                    'swcReactRemoveProperties',
                    !!((_config_compiler2 = config.compiler) == null ? void 0 : _config_compiler2.reactRemoveProperties)
                ],
                [
                    'swcExperimentalDecorators',
                    !!(jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.experimentalDecorators)
                ],
                [
                    'swcRemoveConsole',
                    !!((_config_compiler3 = config.compiler) == null ? void 0 : _config_compiler3.removeConsole)
                ],
                [
                    'swcImportSource',
                    !!(jsConfig == null ? void 0 : (_jsConfig_compilerOptions1 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions1.jsxImportSource)
                ],
                [
                    'swcEmotion',
                    !!((_config_compiler4 = config.compiler) == null ? void 0 : _config_compiler4.emotion)
                ],
                [
                    'transpilePackages',
                    !!config.transpilePackages
                ],
                [
                    'skipMiddlewareUrlNormalize',
                    !!config.skipMiddlewareUrlNormalize
                ],
                [
                    'skipTrailingSlashRedirect',
                    !!config.skipTrailingSlashRedirect
                ],
                [
                    'modularizeImports',
                    !!config.modularizeImports
                ],
                // If esmExternals is not same as default value, it represents customized usage
                [
                    'esmExternals',
                    config.experimental.esmExternals !== true
                ],
                SWCBinaryTarget
            ].filter(Boolean)))
        ].filter(Boolean)
    };
    // Support tsconfig and jsconfig baseUrl
    // Only add the baseUrl if it's explicitly set in tsconfig/jsconfig
    if (resolvedBaseUrl && !resolvedBaseUrl.isImplicit) {
        var _webpackConfig_resolve_modules, _webpackConfig_resolve1;
        (_webpackConfig_resolve1 = webpackConfig.resolve) == null ? void 0 : (_webpackConfig_resolve_modules = _webpackConfig_resolve1.modules) == null ? void 0 : _webpackConfig_resolve_modules.push(resolvedBaseUrl.baseUrl);
    }
    (_webpackConfig_resolve = webpackConfig.resolve) == null ? void 0 : (_webpackConfig_resolve_plugins = _webpackConfig_resolve.plugins) == null ? void 0 : _webpackConfig_resolve_plugins.unshift(new _jsconfigpathsplugin.JsConfigPathsPlugin((jsConfig == null ? void 0 : (_jsConfig_compilerOptions2 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions2.paths) || {}, resolvedBaseUrl));
    const webpack5Config = webpackConfig;
    if (isEdgeServer) {
        var _webpack5Config_module_rules, _webpack5Config_module, _webpack5Config_module_rules1, _webpack5Config_module1, _webpack5Config_module_rules2, _webpack5Config_module2;
        (_webpack5Config_module = webpack5Config.module) == null ? void 0 : (_webpack5Config_module_rules = _webpack5Config_module.rules) == null ? void 0 : _webpack5Config_module_rules.unshift({
            test: /\.wasm$/,
            loader: 'next-middleware-wasm-loader',
            type: 'javascript/auto',
            resourceQuery: /module/i
        });
        (_webpack5Config_module1 = webpack5Config.module) == null ? void 0 : (_webpack5Config_module_rules1 = _webpack5Config_module1.rules) == null ? void 0 : _webpack5Config_module_rules1.unshift({
            dependency: 'url',
            loader: 'next-middleware-asset-loader',
            type: 'javascript/auto',
            layer: _constants.WEBPACK_LAYERS.edgeAsset
        });
        (_webpack5Config_module2 = webpack5Config.module) == null ? void 0 : (_webpack5Config_module_rules2 = _webpack5Config_module2.rules) == null ? void 0 : _webpack5Config_module_rules2.unshift({
            issuerLayer: _constants.WEBPACK_LAYERS.edgeAsset,
            type: 'asset/source'
        });
    }
    webpack5Config.experiments = {
        layers: true,
        cacheUnaffected: true,
        buildHttp: Array.isArray(config.experimental.urlImports) ? {
            allowedUris: config.experimental.urlImports,
            cacheLocation: _path.default.join(dir, 'next.lock/data'),
            lockfileLocation: _path.default.join(dir, 'next.lock/lock.json')
        } : config.experimental.urlImports ? {
            cacheLocation: _path.default.join(dir, 'next.lock/data'),
            lockfileLocation: _path.default.join(dir, 'next.lock/lock.json'),
            ...config.experimental.urlImports
        } : undefined
    };
    webpack5Config.module.parser = {
        javascript: {
            url: 'relative'
        }
    };
    webpack5Config.module.generator = {
        asset: {
            filename: 'static/media/[name].[hash:8][ext]'
        }
    };
    if (!webpack5Config.output) {
        webpack5Config.output = {};
    }
    if (isClient) {
        webpack5Config.output.trustedTypes = 'nextjs#bundler';
    }
    if (isClient || isEdgeServer) {
        webpack5Config.output.enabledLibraryTypes = [
            'assign'
        ];
    }
    // This enables managedPaths for all node_modules
    // and also for the unplugged folder when using yarn pnp
    // It also add the yarn cache to the immutable paths
    webpack5Config.snapshot = {};
    if (process.versions.pnp === '3') {
        webpack5Config.snapshot.managedPaths = [
            /^(.+?(?:[\\/]\.yarn[\\/]unplugged[\\/][^\\/]+)?[\\/]node_modules[\\/])/
        ];
    } else {
        webpack5Config.snapshot.managedPaths = [
            /^(.+?[\\/]node_modules[\\/])/
        ];
    }
    if (process.versions.pnp === '3') {
        webpack5Config.snapshot.immutablePaths = [
            /^(.+?[\\/]cache[\\/][^\\/]+\.zip[\\/]node_modules[\\/])/
        ];
    }
    if (dev) {
        if (!webpack5Config.optimization) {
            webpack5Config.optimization = {};
        }
        // For Server Components, it's necessary to have provided exports collected
        // to generate the correct flight manifest.
        if (!hasAppDir) {
            webpack5Config.optimization.providedExports = false;
        }
        webpack5Config.optimization.usedExports = false;
    }
    const configVars = JSON.stringify({
        optimizePackageImports: config == null ? void 0 : (_config_experimental2 = config.experimental) == null ? void 0 : _config_experimental2.optimizePackageImports,
        crossOrigin: config.crossOrigin,
        pageExtensions: pageExtensions,
        trailingSlash: config.trailingSlash,
        buildActivity: config.devIndicators.buildActivity,
        buildActivityPosition: config.devIndicators.buildActivityPosition,
        productionBrowserSourceMaps: !!config.productionBrowserSourceMaps,
        reactStrictMode: config.reactStrictMode,
        optimizeCss: config.experimental.optimizeCss,
        nextScriptWorkers: config.experimental.nextScriptWorkers,
        scrollRestoration: config.experimental.scrollRestoration,
        typedRoutes: config.experimental.typedRoutes,
        basePath: config.basePath,
        excludeDefaultMomentLocales: config.excludeDefaultMomentLocales,
        assetPrefix: config.assetPrefix,
        disableOptimizedLoading,
        isEdgeRuntime: isEdgeServer,
        reactProductionProfiling,
        webpack: !!config.webpack,
        hasRewrites,
        swcLoader: useSWCLoader,
        removeConsole: (_config_compiler5 = config.compiler) == null ? void 0 : _config_compiler5.removeConsole,
        reactRemoveProperties: (_config_compiler6 = config.compiler) == null ? void 0 : _config_compiler6.reactRemoveProperties,
        styledComponents: (_config_compiler7 = config.compiler) == null ? void 0 : _config_compiler7.styledComponents,
        relay: (_config_compiler8 = config.compiler) == null ? void 0 : _config_compiler8.relay,
        emotion: (_config_compiler9 = config.compiler) == null ? void 0 : _config_compiler9.emotion,
        modularizeImports: config.modularizeImports,
        imageLoaderFile: config.images.loaderFile,
        clientTraceMetadata: config.experimental.clientTraceMetadata,
        serverSourceMaps: config.experimental.serverSourceMaps,
        serverReferenceHashSalt: encryptionKey
    });
    const cache = {
        type: 'filesystem',
        // Disable memory cache in development in favor of our own MemoryWithGcCachePlugin.
        maxMemoryGenerations: dev ? 0 : Infinity,
        // Includes:
        //  - Next.js location on disk (some loaders use absolute paths and some resolve options depend on absolute paths)
        //  - Next.js version
        //  - next.config.js keys that affect compilation
        version: `${__dirname}|${"15.1.4"}|${configVars}`,
        cacheDirectory: _path.default.join(distDir, 'cache', 'webpack'),
        // For production builds, it's more efficient to compress all cache files together instead of compression each one individually.
        // So we disable compression here and allow the build runner to take care of compressing the cache as a whole.
        // For local development, we still want to compress the cache files individually to avoid I/O bottlenecks
        // as we are seeing 1~10 seconds of fs I/O time from user reports.
        compression: dev ? 'gzip' : false
    };
    // Adds `next.config.js` as a buildDependency when custom webpack config is provided
    if (config.webpack && config.configFile) {
        cache.buildDependencies = {
            config: [
                config.configFile
            ],
            // We don't want to use the webpack default buildDependencies as we already include the next.js version
            defaultWebpack: []
        };
    } else {
        cache.buildDependencies = {
            // We don't want to use the webpack default buildDependencies as we already include the next.js version
            defaultWebpack: []
        };
    }
    (_webpack5Config_plugins = webpack5Config.plugins) == null ? void 0 : _webpack5Config_plugins.push((compiler)=>{
        compiler.hooks.done.tap('next-build-dependencies', (stats)=>{
            const buildDependencies = stats.compilation.buildDependencies;
            const nextPackage = _path.default.dirname("[project]/node_modules/next/package.json (json)");
            // Remove all next.js build dependencies, they are already covered by the cacheVersion
            // and next.js also imports the output files which leads to broken caching.
            for (const dep of buildDependencies){
                if (dep.startsWith(nextPackage)) {
                    buildDependencies.delete(dep);
                }
            }
        });
    });
    webpack5Config.cache = cache;
    if (process.env.NEXT_WEBPACK_LOGGING) {
        const infra = process.env.NEXT_WEBPACK_LOGGING.includes('infrastructure');
        const profileClient = process.env.NEXT_WEBPACK_LOGGING.includes('profile-client');
        const profileServer = process.env.NEXT_WEBPACK_LOGGING.includes('profile-server');
        const summaryClient = process.env.NEXT_WEBPACK_LOGGING.includes('summary-client');
        const summaryServer = process.env.NEXT_WEBPACK_LOGGING.includes('summary-server');
        const profile = profileClient && isClient || profileServer && isNodeOrEdgeCompilation;
        const summary = summaryClient && isClient || summaryServer && isNodeOrEdgeCompilation;
        const logDefault = !infra && !profile && !summary;
        if (logDefault || infra) {
            webpack5Config.infrastructureLogging = {
                level: 'verbose',
                debug: /FileSystemInfo/
            };
        }
        if (logDefault || profile) {
            webpack5Config.plugins.push((compiler)=>{
                compiler.hooks.done.tap('next-webpack-logging', (stats)=>{
                    console.log(stats.toString({
                        colors: true,
                        logging: logDefault ? 'log' : 'verbose'
                    }));
                });
            });
        } else if (summary) {
            webpack5Config.plugins.push((compiler)=>{
                compiler.hooks.done.tap('next-webpack-logging', (stats)=>{
                    console.log(stats.toString({
                        preset: 'summary',
                        colors: true,
                        timings: true
                    }));
                });
            });
        }
        if (profile) {
            const ProgressPlugin = _webpack.webpack.ProgressPlugin;
            webpack5Config.plugins.push(new ProgressPlugin({
                profile: true
            }));
            webpack5Config.profile = true;
        }
    }
    webpackConfig = await (0, _config.buildConfiguration)(webpackConfig, {
        supportedBrowsers,
        rootDirectory: dir,
        customAppFile: pagesDir ? new RegExp((0, _escaperegexp.escapeStringRegexp)(_path.default.join(pagesDir, `_app`))) : undefined,
        hasAppDir,
        isDevelopment: dev,
        isServer: isNodeOrEdgeCompilation,
        isEdgeRuntime: isEdgeServer,
        targetWeb: isClient || isEdgeServer,
        assetPrefix: config.assetPrefix || '',
        sassOptions: config.sassOptions,
        productionBrowserSourceMaps: config.productionBrowserSourceMaps,
        future: config.future,
        experimental: config.experimental,
        disableStaticImages: config.images.disableStaticImages,
        transpilePackages: config.transpilePackages,
        serverSourceMaps: config.experimental.serverSourceMaps
    });
    // @ts-ignore Cache exists
    webpackConfig.cache.name = `${webpackConfig.name}-${webpackConfig.mode}${isDevFallback ? '-fallback' : ''}`;
    if (dev) {
        if (webpackConfig.module) {
            webpackConfig.module.unsafeCache = (module1)=>!UNSAFE_CACHE_REGEX.test(module1.resource);
        } else {
            webpackConfig.module = {
                unsafeCache: (module1)=>!UNSAFE_CACHE_REGEX.test(module1.resource)
            };
        }
    }
    let originalDevtool = webpackConfig.devtool;
    if (typeof config.webpack === 'function') {
        var _webpack5Config_experiments, _webpack5Config_experiments1;
        webpackConfig = config.webpack(webpackConfig, {
            dir,
            dev,
            isServer: isNodeOrEdgeCompilation,
            buildId,
            config,
            defaultLoaders,
            totalPages: Object.keys(entrypoints).length,
            webpack: _webpack.webpack,
            ...isNodeOrEdgeCompilation ? {
                nextRuntime: isEdgeServer ? 'edge' : 'nodejs'
            } : {}
        });
        if (!webpackConfig) {
            throw new Error(`Webpack config is undefined. You may have forgot to return properly from within the "webpack" method of your ${config.configFileName}.\n` + 'See more info here https://nextjs.org/docs/messages/undefined-webpack-config');
        }
        if (dev && originalDevtool !== webpackConfig.devtool) {
            webpackConfig.devtool = originalDevtool;
            devtoolRevertWarning(originalDevtool);
        }
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const webpack5Config = webpackConfig;
        // disable lazy compilation of entries as next.js has it's own method here
        if (((_webpack5Config_experiments = webpack5Config.experiments) == null ? void 0 : _webpack5Config_experiments.lazyCompilation) === true) {
            webpack5Config.experiments.lazyCompilation = {
                entries: false
            };
        } else if (typeof ((_webpack5Config_experiments1 = webpack5Config.experiments) == null ? void 0 : _webpack5Config_experiments1.lazyCompilation) === 'object' && webpack5Config.experiments.lazyCompilation.entries !== false) {
            webpack5Config.experiments.lazyCompilation.entries = false;
        }
        if (typeof webpackConfig.then === 'function') {
            console.warn('> Promise returned in next config. https://nextjs.org/docs/messages/promise-in-next-config');
        }
    }
    const rules = ((_webpackConfig_module = webpackConfig.module) == null ? void 0 : _webpackConfig_module.rules) || [];
    const customSvgRule = rules.find((rule)=>rule && typeof rule === 'object' && rule.loader !== 'next-image-loader' && 'test' in rule && rule.test instanceof RegExp && rule.test.test('.svg') || false);
    if (customSvgRule && hasAppDir) {
        // Create React aliases for SVG components that were transformed using a
        // custom webpack config with e.g. the `@svgr/webpack` loader, or the
        // `babel-plugin-inline-react-svg` plugin.
        rules.push({
            test: customSvgRule.test,
            oneOf: [
                _constants.WEBPACK_LAYERS.reactServerComponents,
                _constants.WEBPACK_LAYERS.serverSideRendering,
                _constants.WEBPACK_LAYERS.appPagesBrowser
            ].map((layer)=>({
                    issuerLayer: layer,
                    resolve: {
                        alias: (0, _createcompileraliases.createRSCAliases)(bundledReactChannel, {
                            reactProductionProfiling,
                            layer,
                            isEdgeServer
                        })
                    }
                }))
        });
    }
    if (!config.images.disableStaticImages) {
        const nextImageRule = rules.find((rule)=>rule && typeof rule === 'object' && rule.loader === 'next-image-loader');
        if (customSvgRule && nextImageRule && typeof nextImageRule === 'object') {
            // Exclude svg if the user already defined it in custom
            // webpack config such as the `@svgr/webpack` loader, or
            // the `babel-plugin-inline-react-svg` plugin.
            nextImageRule.test = /\.(png|jpg|jpeg|gif|webp|avif|ico|bmp)$/i;
        }
    }
    if (config.experimental.craCompat && ((_webpackConfig_module1 = webpackConfig.module) == null ? void 0 : _webpackConfig_module1.rules) && webpackConfig.plugins) {
        // CRA allows importing non-webpack handled files with file-loader
        // these need to be the last rule to prevent catching other items
        // https://github.com/facebook/create-react-app/blob/fddce8a9e21bf68f37054586deb0c8636a45f50b/packages/react-scripts/config/webpack.config.js#L594
        const fileLoaderExclude = [
            /\.(js|mjs|jsx|ts|tsx|json)$/
        ];
        const fileLoader = {
            exclude: fileLoaderExclude,
            issuer: fileLoaderExclude,
            type: 'asset/resource'
        };
        const topRules = [];
        const innerRules = [];
        for (const rule of webpackConfig.module.rules){
            if (!rule || typeof rule !== 'object') continue;
            if (rule.resolve) {
                topRules.push(rule);
            } else {
                if (rule.oneOf && !(rule.test || rule.exclude || rule.resource || rule.issuer)) {
                    rule.oneOf.forEach((r)=>innerRules.push(r));
                } else {
                    innerRules.push(rule);
                }
            }
        }
        webpackConfig.module.rules = [
            ...topRules,
            {
                oneOf: [
                    ...innerRules,
                    fileLoader
                ]
            }
        ];
    }
    // Backwards compat with webpack-dev-middleware options object
    if (typeof config.webpackDevMiddleware === 'function') {
        const options = config.webpackDevMiddleware({
            watchOptions: webpackConfig.watchOptions
        });
        if (options.watchOptions) {
            webpackConfig.watchOptions = options.watchOptions;
        }
    }
    function canMatchCss(rule) {
        if (!rule) {
            return false;
        }
        const fileNames = [
            '/tmp/NEXTJS_CSS_DETECTION_FILE.css',
            '/tmp/NEXTJS_CSS_DETECTION_FILE.scss',
            '/tmp/NEXTJS_CSS_DETECTION_FILE.sass',
            '/tmp/NEXTJS_CSS_DETECTION_FILE.less',
            '/tmp/NEXTJS_CSS_DETECTION_FILE.styl'
        ];
        if (rule instanceof RegExp && fileNames.some((input)=>rule.test(input))) {
            return true;
        }
        if (typeof rule === 'function') {
            if (fileNames.some((input)=>{
                try {
                    if (rule(input)) {
                        return true;
                    }
                } catch  {}
                return false;
            })) {
                return true;
            }
        }
        if (Array.isArray(rule) && rule.some(canMatchCss)) {
            return true;
        }
        return false;
    }
    const hasUserCssConfig = ((_webpackConfig_module2 = webpackConfig.module) == null ? void 0 : (_webpackConfig_module_rules = _webpackConfig_module2.rules) == null ? void 0 : _webpackConfig_module_rules.some((rule)=>canMatchCss(rule.test) || canMatchCss(rule.include))) ?? false;
    if (hasUserCssConfig) {
        var _webpackConfig_module_rules1, _webpackConfig_module3, _webpackConfig_plugins, _webpackConfig_optimization_minimizer, _webpackConfig_optimization;
        // only show warning for one build
        if (isNodeOrEdgeCompilation) {
            console.warn((0, _picocolors.yellow)((0, _picocolors.bold)('Warning: ')) + (0, _picocolors.bold)('Built-in CSS support is being disabled due to custom CSS configuration being detected.\n') + 'See here for more info: https://nextjs.org/docs/messages/built-in-css-disabled\n');
        }
        if ((_webpackConfig_module3 = webpackConfig.module) == null ? void 0 : (_webpackConfig_module_rules1 = _webpackConfig_module3.rules) == null ? void 0 : _webpackConfig_module_rules1.length) {
            // Remove default CSS Loaders
            webpackConfig.module.rules.forEach((r)=>{
                if (!r || typeof r !== 'object') return;
                if (Array.isArray(r.oneOf)) {
                    r.oneOf = r.oneOf.filter((o)=>o[Symbol.for('__next_css_remove')] !== true);
                }
            });
        }
        if ((_webpackConfig_plugins = webpackConfig.plugins) == null ? void 0 : _webpackConfig_plugins.length) {
            // Disable CSS Extraction Plugin
            webpackConfig.plugins = webpackConfig.plugins.filter((p)=>p.__next_css_remove !== true);
        }
        if ((_webpackConfig_optimization = webpackConfig.optimization) == null ? void 0 : (_webpackConfig_optimization_minimizer = _webpackConfig_optimization.minimizer) == null ? void 0 : _webpackConfig_optimization_minimizer.length) {
            // Disable CSS Minifier
            webpackConfig.optimization.minimizer = webpackConfig.optimization.minimizer.filter((e)=>e.__next_css_remove !== true);
        }
    }
    // Inject missing React Refresh loaders so that development mode is fast:
    if (dev && isClient) {
        attachReactRefresh(webpackConfig, defaultLoaders.babel);
    }
    // Backwards compat for `main.js` entry key
    // and setup of dependencies between entries
    // we can't do that in the initial entry for
    // backward-compat reasons
    const originalEntry = webpackConfig.entry;
    if (typeof originalEntry !== 'undefined') {
        const updatedEntry = async ()=>{
            const entry = typeof originalEntry === 'function' ? await originalEntry() : originalEntry;
            // Server compilation doesn't have main.js
            if (clientEntries && Array.isArray(entry['main.js']) && entry['main.js'].length > 0) {
                const originalFile = clientEntries[_constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN];
                entry[_constants1.CLIENT_STATIC_FILES_RUNTIME_MAIN] = [
                    ...entry['main.js'],
                    originalFile
                ];
            }
            delete entry['main.js'];
            for (const name of Object.keys(entry)){
                entry[name] = (0, _entries.finalizeEntrypoint)({
                    value: entry[name],
                    compilerType,
                    name,
                    hasAppDir
                });
            }
            return entry;
        };
        // @ts-ignore webpack 5 typings needed
        webpackConfig.entry = updatedEntry;
    }
    if (!dev && typeof webpackConfig.entry === 'function') {
        // entry is always a function
        webpackConfig.entry = await webpackConfig.entry();
    }
    return webpackConfig;
} //# sourceMappingURL=webpack-config.js.map
}}),

};

//# sourceMappingURL=node_modules_next_dist_build_a3f493._.js.map