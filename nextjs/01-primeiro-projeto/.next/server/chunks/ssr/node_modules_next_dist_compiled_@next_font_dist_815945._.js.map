{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/constants.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.allowedDisplayValues = void 0;\nexports.allowedDisplayValues = [\n    'auto',\n    'block',\n    'swap',\n    'fallback',\n    'optional',\n];\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,KAAK;AACpC,QAAQ,oBAAoB,GAAG;IAC3B;IACA;IACA;IACA;IACA;CACH","ignoreList":[0]}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/format-available-values.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatAvailableValues = void 0;\n/**\n * Formats an array of values into a string that can be used error messages.\n * [\"a\", \"b\", \"c\"] => \"`a`, `b`, `c`\"\n */\nconst formatAvailableValues = (values) => values.map((val) => `\\`${val}\\``).join(', ');\nexports.formatAvailableValues = formatAvailableValues;\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,KAAK;AACrC;;;CAGC,GACD,MAAM,wBAAwB,CAAC,SAAW,OAAO,GAAG,CAAC,CAAC,MAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC;AACjF,QAAQ,qBAAqB,GAAG","ignoreList":[0]}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/next-font-error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.nextFontError = nextFontError;\n/**\n * Throw NextFontError error. Used by the WellKnownErrorsPlugin to format errors thrown by next/font.\n */\nfunction nextFontError(message) {\n    const err = new Error(message);\n    err.name = 'NextFontError';\n    throw err;\n}\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,aAAa,GAAG;AACxB;;CAEC,GACD,SAAS,cAAc,OAAO;IAC1B,MAAM,MAAM,IAAI,MAAM;IACtB,IAAI,IAAI,GAAG;IACX,MAAM;AACV","ignoreList":[0]}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/local/pick-font-file-for-fallback-generation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pickFontFileForFallbackGeneration = pickFontFileForFallbackGeneration;\nconst next_font_error_1 = require(\"../next-font-error\");\nconst NORMAL_WEIGHT = 400;\nconst BOLD_WEIGHT = 700;\n/**\n * Convert the weight string to a number so it can be used for comparison.\n * Weights can be defined as a number, 'normal' or 'bold'. https://developer.mozilla.org/docs/Web/CSS/@font-face/font-weight\n */\nfunction getWeightNumber(weight) {\n    return weight === 'normal'\n        ? NORMAL_WEIGHT\n        : weight === 'bold'\n            ? BOLD_WEIGHT\n            : Number(weight);\n}\n/**\n * Get the distance from normal (400) weight for the provided weight.\n * If it's not a variable font we can just return the distance.\n * If it's a variable font we need to compare its weight range to 400.\n */\nfunction getDistanceFromNormalWeight(weight) {\n    if (!weight)\n        return 0;\n    // If it's a variable font the weight is defined with two numbers \"100 900\", rather than just one \"400\"\n    const [firstWeight, secondWeight] = weight\n        .trim()\n        .split(/ +/)\n        .map(getWeightNumber);\n    if (Number.isNaN(firstWeight) || Number.isNaN(secondWeight)) {\n        (0, next_font_error_1.nextFontError)(`Invalid weight value in src array: \\`${weight}\\`.\\nExpected \\`normal\\`, \\`bold\\` or a number.`);\n    }\n    // If the weight doesn't have have a second value, it's not a variable font\n    // If that's the case, just return the distance from normal weight\n    if (!secondWeight) {\n        return firstWeight - NORMAL_WEIGHT;\n    }\n    // Normal weight is within variable font range\n    if (firstWeight <= NORMAL_WEIGHT && secondWeight >= NORMAL_WEIGHT) {\n        return 0;\n    }\n    // Normal weight is outside variable font range\n    // Return the distance of normal weight to the variable font range\n    const firstWeightDistance = firstWeight - NORMAL_WEIGHT;\n    const secondWeightDistance = secondWeight - NORMAL_WEIGHT;\n    if (Math.abs(firstWeightDistance) < Math.abs(secondWeightDistance)) {\n        return firstWeightDistance;\n    }\n    return secondWeightDistance;\n}\n/**\n * If multiple font files are provided for a font family, we need to pick one to use for the automatic fallback generation.\n * This function returns the font file that is most likely to be used for the bulk of the text on a page.\n *\n * There are some assumptions here about the text on a page when picking the font file:\n * - Most of the text will have normal weight, use the one closest to 400\n * - Most of the text will have normal style, prefer normal over italic\n * - If two font files have the same distance from normal weight, the thinner one will most likely be the bulk of the text\n */\nfunction pickFontFileForFallbackGeneration(fontFiles) {\n    return fontFiles.reduce((usedFontFile, currentFontFile) => {\n        if (!usedFontFile)\n            return currentFontFile;\n        const usedFontDistance = getDistanceFromNormalWeight(usedFontFile.weight);\n        const currentFontDistance = getDistanceFromNormalWeight(currentFontFile.weight);\n        // Prefer normal style if they have the same weight\n        if (usedFontDistance === currentFontDistance &&\n            (typeof currentFontFile.style === 'undefined' ||\n                currentFontFile.style === 'normal')) {\n            return currentFontFile;\n        }\n        const absUsedDistance = Math.abs(usedFontDistance);\n        const absCurrentDistance = Math.abs(currentFontDistance);\n        // Use closest absolute distance to normal weight\n        if (absCurrentDistance < absUsedDistance)\n            return currentFontFile;\n        // Prefer the thinner font if both have the same absolute distance from normal weight\n        if (absUsedDistance === absCurrentDistance &&\n            currentFontDistance < usedFontDistance) {\n            return currentFontFile;\n        }\n        return usedFontFile;\n    });\n}\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iCAAiC,GAAG;AAC5C,MAAM;AACN,MAAM,gBAAgB;AACtB,MAAM,cAAc;AACpB;;;CAGC,GACD,SAAS,gBAAgB,MAAM;IAC3B,OAAO,WAAW,WACZ,gBACA,WAAW,SACP,cACA,OAAO;AACrB;AACA;;;;CAIC,GACD,SAAS,4BAA4B,MAAM;IACvC,IAAI,CAAC,QACD,OAAO;IACX,uGAAuG;IACvG,MAAM,CAAC,aAAa,aAAa,GAAG,OAC/B,IAAI,GACJ,KAAK,CAAC,MACN,GAAG,CAAC;IACT,IAAI,OAAO,KAAK,CAAC,gBAAgB,OAAO,KAAK,CAAC,eAAe;QACzD,CAAC,GAAG,kBAAkB,aAAa,EAAE,CAAC,qCAAqC,EAAE,OAAO,+CAA+C,CAAC;IACxI;IACA,2EAA2E;IAC3E,kEAAkE;IAClE,IAAI,CAAC,cAAc;QACf,OAAO,cAAc;IACzB;IACA,8CAA8C;IAC9C,IAAI,eAAe,iBAAiB,gBAAgB,eAAe;QAC/D,OAAO;IACX;IACA,+CAA+C;IAC/C,kEAAkE;IAClE,MAAM,sBAAsB,cAAc;IAC1C,MAAM,uBAAuB,eAAe;IAC5C,IAAI,KAAK,GAAG,CAAC,uBAAuB,KAAK,GAAG,CAAC,uBAAuB;QAChE,OAAO;IACX;IACA,OAAO;AACX;AACA;;;;;;;;CAQC,GACD,SAAS,kCAAkC,SAAS;IAChD,OAAO,UAAU,MAAM,CAAC,CAAC,cAAc;QACnC,IAAI,CAAC,cACD,OAAO;QACX,MAAM,mBAAmB,4BAA4B,aAAa,MAAM;QACxE,MAAM,sBAAsB,4BAA4B,gBAAgB,MAAM;QAC9E,mDAAmD;QACnD,IAAI,qBAAqB,uBACrB,CAAC,OAAO,gBAAgB,KAAK,KAAK,eAC9B,gBAAgB,KAAK,KAAK,QAAQ,GAAG;YACzC,OAAO;QACX;QACA,MAAM,kBAAkB,KAAK,GAAG,CAAC;QACjC,MAAM,qBAAqB,KAAK,GAAG,CAAC;QACpC,iDAAiD;QACjD,IAAI,qBAAqB,iBACrB,OAAO;QACX,qFAAqF;QACrF,IAAI,oBAAoB,sBACpB,sBAAsB,kBAAkB;YACxC,OAAO;QACX;QACA,OAAO;IACX;AACJ","ignoreList":[0]}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/local/get-fallback-metrics-from-font-file.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFallbackMetricsFromFontFile = getFallbackMetricsFromFontFile;\n// The font metadata of the fallback fonts, retrieved with fontkit on system font files\n// The average width is calculated with the calcAverageWidth function below\nconst DEFAULT_SANS_SERIF_FONT = {\n    name: 'Arial',\n    azAvgWidth: 934.5116279069767,\n    unitsPerEm: 2048,\n};\nconst DEFAULT_SERIF_FONT = {\n    name: 'Times New Roman',\n    azAvgWidth: 854.3953488372093,\n    unitsPerEm: 2048,\n};\n/**\n * Calculate the average character width of a font file.\n * Used to calculate the size-adjust property by comparing the fallback average with the loaded font average.\n */\nfunction calcAverageWidth(font) {\n    try {\n        /**\n         * Finding the right characters to use when calculating the average width is tricky.\n         * We can't just use the average width of all characters, because we have to take letter frequency into account.\n         * We also have to take word length into account, because the font's space width usually differ a lot from other characters.\n         * The goal is to find a string that'll give you a good average width, given most texts in most languages.\n         *\n         * TODO: Currently only works for the latin alphabet. Support more languages by finding the right characters for additional languages.\n         *\n         * The used characters were decided through trial and error with letter frequency and word length tables as a guideline.\n         * E.g. https://en.wikipedia.org/wiki/Letter_frequency\n         */\n        const avgCharacters = 'aaabcdeeeefghiijklmnnoopqrrssttuvwxyz      ';\n        // Check if the font file has all the characters we need to calculate the average width\n        const hasAllChars = font\n            .glyphsForString(avgCharacters)\n            .flatMap((glyph) => glyph.codePoints)\n            .every((codePoint) => font.hasGlyphForCodePoint(codePoint));\n        if (!hasAllChars)\n            return undefined;\n        const widths = font\n            .glyphsForString(avgCharacters)\n            .map((glyph) => glyph.advanceWidth);\n        const totalWidth = widths.reduce((sum, width) => sum + width, 0);\n        return totalWidth / widths.length;\n    }\n    catch {\n        // Could not calculate average width from the font file, skip size-adjust\n        return undefined;\n    }\n}\nfunction formatOverrideValue(val) {\n    return Math.abs(val * 100).toFixed(2) + '%';\n}\n/**\n * Given a font file and category, calculate the fallback font override values.\n * The returned values can be used to generate a CSS @font-face declaration.\n *\n * For example:\n * @font-face {\n *   font-family: local-font;\n *   src: local(Arial);\n *   size-adjust: 90%;\n * }\n *\n * Read more about this technique in these texts by the Google Aurora team:\n * https://developer.chrome.com/blog/font-fallbacks/\n * https://docs.google.com/document/d/e/2PACX-1vRsazeNirATC7lIj2aErSHpK26hZ6dA9GsQ069GEbq5fyzXEhXbvByoftSfhG82aJXmrQ_sJCPBqcx_/pub\n */\nfunction getFallbackMetricsFromFontFile(font, category = 'serif') {\n    const fallbackFont = category === 'serif' ? DEFAULT_SERIF_FONT : DEFAULT_SANS_SERIF_FONT;\n    const azAvgWidth = calcAverageWidth(font);\n    const { ascent, descent, lineGap, unitsPerEm } = font;\n    const fallbackFontAvgWidth = fallbackFont.azAvgWidth / fallbackFont.unitsPerEm;\n    let sizeAdjust = azAvgWidth\n        ? azAvgWidth / unitsPerEm / fallbackFontAvgWidth\n        : 1;\n    return {\n        ascentOverride: formatOverrideValue(ascent / (unitsPerEm * sizeAdjust)),\n        descentOverride: formatOverrideValue(descent / (unitsPerEm * sizeAdjust)),\n        lineGapOverride: formatOverrideValue(lineGap / (unitsPerEm * sizeAdjust)),\n        fallbackFont: fallbackFont.name,\n        sizeAdjust: formatOverrideValue(sizeAdjust),\n    };\n}\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,8BAA8B,GAAG;AACzC,uFAAuF;AACvF,2EAA2E;AAC3E,MAAM,0BAA0B;IAC5B,MAAM;IACN,YAAY;IACZ,YAAY;AAChB;AACA,MAAM,qBAAqB;IACvB,MAAM;IACN,YAAY;IACZ,YAAY;AAChB;AACA;;;CAGC,GACD,SAAS,iBAAiB,IAAI;IAC1B,IAAI;QACA;;;;;;;;;;SAUC,GACD,MAAM,gBAAgB;QACtB,uFAAuF;QACvF,MAAM,cAAc,KACf,eAAe,CAAC,eAChB,OAAO,CAAC,CAAC,QAAU,MAAM,UAAU,EACnC,KAAK,CAAC,CAAC,YAAc,KAAK,oBAAoB,CAAC;QACpD,IAAI,CAAC,aACD,OAAO;QACX,MAAM,SAAS,KACV,eAAe,CAAC,eAChB,GAAG,CAAC,CAAC,QAAU,MAAM,YAAY;QACtC,MAAM,aAAa,OAAO,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,OAAO;QAC9D,OAAO,aAAa,OAAO,MAAM;IACrC,EACA,OAAM;QACF,yEAAyE;QACzE,OAAO;IACX;AACJ;AACA,SAAS,oBAAoB,GAAG;IAC5B,OAAO,KAAK,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,KAAK;AAC5C;AACA;;;;;;;;;;;;;;CAcC,GACD,SAAS,+BAA+B,IAAI,EAAE,WAAW,OAAO;IAC5D,MAAM,eAAe,aAAa,UAAU,qBAAqB;IACjE,MAAM,aAAa,iBAAiB;IACpC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG;IACjD,MAAM,uBAAuB,aAAa,UAAU,GAAG,aAAa,UAAU;IAC9E,IAAI,aAAa,aACX,aAAa,aAAa,uBAC1B;IACN,OAAO;QACH,gBAAgB,oBAAoB,SAAS,CAAC,aAAa,UAAU;QACrE,iBAAiB,oBAAoB,UAAU,CAAC,aAAa,UAAU;QACvE,iBAAiB,oBAAoB,UAAU,CAAC,aAAa,UAAU;QACvE,cAAc,aAAa,IAAI;QAC/B,YAAY,oBAAoB;IACpC;AACJ","ignoreList":[0]}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/local/validate-local-font-function-call.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateLocalFontFunctionCall = validateLocalFontFunctionCall;\nconst constants_1 = require(\"../constants\");\nconst format_available_values_1 = require(\"../format-available-values\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst extToFormat = {\n    woff: 'woff',\n    woff2: 'woff2',\n    ttf: 'truetype',\n    otf: 'opentype',\n    eot: 'embedded-opentype',\n};\n/**\n * Validate the data recieved from next-swc next-transform-font on next/font/local calls\n */\nfunction validateLocalFontFunctionCall(functionName, fontData) {\n    if (functionName) {\n        (0, next_font_error_1.nextFontError)(`next/font/local has no named exports`);\n    }\n    let { src, display = 'swap', weight, style, fallback, preload = true, variable, adjustFontFallback, declarations, } = fontData || {};\n    if (!constants_1.allowedDisplayValues.includes(display)) {\n        (0, next_font_error_1.nextFontError)(`Invalid display value \\`${display}\\`.\\nAvailable display values: ${(0, format_available_values_1.formatAvailableValues)(constants_1.allowedDisplayValues)}`);\n    }\n    if (!src) {\n        (0, next_font_error_1.nextFontError)('Missing required `src` property');\n    }\n    if (!Array.isArray(src)) {\n        src = [{ path: src, weight, style }];\n    }\n    else {\n        if (src.length === 0) {\n            (0, next_font_error_1.nextFontError)('Unexpected empty `src` array.');\n        }\n    }\n    src = src.map((fontFile) => {\n        var _a;\n        const ext = (_a = /\\.(woff|woff2|eot|ttf|otf)$/.exec(fontFile.path)) === null || _a === void 0 ? void 0 : _a[1];\n        if (!ext) {\n            (0, next_font_error_1.nextFontError)(`Unexpected file \\`${fontFile.path}\\``);\n        }\n        return {\n            ...fontFile,\n            ext,\n            format: extToFormat[ext],\n        };\n    });\n    if (Array.isArray(declarations)) {\n        declarations.forEach((declaration) => {\n            if ([\n                'font-family',\n                'src',\n                'font-display',\n                'font-weight',\n                'font-style',\n            ].includes(declaration === null || declaration === void 0 ? void 0 : declaration.prop)) {\n                (0, next_font_error_1.nextFontError)(`Invalid declaration prop: \\`${declaration.prop}\\``);\n            }\n        });\n    }\n    return {\n        src,\n        display,\n        weight,\n        style,\n        fallback,\n        preload,\n        variable,\n        adjustFontFallback,\n        declarations,\n    };\n}\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,6BAA6B,GAAG;AACxC,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,cAAc;IAChB,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;AACT;AACA;;CAEC,GACD,SAAS,8BAA8B,YAAY,EAAE,QAAQ;IACzD,IAAI,cAAc;QACd,CAAC,GAAG,kBAAkB,aAAa,EAAE,CAAC,oCAAoC,CAAC;IAC/E;IACA,IAAI,EAAE,GAAG,EAAE,UAAU,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,IAAI,EAAE,QAAQ,EAAE,kBAAkB,EAAE,YAAY,EAAG,GAAG,YAAY,CAAC;IACnI,IAAI,CAAC,YAAY,oBAAoB,CAAC,QAAQ,CAAC,UAAU;QACrD,CAAC,GAAG,kBAAkB,aAAa,EAAE,CAAC,wBAAwB,EAAE,QAAQ,+BAA+B,EAAE,CAAC,GAAG,0BAA0B,qBAAqB,EAAE,YAAY,oBAAoB,GAAG;IACrM;IACA,IAAI,CAAC,KAAK;QACN,CAAC,GAAG,kBAAkB,aAAa,EAAE;IACzC;IACA,IAAI,CAAC,MAAM,OAAO,CAAC,MAAM;QACrB,MAAM;YAAC;gBAAE,MAAM;gBAAK;gBAAQ;YAAM;SAAE;IACxC,OACK;QACD,IAAI,IAAI,MAAM,KAAK,GAAG;YAClB,CAAC,GAAG,kBAAkB,aAAa,EAAE;QACzC;IACJ;IACA,MAAM,IAAI,GAAG,CAAC,CAAC;QACX,IAAI;QACJ,MAAM,MAAM,CAAC,KAAK,8BAA8B,IAAI,CAAC,SAAS,IAAI,CAAC,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,EAAE,CAAC,EAAE;QAC/G,IAAI,CAAC,KAAK;YACN,CAAC,GAAG,kBAAkB,aAAa,EAAE,CAAC,kBAAkB,EAAE,SAAS,IAAI,CAAC,EAAE,CAAC;QAC/E;QACA,OAAO;YACH,GAAG,QAAQ;YACX;YACA,QAAQ,WAAW,CAAC,IAAI;QAC5B;IACJ;IACA,IAAI,MAAM,OAAO,CAAC,eAAe;QAC7B,aAAa,OAAO,CAAC,CAAC;YAClB,IAAI;gBACA;gBACA;gBACA;gBACA;gBACA;aACH,CAAC,QAAQ,CAAC,gBAAgB,QAAQ,gBAAgB,KAAK,IAAI,KAAK,IAAI,YAAY,IAAI,GAAG;gBACpF,CAAC,GAAG,kBAAkB,aAAa,EAAE,CAAC,4BAA4B,EAAE,YAAY,IAAI,CAAC,EAAE,CAAC;YAC5F;QACJ;IACJ;IACA,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DEV-%20DD/Documents/learning-code-javascript/nextjs/01-primeiro-projeto/node_modules/next/dist/compiled/%40next/font/dist/local/loader.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\nlet fontFromBuffer;\ntry {\n    const mod = require('../fontkit').default;\n    fontFromBuffer = mod.default || mod;\n}\ncatch { }\nconst util_1 = require(\"util\");\nconst pick_font_file_for_fallback_generation_1 = require(\"./pick-font-file-for-fallback-generation\");\nconst get_fallback_metrics_from_font_file_1 = require(\"./get-fallback-metrics-from-font-file\");\nconst validate_local_font_function_call_1 = require(\"./validate-local-font-function-call\");\nconst nextFontLocalFontLoader = async ({ functionName, variableName, data, emitFontFile, resolve, loaderContext, }) => {\n    const { src, display, fallback, preload, variable, adjustFontFallback, declarations, weight: defaultWeight, style: defaultStyle, } = (0, validate_local_font_function_call_1.validateLocalFontFunctionCall)(functionName, data[0]);\n    // Load all font files and emit them to the .next output directory\n    // Also generate a @font-face CSS for each font file\n    const fontFiles = await Promise.all(src.map(async ({ path, style, weight, ext, format }) => {\n        const resolved = await resolve(path);\n        const fileBuffer = await (0, util_1.promisify)(loaderContext.fs.readFile)(resolved);\n        const fontUrl = emitFontFile(fileBuffer, ext, preload, typeof adjustFontFallback === 'undefined' || !!adjustFontFallback);\n        // Try to load font metadata from the font file using fontkit.\n        // The data is used to calculate the fallback font override values.\n        let fontMetadata;\n        try {\n            fontMetadata = fontFromBuffer === null || fontFromBuffer === void 0 ? void 0 : fontFromBuffer(fileBuffer);\n        }\n        catch (e) {\n            console.error(`Failed to load font file: ${resolved}\\n${e}`);\n        }\n        // Get all values that should be added to the @font-face declaration\n        const fontFaceProperties = [\n            ...(declarations\n                ? declarations.map(({ prop, value }) => [prop, value])\n                : []),\n            ['font-family', variableName],\n            ['src', `url(${fontUrl}) format('${format}')`],\n            ['font-display', display],\n            ...((weight !== null && weight !== void 0 ? weight : defaultWeight)\n                ? [['font-weight', weight !== null && weight !== void 0 ? weight : defaultWeight]]\n                : []),\n            ...((style !== null && style !== void 0 ? style : defaultStyle)\n                ? [['font-style', style !== null && style !== void 0 ? style : defaultStyle]]\n                : []),\n        ];\n        // Generate the @font-face CSS from the font-face properties\n        const css = `@font-face {\\n${fontFaceProperties\n            .map(([property, value]) => `${property}: ${value};`)\n            .join('\\n')}\\n}\\n`;\n        return {\n            css,\n            fontMetadata,\n            weight,\n            style,\n        };\n    }));\n    // Calculate the fallback font override values using the font file metadata\n    let adjustFontFallbackMetrics;\n    if (adjustFontFallback !== false) {\n        const fallbackFontFile = (0, pick_font_file_for_fallback_generation_1.pickFontFileForFallbackGeneration)(fontFiles);\n        if (fallbackFontFile.fontMetadata) {\n            adjustFontFallbackMetrics = (0, get_fallback_metrics_from_font_file_1.getFallbackMetricsFromFontFile)(fallbackFontFile.fontMetadata, adjustFontFallback === 'Times New Roman' ? 'serif' : 'sans-serif');\n        }\n    }\n    return {\n        css: fontFiles.map(({ css }) => css).join('\\n'),\n        fallbackFonts: fallback,\n        weight: src.length === 1 ? src[0].weight : undefined,\n        style: src.length === 1 ? src[0].style : undefined,\n        variable,\n        adjustFontFallback: adjustFontFallbackMetrics,\n    };\n};\nexports.default = nextFontLocalFontLoader;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}